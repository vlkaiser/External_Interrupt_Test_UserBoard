
External_Interrupt_Test_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001818  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00001818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000023c  2000000c  00001824  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000248  00001a60  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00024924  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b84  00000000  00000000  000449b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000456a  00000000  00000000  00048535  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000538  00000000  00000000  0004ca9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000500  00000000  00000000  0004cfd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013d15  00000000  00000000  0004d4d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c345  00000000  00000000  000611ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005fdd6  00000000  00000000  0006d531  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000c5c  00000000  00000000  000cd308  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 22 00 20 a5 14 00 00 a1 14 00 00 a1 14 00 00     H". ............
	...
      2c:	a1 14 00 00 00 00 00 00 00 00 00 00 a1 14 00 00     ................
      3c:	e1 15 00 00 a1 14 00 00 a1 14 00 00 a1 14 00 00     ................
      4c:	a1 14 00 00 c9 0d 00 00 a1 14 00 00 a1 14 00 00     ................
      5c:	f9 09 00 00 09 0a 00 00 19 0a 00 00 29 0a 00 00     ............)...
      6c:	39 0a 00 00 49 0a 00 00 a1 14 00 00 a1 14 00 00     9...I...........
      7c:	a1 14 00 00 a1 14 00 00 a1 14 00 00 a1 14 00 00     ................
      8c:	a1 14 00 00 a1 14 00 00 a1 14 00 00 a1 14 00 00     ................
      9c:	a1 14 00 00 a1 14 00 00                             ........

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	2000000c 	.word	0x2000000c
      c4:	00000000 	.word	0x00000000
      c8:	00001818 	.word	0x00001818

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000010 	.word	0x20000010
      f8:	00001818 	.word	0x00001818
      fc:	00001818 	.word	0x00001818
     100:	00000000 	.word	0x00000000

00000104 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     104:	6802      	ldr	r2, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     106:	8a13      	ldrh	r3, [r2, #16]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     108:	b21b      	sxth	r3, r3
     10a:	2b00      	cmp	r3, #0
     10c:	dbfb      	blt.n	106 <_i2c_master_wait_for_sync+0x2>
		/* Wait for I2C module to sync. */
	}
}
     10e:	4770      	bx	lr

00000110 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     110:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     112:	7b9a      	ldrb	r2, [r3, #14]
     114:	0792      	lsls	r2, r2, #30
     116:	d507      	bpl.n	128 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     118:	2202      	movs	r2, #2
     11a:	739a      	strb	r2, [r3, #14]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     11c:	8a1b      	ldrh	r3, [r3, #16]
     11e:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     120:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     122:	17db      	asrs	r3, r3, #31
     124:	4018      	ands	r0, r3
}
     126:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     128:	8a1a      	ldrh	r2, [r3, #16]
     12a:	0752      	lsls	r2, r2, #29
     12c:	d506      	bpl.n	13c <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     12e:	6859      	ldr	r1, [r3, #4]
     130:	22c0      	movs	r2, #192	; 0xc0
     132:	0292      	lsls	r2, r2, #10
     134:	430a      	orrs	r2, r1
     136:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     138:	2018      	movs	r0, #24
     13a:	e7f4      	b.n	126 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     13c:	2000      	movs	r0, #0
     13e:	e7f2      	b.n	126 <_i2c_master_address_response+0x16>

00000140 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
static enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     140:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     142:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     144:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     146:	2401      	movs	r4, #1
     148:	2502      	movs	r5, #2
     14a:	7b91      	ldrb	r1, [r2, #14]
     14c:	4221      	tst	r1, r4
     14e:	d10b      	bne.n	168 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     150:	7b91      	ldrb	r1, [r2, #14]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     152:	4229      	tst	r1, r5
     154:	d106      	bne.n	164 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     156:	3301      	adds	r3, #1
     158:	b29b      	uxth	r3, r3
     15a:	8901      	ldrh	r1, [r0, #8]
     15c:	4299      	cmp	r1, r3
     15e:	d8f4      	bhi.n	14a <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     160:	2012      	movs	r0, #18
     162:	e002      	b.n	16a <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     164:	2000      	movs	r0, #0
     166:	e000      	b.n	16a <_i2c_master_wait_for_bus+0x2a>
     168:	2000      	movs	r0, #0
}
     16a:	bd30      	pop	{r4, r5, pc}

0000016c <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     16c:	b5f0      	push	{r4, r5, r6, r7, lr}
     16e:	46de      	mov	lr, fp
     170:	4657      	mov	r7, sl
     172:	464e      	mov	r6, r9
     174:	4645      	mov	r5, r8
     176:	b5e0      	push	{r5, r6, r7, lr}
     178:	b083      	sub	sp, #12
     17a:	0006      	movs	r6, r0
     17c:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     17e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     180:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ;
     182:	880b      	ldrh	r3, [r1, #0]
     184:	005b      	lsls	r3, r3, #1
     186:	2201      	movs	r2, #1
     188:	4313      	orrs	r3, r2
     18a:	b2db      	uxtb	r3, r3
     18c:	752b      	strb	r3, [r5, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     18e:	4b32      	ldr	r3, [pc, #200]	; (258 <_i2c_master_read_packet+0xec>)
     190:	4798      	blx	r3
     192:	9001      	str	r0, [sp, #4]

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     194:	686b      	ldr	r3, [r5, #4]
     196:	4a31      	ldr	r2, [pc, #196]	; (25c <_i2c_master_read_packet+0xf0>)
     198:	4013      	ands	r3, r2
     19a:	606b      	str	r3, [r5, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     19c:	2800      	cmp	r0, #0
     19e:	d007      	beq.n	1b0 <_i2c_master_read_packet+0x44>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     1a0:	9801      	ldr	r0, [sp, #4]
     1a2:	b003      	add	sp, #12
     1a4:	bc3c      	pop	{r2, r3, r4, r5}
     1a6:	4690      	mov	r8, r2
     1a8:	4699      	mov	r9, r3
     1aa:	46a2      	mov	sl, r4
     1ac:	46ab      	mov	fp, r5
     1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp_status = _i2c_master_address_response(module);
     1b0:	0030      	movs	r0, r6
     1b2:	4b2b      	ldr	r3, [pc, #172]	; (260 <_i2c_master_read_packet+0xf4>)
     1b4:	4798      	blx	r3
     1b6:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     1b8:	2800      	cmp	r0, #0
     1ba:	d1f1      	bne.n	1a0 <_i2c_master_read_packet+0x34>
     1bc:	3c01      	subs	r4, #1
     1be:	b2a4      	uxth	r4, r4
     1c0:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     1c2:	4b28      	ldr	r3, [pc, #160]	; (264 <_i2c_master_read_packet+0xf8>)
     1c4:	469a      	mov	sl, r3
				_i2c_master_wait_for_sync(module);
     1c6:	4b28      	ldr	r3, [pc, #160]	; (268 <_i2c_master_read_packet+0xfc>)
     1c8:	469b      	mov	fp, r3
     1ca:	e011      	b.n	1f0 <_i2c_master_read_packet+0x84>
     1cc:	0030      	movs	r0, r6
     1ce:	47d8      	blx	fp
				packet->data[counter++] = i2c_module->DATA.reg;
     1d0:	4643      	mov	r3, r8
     1d2:	1c5f      	adds	r7, r3, #1
     1d4:	b2bf      	uxth	r7, r7
     1d6:	7e2b      	ldrb	r3, [r5, #24]
     1d8:	464a      	mov	r2, r9
     1da:	6852      	ldr	r2, [r2, #4]
     1dc:	4641      	mov	r1, r8
     1de:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     1e0:	0030      	movs	r0, r6
     1e2:	4b1d      	ldr	r3, [pc, #116]	; (258 <_i2c_master_read_packet+0xec>)
     1e4:	4798      	blx	r3
     1e6:	3c01      	subs	r4, #1
     1e8:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     1ea:	2800      	cmp	r0, #0
     1ec:	d112      	bne.n	214 <_i2c_master_read_packet+0xa8>
				packet->data[counter++] = i2c_module->DATA.reg;
     1ee:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     1f0:	4554      	cmp	r4, sl
     1f2:	d011      	beq.n	218 <_i2c_master_read_packet+0xac>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     1f4:	8a2b      	ldrh	r3, [r5, #16]
     1f6:	069b      	lsls	r3, r3, #26
     1f8:	d52b      	bpl.n	252 <_i2c_master_read_packet+0xe6>
			if (module->send_nack && tmp_data_length == 0) {
     1fa:	7af3      	ldrb	r3, [r6, #11]
     1fc:	2b00      	cmp	r3, #0
     1fe:	d0e5      	beq.n	1cc <_i2c_master_read_packet+0x60>
     200:	2c00      	cmp	r4, #0
     202:	d1e3      	bne.n	1cc <_i2c_master_read_packet+0x60>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     204:	686a      	ldr	r2, [r5, #4]
     206:	2380      	movs	r3, #128	; 0x80
     208:	02db      	lsls	r3, r3, #11
     20a:	4313      	orrs	r3, r2
     20c:	606b      	str	r3, [r5, #4]
     20e:	3c01      	subs	r4, #1
     210:	b2a4      	uxth	r4, r4
     212:	e7ed      	b.n	1f0 <_i2c_master_read_packet+0x84>
				packet->data[counter++] = i2c_module->DATA.reg;
     214:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     216:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     218:	7ab3      	ldrb	r3, [r6, #10]
     21a:	2b00      	cmp	r3, #0
     21c:	d010      	beq.n	240 <_i2c_master_read_packet+0xd4>
			_i2c_master_wait_for_sync(module);
     21e:	0030      	movs	r0, r6
     220:	4b11      	ldr	r3, [pc, #68]	; (268 <_i2c_master_read_packet+0xfc>)
     222:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     224:	686a      	ldr	r2, [r5, #4]
     226:	23c0      	movs	r3, #192	; 0xc0
     228:	029b      	lsls	r3, r3, #10
     22a:	4313      	orrs	r3, r2
     22c:	606b      	str	r3, [r5, #4]
		_i2c_master_wait_for_sync(module);
     22e:	0030      	movs	r0, r6
     230:	4b0d      	ldr	r3, [pc, #52]	; (268 <_i2c_master_read_packet+0xfc>)
     232:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     234:	7e2a      	ldrb	r2, [r5, #24]
     236:	464b      	mov	r3, r9
     238:	685b      	ldr	r3, [r3, #4]
     23a:	4641      	mov	r1, r8
     23c:	545a      	strb	r2, [r3, r1]
     23e:	e7af      	b.n	1a0 <_i2c_master_read_packet+0x34>
		  	_i2c_master_wait_for_sync(module);
     240:	0030      	movs	r0, r6
     242:	4b09      	ldr	r3, [pc, #36]	; (268 <_i2c_master_read_packet+0xfc>)
     244:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(1);
     246:	686a      	ldr	r2, [r5, #4]
     248:	2380      	movs	r3, #128	; 0x80
     24a:	025b      	lsls	r3, r3, #9
     24c:	4313      	orrs	r3, r2
     24e:	606b      	str	r3, [r5, #4]
     250:	e7ed      	b.n	22e <_i2c_master_read_packet+0xc2>
				return STATUS_ERR_PACKET_COLLISION;
     252:	2341      	movs	r3, #65	; 0x41
     254:	9301      	str	r3, [sp, #4]
     256:	e7a3      	b.n	1a0 <_i2c_master_read_packet+0x34>
     258:	00000141 	.word	0x00000141
     25c:	fffbffff 	.word	0xfffbffff
     260:	00000111 	.word	0x00000111
     264:	0000ffff 	.word	0x0000ffff
     268:	00000105 	.word	0x00000105

0000026c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     26c:	b5f0      	push	{r4, r5, r6, r7, lr}
     26e:	46de      	mov	lr, fp
     270:	4657      	mov	r7, sl
     272:	464e      	mov	r6, r9
     274:	4645      	mov	r5, r8
     276:	b5e0      	push	{r5, r6, r7, lr}
     278:	b083      	sub	sp, #12
     27a:	0006      	movs	r6, r0
     27c:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     27e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     280:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     282:	4b24      	ldr	r3, [pc, #144]	; (314 <_i2c_master_write_packet+0xa8>)
     284:	4798      	blx	r3

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE;
     286:	883b      	ldrh	r3, [r7, #0]
     288:	005b      	lsls	r3, r3, #1
     28a:	b2db      	uxtb	r3, r3
     28c:	752b      	strb	r3, [r5, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     28e:	0030      	movs	r0, r6
     290:	4b21      	ldr	r3, [pc, #132]	; (318 <_i2c_master_write_packet+0xac>)
     292:	4798      	blx	r3
     294:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     296:	2800      	cmp	r0, #0
     298:	d007      	beq.n	2aa <_i2c_master_write_packet+0x3e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     29a:	9801      	ldr	r0, [sp, #4]
     29c:	b003      	add	sp, #12
     29e:	bc3c      	pop	{r2, r3, r4, r5}
     2a0:	4690      	mov	r8, r2
     2a2:	4699      	mov	r9, r3
     2a4:	46a2      	mov	sl, r4
     2a6:	46ab      	mov	fp, r5
     2a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp_status = _i2c_master_address_response(module);
     2aa:	0030      	movs	r0, r6
     2ac:	4b1b      	ldr	r3, [pc, #108]	; (31c <_i2c_master_write_packet+0xb0>)
     2ae:	4798      	blx	r3
     2b0:	1e03      	subs	r3, r0, #0
     2b2:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     2b4:	d1f1      	bne.n	29a <_i2c_master_write_packet+0x2e>
     2b6:	46a0      	mov	r8, r4
     2b8:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     2ba:	3320      	adds	r3, #32
     2bc:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     2be:	4b15      	ldr	r3, [pc, #84]	; (314 <_i2c_master_write_packet+0xa8>)
     2c0:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     2c2:	4b15      	ldr	r3, [pc, #84]	; (318 <_i2c_master_write_packet+0xac>)
     2c4:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     2c6:	4544      	cmp	r4, r8
     2c8:	d014      	beq.n	2f4 <_i2c_master_write_packet+0x88>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     2ca:	8a2b      	ldrh	r3, [r5, #16]
     2cc:	464a      	mov	r2, r9
     2ce:	4213      	tst	r3, r2
     2d0:	d01c      	beq.n	30c <_i2c_master_write_packet+0xa0>
			_i2c_master_wait_for_sync(module);
     2d2:	0030      	movs	r0, r6
     2d4:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     2d6:	687b      	ldr	r3, [r7, #4]
     2d8:	5d1b      	ldrb	r3, [r3, r4]
     2da:	762b      	strb	r3, [r5, #24]
			tmp_status = _i2c_master_wait_for_bus(module);
     2dc:	0030      	movs	r0, r6
     2de:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     2e0:	2800      	cmp	r0, #0
     2e2:	d106      	bne.n	2f2 <_i2c_master_write_packet+0x86>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     2e4:	8a2b      	ldrh	r3, [r5, #16]
     2e6:	3401      	adds	r4, #1
     2e8:	075b      	lsls	r3, r3, #29
     2ea:	d5ec      	bpl.n	2c6 <_i2c_master_write_packet+0x5a>
				tmp_status = STATUS_ERR_OVERFLOW;
     2ec:	231e      	movs	r3, #30
     2ee:	9301      	str	r3, [sp, #4]
     2f0:	e000      	b.n	2f4 <_i2c_master_write_packet+0x88>
			tmp_status = _i2c_master_wait_for_bus(module);
     2f2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     2f4:	7ab3      	ldrb	r3, [r6, #10]
     2f6:	2b00      	cmp	r3, #0
     2f8:	d0cf      	beq.n	29a <_i2c_master_write_packet+0x2e>
			_i2c_master_wait_for_sync(module);
     2fa:	0030      	movs	r0, r6
     2fc:	4b05      	ldr	r3, [pc, #20]	; (314 <_i2c_master_write_packet+0xa8>)
     2fe:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     300:	686a      	ldr	r2, [r5, #4]
     302:	23c0      	movs	r3, #192	; 0xc0
     304:	029b      	lsls	r3, r3, #10
     306:	4313      	orrs	r3, r2
     308:	606b      	str	r3, [r5, #4]
     30a:	e7c6      	b.n	29a <_i2c_master_write_packet+0x2e>
				return STATUS_ERR_PACKET_COLLISION;
     30c:	2341      	movs	r3, #65	; 0x41
     30e:	9301      	str	r3, [sp, #4]
     310:	e7c3      	b.n	29a <_i2c_master_write_packet+0x2e>
     312:	46c0      	nop			; (mov r8, r8)
     314:	00000105 	.word	0x00000105
     318:	00000141 	.word	0x00000141
     31c:	00000111 	.word	0x00000111

00000320 <i2c_master_init>:
{
     320:	b5f0      	push	{r4, r5, r6, r7, lr}
     322:	46ce      	mov	lr, r9
     324:	4647      	mov	r7, r8
     326:	b580      	push	{r7, lr}
     328:	b083      	sub	sp, #12
     32a:	0007      	movs	r7, r0
     32c:	000d      	movs	r5, r1
     32e:	0016      	movs	r6, r2
	module->hw = hw;
     330:	6039      	str	r1, [r7, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     332:	0008      	movs	r0, r1
     334:	4b52      	ldr	r3, [pc, #328]	; (480 <i2c_master_init+0x160>)
     336:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     338:	4a52      	ldr	r2, [pc, #328]	; (484 <i2c_master_init+0x164>)
     33a:	6a11      	ldr	r1, [r2, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     33c:	1c84      	adds	r4, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     33e:	2301      	movs	r3, #1
     340:	40a3      	lsls	r3, r4
     342:	430b      	orrs	r3, r1
     344:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     346:	a901      	add	r1, sp, #4
     348:	7933      	ldrb	r3, [r6, #4]
     34a:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     34c:	300d      	adds	r0, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     34e:	b2c4      	uxtb	r4, r0
     350:	0020      	movs	r0, r4
     352:	4b4d      	ldr	r3, [pc, #308]	; (488 <i2c_master_init+0x168>)
     354:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     356:	0020      	movs	r0, r4
     358:	4b4c      	ldr	r3, [pc, #304]	; (48c <i2c_master_init+0x16c>)
     35a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     35c:	7930      	ldrb	r0, [r6, #4]
     35e:	2100      	movs	r1, #0
     360:	4b4b      	ldr	r3, [pc, #300]	; (490 <i2c_master_init+0x170>)
     362:	4798      	blx	r3
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     364:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
     366:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     368:	079b      	lsls	r3, r3, #30
     36a:	d504      	bpl.n	376 <i2c_master_init+0x56>
}
     36c:	b003      	add	sp, #12
     36e:	bc0c      	pop	{r2, r3}
     370:	4690      	mov	r8, r2
     372:	4699      	mov	r9, r3
     374:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     376:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
     378:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     37a:	07db      	lsls	r3, r3, #31
     37c:	d4f6      	bmi.n	36c <i2c_master_init+0x4c>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     37e:	6838      	ldr	r0, [r7, #0]
     380:	4b3f      	ldr	r3, [pc, #252]	; (480 <i2c_master_init+0x160>)
     382:	4698      	mov	r8, r3
     384:	4798      	blx	r3
     386:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     388:	4942      	ldr	r1, [pc, #264]	; (494 <i2c_master_init+0x174>)
     38a:	4b43      	ldr	r3, [pc, #268]	; (498 <i2c_master_init+0x178>)
     38c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     38e:	00a4      	lsls	r4, r4, #2
     390:	4b42      	ldr	r3, [pc, #264]	; (49c <i2c_master_init+0x17c>)
     392:	50e7      	str	r7, [r4, r3]
	module->registered_callback = 0;
     394:	2300      	movs	r3, #0
     396:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
     398:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
     39a:	2200      	movs	r2, #0
     39c:	4691      	mov	r9, r2
     39e:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
     3a0:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
     3a2:	2225      	movs	r2, #37	; 0x25
     3a4:	4649      	mov	r1, r9
     3a6:	54b9      	strb	r1, [r7, r2]
	module->buffer = NULL;
     3a8:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
     3aa:	3314      	adds	r3, #20
     3ac:	602b      	str	r3, [r5, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3ae:	683c      	ldr	r4, [r7, #0]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     3b0:	0020      	movs	r0, r4
     3b2:	47c0      	blx	r8
     3b4:	4680      	mov	r8, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     3b6:	2380      	movs	r3, #128	; 0x80
     3b8:	466a      	mov	r2, sp
     3ba:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3bc:	466b      	mov	r3, sp
     3be:	464a      	mov	r2, r9
     3c0:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     3c2:	2301      	movs	r3, #1
     3c4:	466a      	mov	r2, sp
     3c6:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     3c8:	466b      	mov	r3, sp
     3ca:	464a      	mov	r2, r9
     3cc:	70da      	strb	r2, [r3, #3]
	uint32_t pad0 = config->pinmux_pad0;
     3ce:	6970      	ldr	r0, [r6, #20]
	uint32_t pad1 = config->pinmux_pad1;
     3d0:	69b5      	ldr	r5, [r6, #24]
	if (pad0 == PINMUX_DEFAULT) {
     3d2:	2800      	cmp	r0, #0
     3d4:	d048      	beq.n	468 <i2c_master_init+0x148>
	pin_conf.mux_position = pad0 & 0xFFFF;
     3d6:	466b      	mov	r3, sp
     3d8:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     3da:	2302      	movs	r3, #2
     3dc:	466a      	mov	r2, sp
     3de:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     3e0:	0c00      	lsrs	r0, r0, #16
     3e2:	b2c0      	uxtb	r0, r0
     3e4:	4669      	mov	r1, sp
     3e6:	4b2e      	ldr	r3, [pc, #184]	; (4a0 <i2c_master_init+0x180>)
     3e8:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     3ea:	2d00      	cmp	r5, #0
     3ec:	d041      	beq.n	472 <i2c_master_init+0x152>
	pin_conf.mux_position = pad1 & 0xFFFF;
     3ee:	466b      	mov	r3, sp
     3f0:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     3f2:	2302      	movs	r3, #2
     3f4:	466a      	mov	r2, sp
     3f6:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     3f8:	0c28      	lsrs	r0, r5, #16
     3fa:	b2c0      	uxtb	r0, r0
     3fc:	4669      	mov	r1, sp
     3fe:	4b28      	ldr	r3, [pc, #160]	; (4a0 <i2c_master_init+0x180>)
     400:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     402:	89b3      	ldrh	r3, [r6, #12]
     404:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     406:	89f3      	ldrh	r3, [r6, #14]
     408:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     40a:	7c32      	ldrb	r2, [r6, #16]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     40c:	2380      	movs	r3, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     40e:	2a00      	cmp	r2, #0
     410:	d104      	bne.n	41c <i2c_master_init+0xfc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     412:	4b24      	ldr	r3, [pc, #144]	; (4a4 <i2c_master_init+0x184>)
     414:	789b      	ldrb	r3, [r3, #2]
     416:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     418:	0fdb      	lsrs	r3, r3, #31
     41a:	01db      	lsls	r3, r3, #7
		tmp_ctrla |= config->start_hold_time;
     41c:	68b2      	ldr	r2, [r6, #8]
     41e:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     420:	7f32      	ldrb	r2, [r6, #28]
     422:	2a00      	cmp	r2, #0
     424:	d002      	beq.n	42c <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUT;
     426:	2280      	movs	r2, #128	; 0x80
     428:	05d2      	lsls	r2, r2, #23
     42a:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     42c:	6822      	ldr	r2, [r4, #0]
     42e:	6a31      	ldr	r1, [r6, #32]
     430:	430a      	orrs	r2, r1
     432:	4313      	orrs	r3, r2
     434:	6023      	str	r3, [r4, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     436:	2380      	movs	r3, #128	; 0x80
     438:	005b      	lsls	r3, r3, #1
     43a:	6063      	str	r3, [r4, #4]
	tmp_baud = (int32_t)(div_ceil(
     43c:	4645      	mov	r5, r8
     43e:	350d      	adds	r5, #13
     440:	b2e8      	uxtb	r0, r5
     442:	4b19      	ldr	r3, [pc, #100]	; (4a8 <i2c_master_init+0x188>)
     444:	4798      	blx	r3
     446:	6833      	ldr	r3, [r6, #0]
     448:	21fa      	movs	r1, #250	; 0xfa
     44a:	00c9      	lsls	r1, r1, #3
     44c:	4359      	muls	r1, r3
     44e:	1e4b      	subs	r3, r1, #1
     450:	1818      	adds	r0, r3, r0
     452:	4b16      	ldr	r3, [pc, #88]	; (4ac <i2c_master_init+0x18c>)
     454:	4798      	blx	r3
				(2000*(config->baud_rate))) - 5);
     456:	1f43      	subs	r3, r0, #5
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
     458:	2040      	movs	r0, #64	; 0x40
	if (tmp_baud > 255 || tmp_baud < 0) {
     45a:	2bff      	cmp	r3, #255	; 0xff
     45c:	d900      	bls.n	460 <i2c_master_init+0x140>
     45e:	e785      	b.n	36c <i2c_master_init+0x4c>
		i2c_module->BAUD.reg = (uint8_t)tmp_baud;
     460:	b2db      	uxtb	r3, r3
     462:	8163      	strh	r3, [r4, #10]
	enum status_code tmp_status_code = STATUS_OK;
     464:	2000      	movs	r0, #0
     466:	e781      	b.n	36c <i2c_master_init+0x4c>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     468:	2100      	movs	r1, #0
     46a:	0020      	movs	r0, r4
     46c:	4b10      	ldr	r3, [pc, #64]	; (4b0 <i2c_master_init+0x190>)
     46e:	4798      	blx	r3
     470:	e7b1      	b.n	3d6 <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     472:	2101      	movs	r1, #1
     474:	0020      	movs	r0, r4
     476:	4b0e      	ldr	r3, [pc, #56]	; (4b0 <i2c_master_init+0x190>)
     478:	4798      	blx	r3
     47a:	0005      	movs	r5, r0
     47c:	e7b7      	b.n	3ee <i2c_master_init+0xce>
     47e:	46c0      	nop			; (mov r8, r8)
     480:	00000951 	.word	0x00000951
     484:	40000400 	.word	0x40000400
     488:	00001349 	.word	0x00001349
     48c:	000012bd 	.word	0x000012bd
     490:	0000078d 	.word	0x0000078d
     494:	000005bd 	.word	0x000005bd
     498:	0000098d 	.word	0x0000098d
     49c:	20000064 	.word	0x20000064
     4a0:	00001441 	.word	0x00001441
     4a4:	41002000 	.word	0x41002000
     4a8:	00001365 	.word	0x00001365
     4ac:	00001641 	.word	0x00001641
     4b0:	000007d9 	.word	0x000007d9

000004b4 <i2c_master_read_packet_wait>:
{
     4b4:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     4b6:	8b83      	ldrh	r3, [r0, #28]
     4b8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     4ba:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     4bc:	2b00      	cmp	r3, #0
     4be:	d001      	beq.n	4c4 <i2c_master_read_packet_wait+0x10>
}
     4c0:	0010      	movs	r0, r2
     4c2:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     4c4:	3301      	adds	r3, #1
     4c6:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     4c8:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     4ca:	4b02      	ldr	r3, [pc, #8]	; (4d4 <i2c_master_read_packet_wait+0x20>)
     4cc:	4798      	blx	r3
     4ce:	0002      	movs	r2, r0
     4d0:	e7f6      	b.n	4c0 <i2c_master_read_packet_wait+0xc>
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	0000016d 	.word	0x0000016d

000004d8 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     4d8:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     4da:	8b83      	ldrh	r3, [r0, #28]
     4dc:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     4de:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     4e0:	2b00      	cmp	r3, #0
     4e2:	d001      	beq.n	4e8 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;
	
	return _i2c_master_write_packet(module, packet);
}
     4e4:	0010      	movs	r0, r2
     4e6:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     4e8:	3301      	adds	r3, #1
     4ea:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     4ec:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     4ee:	4b02      	ldr	r3, [pc, #8]	; (4f8 <i2c_master_write_packet_wait+0x20>)
     4f0:	4798      	blx	r3
     4f2:	0002      	movs	r2, r0
     4f4:	e7f6      	b.n	4e4 <i2c_master_write_packet_wait+0xc>
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	0000026d 	.word	0x0000026d

000004fc <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     4fc:	6802      	ldr	r2, [r0, #0]
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     4fe:	8a13      	ldrh	r3, [r2, #16]
	while (i2c_master_is_syncing(module)) {
     500:	b21b      	sxth	r3, r3
     502:	2b00      	cmp	r3, #0
     504:	dbfb      	blt.n	4fe <_i2c_master_wait_for_sync+0x2>
}
     506:	4770      	bx	lr

00000508 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     508:	b570      	push	{r4, r5, r6, lr}
     50a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     50c:	6806      	ldr	r6, [r0, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
     50e:	8b45      	ldrh	r5, [r0, #26]
     510:	8b83      	ldrh	r3, [r0, #28]
     512:	1aed      	subs	r5, r5, r3
     514:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     516:	8b83      	ldrh	r3, [r0, #28]
     518:	3b01      	subs	r3, #1
     51a:	b29b      	uxth	r3, r3
     51c:	8383      	strh	r3, [r0, #28]

	if (!module->buffer_remaining) {
     51e:	8b83      	ldrh	r3, [r0, #28]
     520:	b29b      	uxth	r3, r3
     522:	2b00      	cmp	r3, #0
     524:	d11c      	bne.n	560 <_i2c_master_read+0x58>
		/* Send nack */
	  	if (module->send_nack)
     526:	7ac3      	ldrb	r3, [r0, #11]
     528:	2b00      	cmp	r3, #0
     52a:	d004      	beq.n	536 <_i2c_master_read+0x2e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     52c:	6872      	ldr	r2, [r6, #4]
     52e:	2380      	movs	r3, #128	; 0x80
     530:	02db      	lsls	r3, r3, #11
     532:	4313      	orrs	r3, r2
     534:	6073      	str	r3, [r6, #4]
		if (module->send_stop) {
     536:	7aa3      	ldrb	r3, [r4, #10]
     538:	2b00      	cmp	r3, #0
     53a:	d008      	beq.n	54e <_i2c_master_read+0x46>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     53c:	0020      	movs	r0, r4
     53e:	4b0f      	ldr	r3, [pc, #60]	; (57c <_i2c_master_read+0x74>)
     540:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     542:	6872      	ldr	r2, [r6, #4]
     544:	23c0      	movs	r3, #192	; 0xc0
     546:	029b      	lsls	r3, r3, #10
     548:	4313      	orrs	r3, r2
     54a:	6073      	str	r3, [r6, #4]
     54c:	e00c      	b.n	568 <_i2c_master_read+0x60>
		} else {
		  	_i2c_master_wait_for_sync(module);
     54e:	0020      	movs	r0, r4
     550:	4b0a      	ldr	r3, [pc, #40]	; (57c <_i2c_master_read+0x74>)
     552:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(1);
     554:	6872      	ldr	r2, [r6, #4]
     556:	2380      	movs	r3, #128	; 0x80
     558:	025b      	lsls	r3, r3, #9
     55a:	4313      	orrs	r3, r2
     55c:	6073      	str	r3, [r6, #4]
     55e:	e003      	b.n	568 <_i2c_master_read+0x60>
		}
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     560:	6873      	ldr	r3, [r6, #4]
     562:	4a07      	ldr	r2, [pc, #28]	; (580 <_i2c_master_read+0x78>)
     564:	4013      	ands	r3, r2
     566:	6073      	str	r3, [r6, #4]
	}

	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     568:	0020      	movs	r0, r4
     56a:	4b04      	ldr	r3, [pc, #16]	; (57c <_i2c_master_read+0x74>)
     56c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     56e:	6a23      	ldr	r3, [r4, #32]
     570:	195d      	adds	r5, r3, r5
     572:	7e33      	ldrb	r3, [r6, #24]
     574:	b2db      	uxtb	r3, r3
     576:	702b      	strb	r3, [r5, #0]
}
     578:	bd70      	pop	{r4, r5, r6, pc}
     57a:	46c0      	nop			; (mov r8, r8)
     57c:	000004fd 	.word	0x000004fd
     580:	fffbffff 	.word	0xfffbffff

00000584 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     584:	b570      	push	{r4, r5, r6, lr}
     586:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     588:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     58a:	8a2b      	ldrh	r3, [r5, #16]
     58c:	075b      	lsls	r3, r3, #29
     58e:	d503      	bpl.n	598 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     590:	221e      	movs	r2, #30
     592:	2325      	movs	r3, #37	; 0x25
     594:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     596:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
     598:	8b46      	ldrh	r6, [r0, #26]
     59a:	8b83      	ldrh	r3, [r0, #28]
     59c:	1af6      	subs	r6, r6, r3
     59e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     5a0:	8b83      	ldrh	r3, [r0, #28]
     5a2:	3b01      	subs	r3, #1
     5a4:	b29b      	uxth	r3, r3
     5a6:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     5a8:	4b03      	ldr	r3, [pc, #12]	; (5b8 <_i2c_master_write+0x34>)
     5aa:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     5ac:	6a23      	ldr	r3, [r4, #32]
     5ae:	199e      	adds	r6, r3, r6
     5b0:	7833      	ldrb	r3, [r6, #0]
     5b2:	b2db      	uxtb	r3, r3
     5b4:	762b      	strb	r3, [r5, #24]
     5b6:	e7ee      	b.n	596 <_i2c_master_write+0x12>
     5b8:	000004fd 	.word	0x000004fd

000005bc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     5bc:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     5be:	0080      	lsls	r0, r0, #2
     5c0:	4b6e      	ldr	r3, [pc, #440]	; (77c <_i2c_master_interrupt_handler+0x1c0>)
     5c2:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5c4:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
     5c6:	7e63      	ldrb	r3, [r4, #25]
			module->registered_callback;
     5c8:	7e25      	ldrb	r5, [r4, #24]
	uint8_t callback_mask = module->enabled_callback &
     5ca:	401d      	ands	r5, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     5cc:	8b63      	ldrh	r3, [r4, #26]
     5ce:	b29b      	uxth	r3, r3
     5d0:	2b00      	cmp	r3, #0
     5d2:	d103      	bne.n	5dc <_i2c_master_interrupt_handler+0x20>
     5d4:	8ba3      	ldrh	r3, [r4, #28]
     5d6:	b29b      	uxth	r3, r3
     5d8:	2b00      	cmp	r3, #0
     5da:	d141      	bne.n	660 <_i2c_master_interrupt_handler+0xa4>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     5dc:	8b63      	ldrh	r3, [r4, #26]
     5de:	b29b      	uxth	r3, r3
     5e0:	2b00      	cmp	r3, #0
     5e2:	d008      	beq.n	5f6 <_i2c_master_interrupt_handler+0x3a>
     5e4:	8ba3      	ldrh	r3, [r4, #28]
     5e6:	b29b      	uxth	r3, r3
     5e8:	2b00      	cmp	r3, #0
     5ea:	d104      	bne.n	5f6 <_i2c_master_interrupt_handler+0x3a>
			(module->status == STATUS_BUSY) &&
     5ec:	3325      	adds	r3, #37	; 0x25
     5ee:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     5f0:	2b05      	cmp	r3, #5
     5f2:	d100      	bne.n	5f6 <_i2c_master_interrupt_handler+0x3a>
     5f4:	e066      	b.n	6c4 <_i2c_master_interrupt_handler+0x108>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     5f6:	8b63      	ldrh	r3, [r4, #26]
     5f8:	b29b      	uxth	r3, r3
     5fa:	2b00      	cmp	r3, #0
     5fc:	d00a      	beq.n	614 <_i2c_master_interrupt_handler+0x58>
     5fe:	8ba3      	ldrh	r3, [r4, #28]
     600:	b29b      	uxth	r3, r3
     602:	2b00      	cmp	r3, #0
     604:	d006      	beq.n	614 <_i2c_master_interrupt_handler+0x58>
		/* Check that bus ownership is not lost */
		if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     606:	8a33      	ldrh	r3, [r6, #16]
     608:	069b      	lsls	r3, r3, #26
     60a:	d500      	bpl.n	60e <_i2c_master_interrupt_handler+0x52>
     60c:	e07b      	b.n	706 <_i2c_master_interrupt_handler+0x14a>
			module->status = STATUS_ERR_PACKET_COLLISION;
     60e:	2241      	movs	r2, #65	; 0x41
     610:	2325      	movs	r3, #37	; 0x25
     612:	54e2      	strb	r2, [r4, r3]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     614:	8b63      	ldrh	r3, [r4, #26]
     616:	b29b      	uxth	r3, r3
     618:	2b00      	cmp	r3, #0
     61a:	d008      	beq.n	62e <_i2c_master_interrupt_handler+0x72>
     61c:	8ba3      	ldrh	r3, [r4, #28]
     61e:	b29b      	uxth	r3, r3
     620:	2b00      	cmp	r3, #0
     622:	d104      	bne.n	62e <_i2c_master_interrupt_handler+0x72>
			(module->status == STATUS_BUSY) &&
     624:	3325      	adds	r3, #37	; 0x25
     626:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     628:	2b05      	cmp	r3, #5
     62a:	d100      	bne.n	62e <_i2c_master_interrupt_handler+0x72>
     62c:	e077      	b.n	71e <_i2c_master_interrupt_handler+0x162>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     62e:	2325      	movs	r3, #37	; 0x25
     630:	5ce3      	ldrb	r3, [r4, r3]
     632:	2b05      	cmp	r3, #5
     634:	d013      	beq.n	65e <_i2c_master_interrupt_handler+0xa2>
     636:	2325      	movs	r3, #37	; 0x25
     638:	5ce3      	ldrb	r3, [r4, r3]
     63a:	2b00      	cmp	r3, #0
     63c:	d00f      	beq.n	65e <_i2c_master_interrupt_handler+0xa2>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     63e:	2303      	movs	r3, #3
     640:	7333      	strb	r3, [r6, #12]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     642:	2300      	movs	r3, #0
     644:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     646:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     648:	3325      	adds	r3, #37	; 0x25
     64a:	5ce3      	ldrb	r3, [r4, r3]
     64c:	2b41      	cmp	r3, #65	; 0x41
     64e:	d003      	beq.n	658 <_i2c_master_interrupt_handler+0x9c>
     650:	7aa3      	ldrb	r3, [r4, #10]
     652:	2b00      	cmp	r3, #0
     654:	d000      	beq.n	658 <_i2c_master_interrupt_handler+0x9c>
     656:	e084      	b.n	762 <_i2c_master_interrupt_handler+0x1a6>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     658:	076b      	lsls	r3, r5, #29
     65a:	d500      	bpl.n	65e <_i2c_master_interrupt_handler+0xa2>
     65c:	e08a      	b.n	774 <_i2c_master_interrupt_handler+0x1b8>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     65e:	bd70      	pop	{r4, r5, r6, pc}
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     660:	7bb3      	ldrb	r3, [r6, #14]
     662:	07db      	lsls	r3, r3, #31
     664:	d507      	bpl.n	676 <_i2c_master_interrupt_handler+0xba>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     666:	2301      	movs	r3, #1
     668:	73b3      	strb	r3, [r6, #14]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     66a:	8a33      	ldrh	r3, [r6, #16]
     66c:	079b      	lsls	r3, r3, #30
     66e:	d502      	bpl.n	676 <_i2c_master_interrupt_handler+0xba>
			module->status = STATUS_ERR_PACKET_COLLISION;
     670:	2241      	movs	r2, #65	; 0x41
     672:	2325      	movs	r3, #37	; 0x25
     674:	54e2      	strb	r2, [r4, r3]
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     676:	8a33      	ldrh	r3, [r6, #16]
     678:	075b      	lsls	r3, r3, #29
     67a:	d507      	bpl.n	68c <_i2c_master_interrupt_handler+0xd0>
		module->status           = STATUS_ERR_BAD_ADDRESS;
     67c:	2218      	movs	r2, #24
     67e:	2325      	movs	r3, #37	; 0x25
     680:	54e2      	strb	r2, [r4, r3]
		module->buffer_remaining = 0;
     682:	2300      	movs	r3, #0
     684:	83a3      	strh	r3, [r4, #28]
		if (module->send_stop) {
     686:	7aa3      	ldrb	r3, [r4, #10]
     688:	2b00      	cmp	r3, #0
     68a:	d10e      	bne.n	6aa <_i2c_master_interrupt_handler+0xee>
	module->buffer_length = module->buffer_remaining;
     68c:	8ba3      	ldrh	r3, [r4, #28]
     68e:	b29b      	uxth	r3, r3
     690:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     692:	2325      	movs	r3, #37	; 0x25
     694:	5ce3      	ldrb	r3, [r4, r3]
     696:	2b05      	cmp	r3, #5
     698:	d1bc      	bne.n	614 <_i2c_master_interrupt_handler+0x58>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     69a:	331f      	adds	r3, #31
     69c:	5ce3      	ldrb	r3, [r4, r3]
     69e:	2b00      	cmp	r3, #0
     6a0:	d00c      	beq.n	6bc <_i2c_master_interrupt_handler+0x100>
			_i2c_master_read(module);
     6a2:	0020      	movs	r0, r4
     6a4:	4b36      	ldr	r3, [pc, #216]	; (780 <_i2c_master_interrupt_handler+0x1c4>)
     6a6:	4798      	blx	r3
     6a8:	e7b4      	b.n	614 <_i2c_master_interrupt_handler+0x58>
			_i2c_master_wait_for_sync(module);
     6aa:	0020      	movs	r0, r4
     6ac:	4b35      	ldr	r3, [pc, #212]	; (784 <_i2c_master_interrupt_handler+0x1c8>)
     6ae:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6b0:	6872      	ldr	r2, [r6, #4]
     6b2:	23c0      	movs	r3, #192	; 0xc0
     6b4:	029b      	lsls	r3, r3, #10
     6b6:	4313      	orrs	r3, r2
     6b8:	6073      	str	r3, [r6, #4]
     6ba:	e7e7      	b.n	68c <_i2c_master_interrupt_handler+0xd0>
			_i2c_master_write(module);
     6bc:	0020      	movs	r0, r4
     6be:	4b32      	ldr	r3, [pc, #200]	; (788 <_i2c_master_interrupt_handler+0x1cc>)
     6c0:	4798      	blx	r3
     6c2:	e7a7      	b.n	614 <_i2c_master_interrupt_handler+0x58>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     6c4:	331f      	adds	r3, #31
     6c6:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     6c8:	2b00      	cmp	r3, #0
     6ca:	d000      	beq.n	6ce <_i2c_master_interrupt_handler+0x112>
     6cc:	e793      	b.n	5f6 <_i2c_master_interrupt_handler+0x3a>
		i2c_module->INTENCLR.reg =
     6ce:	3303      	adds	r3, #3
     6d0:	7333      	strb	r3, [r6, #12]
		module->buffer_length = 0;
     6d2:	2300      	movs	r3, #0
     6d4:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     6d6:	3325      	adds	r3, #37	; 0x25
     6d8:	2200      	movs	r2, #0
     6da:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     6dc:	7aa3      	ldrb	r3, [r4, #10]
     6de:	2b00      	cmp	r3, #0
     6e0:	d108      	bne.n	6f4 <_i2c_master_interrupt_handler+0x138>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     6e2:	2301      	movs	r3, #1
     6e4:	73b3      	strb	r3, [r6, #14]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     6e6:	07eb      	lsls	r3, r5, #31
     6e8:	d400      	bmi.n	6ec <_i2c_master_interrupt_handler+0x130>
     6ea:	e793      	b.n	614 <_i2c_master_interrupt_handler+0x58>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     6ec:	68e3      	ldr	r3, [r4, #12]
     6ee:	0020      	movs	r0, r4
     6f0:	4798      	blx	r3
     6f2:	e78f      	b.n	614 <_i2c_master_interrupt_handler+0x58>
			_i2c_master_wait_for_sync(module);
     6f4:	0020      	movs	r0, r4
     6f6:	4b23      	ldr	r3, [pc, #140]	; (784 <_i2c_master_interrupt_handler+0x1c8>)
     6f8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6fa:	6872      	ldr	r2, [r6, #4]
     6fc:	23c0      	movs	r3, #192	; 0xc0
     6fe:	029b      	lsls	r3, r3, #10
     700:	4313      	orrs	r3, r2
     702:	6073      	str	r3, [r6, #4]
     704:	e7ef      	b.n	6e6 <_i2c_master_interrupt_handler+0x12a>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     706:	2324      	movs	r3, #36	; 0x24
     708:	5ce3      	ldrb	r3, [r4, r3]
     70a:	2b00      	cmp	r3, #0
     70c:	d103      	bne.n	716 <_i2c_master_interrupt_handler+0x15a>
			_i2c_master_write(module);
     70e:	0020      	movs	r0, r4
     710:	4b1d      	ldr	r3, [pc, #116]	; (788 <_i2c_master_interrupt_handler+0x1cc>)
     712:	4798      	blx	r3
     714:	e77e      	b.n	614 <_i2c_master_interrupt_handler+0x58>
			_i2c_master_read(module);
     716:	0020      	movs	r0, r4
     718:	4b19      	ldr	r3, [pc, #100]	; (780 <_i2c_master_interrupt_handler+0x1c4>)
     71a:	4798      	blx	r3
     71c:	e77a      	b.n	614 <_i2c_master_interrupt_handler+0x58>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     71e:	331f      	adds	r3, #31
     720:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     722:	2b01      	cmp	r3, #1
     724:	d000      	beq.n	728 <_i2c_master_interrupt_handler+0x16c>
     726:	e782      	b.n	62e <_i2c_master_interrupt_handler+0x72>
		i2c_module->INTENCLR.reg =
     728:	3302      	adds	r3, #2
     72a:	7333      	strb	r3, [r6, #12]
		module->buffer_length = 0;
     72c:	2300      	movs	r3, #0
     72e:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     730:	3325      	adds	r3, #37	; 0x25
     732:	2200      	movs	r2, #0
     734:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     736:	07ab      	lsls	r3, r5, #30
     738:	d503      	bpl.n	742 <_i2c_master_interrupt_handler+0x186>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     73a:	2324      	movs	r3, #36	; 0x24
     73c:	5ce3      	ldrb	r3, [r4, r3]
     73e:	2b01      	cmp	r3, #1
     740:	d00b      	beq.n	75a <_i2c_master_interrupt_handler+0x19e>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     742:	07eb      	lsls	r3, r5, #31
     744:	d400      	bmi.n	748 <_i2c_master_interrupt_handler+0x18c>
     746:	e772      	b.n	62e <_i2c_master_interrupt_handler+0x72>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     748:	2324      	movs	r3, #36	; 0x24
     74a:	5ce3      	ldrb	r3, [r4, r3]
     74c:	2b00      	cmp	r3, #0
     74e:	d000      	beq.n	752 <_i2c_master_interrupt_handler+0x196>
     750:	e76d      	b.n	62e <_i2c_master_interrupt_handler+0x72>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     752:	68e3      	ldr	r3, [r4, #12]
     754:	0020      	movs	r0, r4
     756:	4798      	blx	r3
     758:	e769      	b.n	62e <_i2c_master_interrupt_handler+0x72>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     75a:	6923      	ldr	r3, [r4, #16]
     75c:	0020      	movs	r0, r4
     75e:	4798      	blx	r3
     760:	e765      	b.n	62e <_i2c_master_interrupt_handler+0x72>
			_i2c_master_wait_for_sync(module);
     762:	0020      	movs	r0, r4
     764:	4b07      	ldr	r3, [pc, #28]	; (784 <_i2c_master_interrupt_handler+0x1c8>)
     766:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     768:	6872      	ldr	r2, [r6, #4]
     76a:	23e0      	movs	r3, #224	; 0xe0
     76c:	02db      	lsls	r3, r3, #11
     76e:	4313      	orrs	r3, r2
     770:	6073      	str	r3, [r6, #4]
     772:	e771      	b.n	658 <_i2c_master_interrupt_handler+0x9c>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     774:	6963      	ldr	r3, [r4, #20]
     776:	0020      	movs	r0, r4
     778:	4798      	blx	r3
}
     77a:	e770      	b.n	65e <_i2c_master_interrupt_handler+0xa2>
     77c:	20000064 	.word	0x20000064
     780:	00000509 	.word	0x00000509
     784:	000004fd 	.word	0x000004fd
     788:	00000585 	.word	0x00000585

0000078c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     78c:	b510      	push	{r4, lr}
     78e:	b082      	sub	sp, #8
     790:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     792:	4b0e      	ldr	r3, [pc, #56]	; (7cc <sercom_set_gclk_generator+0x40>)
     794:	781b      	ldrb	r3, [r3, #0]
     796:	2b00      	cmp	r3, #0
     798:	d007      	beq.n	7aa <sercom_set_gclk_generator+0x1e>
     79a:	2900      	cmp	r1, #0
     79c:	d105      	bne.n	7aa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     79e:	4b0b      	ldr	r3, [pc, #44]	; (7cc <sercom_set_gclk_generator+0x40>)
     7a0:	785b      	ldrb	r3, [r3, #1]
     7a2:	4283      	cmp	r3, r0
     7a4:	d010      	beq.n	7c8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     7a6:	201d      	movs	r0, #29
     7a8:	e00c      	b.n	7c4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     7aa:	a901      	add	r1, sp, #4
     7ac:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     7ae:	200c      	movs	r0, #12
     7b0:	4b07      	ldr	r3, [pc, #28]	; (7d0 <sercom_set_gclk_generator+0x44>)
     7b2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     7b4:	200c      	movs	r0, #12
     7b6:	4b07      	ldr	r3, [pc, #28]	; (7d4 <sercom_set_gclk_generator+0x48>)
     7b8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     7ba:	4b04      	ldr	r3, [pc, #16]	; (7cc <sercom_set_gclk_generator+0x40>)
     7bc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     7be:	2201      	movs	r2, #1
     7c0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     7c2:	2000      	movs	r0, #0
}
     7c4:	b002      	add	sp, #8
     7c6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     7c8:	2000      	movs	r0, #0
     7ca:	e7fb      	b.n	7c4 <sercom_set_gclk_generator+0x38>
     7cc:	20000028 	.word	0x20000028
     7d0:	00001349 	.word	0x00001349
     7d4:	000012bd 	.word	0x000012bd

000007d8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     7d8:	4b40      	ldr	r3, [pc, #256]	; (8dc <_sercom_get_default_pad+0x104>)
     7da:	4298      	cmp	r0, r3
     7dc:	d031      	beq.n	842 <_sercom_get_default_pad+0x6a>
     7de:	d90a      	bls.n	7f6 <_sercom_get_default_pad+0x1e>
     7e0:	4b3f      	ldr	r3, [pc, #252]	; (8e0 <_sercom_get_default_pad+0x108>)
     7e2:	4298      	cmp	r0, r3
     7e4:	d04d      	beq.n	882 <_sercom_get_default_pad+0xaa>
     7e6:	4b3f      	ldr	r3, [pc, #252]	; (8e4 <_sercom_get_default_pad+0x10c>)
     7e8:	4298      	cmp	r0, r3
     7ea:	d05a      	beq.n	8a2 <_sercom_get_default_pad+0xca>
     7ec:	4b3e      	ldr	r3, [pc, #248]	; (8e8 <_sercom_get_default_pad+0x110>)
     7ee:	4298      	cmp	r0, r3
     7f0:	d037      	beq.n	862 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     7f2:	2000      	movs	r0, #0
}
     7f4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     7f6:	4b3d      	ldr	r3, [pc, #244]	; (8ec <_sercom_get_default_pad+0x114>)
     7f8:	4298      	cmp	r0, r3
     7fa:	d00c      	beq.n	816 <_sercom_get_default_pad+0x3e>
     7fc:	4b3c      	ldr	r3, [pc, #240]	; (8f0 <_sercom_get_default_pad+0x118>)
     7fe:	4298      	cmp	r0, r3
     800:	d1f7      	bne.n	7f2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     802:	2901      	cmp	r1, #1
     804:	d017      	beq.n	836 <_sercom_get_default_pad+0x5e>
     806:	2900      	cmp	r1, #0
     808:	d05d      	beq.n	8c6 <_sercom_get_default_pad+0xee>
     80a:	2902      	cmp	r1, #2
     80c:	d015      	beq.n	83a <_sercom_get_default_pad+0x62>
     80e:	2903      	cmp	r1, #3
     810:	d015      	beq.n	83e <_sercom_get_default_pad+0x66>
	return 0;
     812:	2000      	movs	r0, #0
     814:	e7ee      	b.n	7f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     816:	2901      	cmp	r1, #1
     818:	d007      	beq.n	82a <_sercom_get_default_pad+0x52>
     81a:	2900      	cmp	r1, #0
     81c:	d051      	beq.n	8c2 <_sercom_get_default_pad+0xea>
     81e:	2902      	cmp	r1, #2
     820:	d005      	beq.n	82e <_sercom_get_default_pad+0x56>
     822:	2903      	cmp	r1, #3
     824:	d005      	beq.n	832 <_sercom_get_default_pad+0x5a>
	return 0;
     826:	2000      	movs	r0, #0
     828:	e7e4      	b.n	7f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     82a:	4832      	ldr	r0, [pc, #200]	; (8f4 <_sercom_get_default_pad+0x11c>)
     82c:	e7e2      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     82e:	4832      	ldr	r0, [pc, #200]	; (8f8 <_sercom_get_default_pad+0x120>)
     830:	e7e0      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     832:	4832      	ldr	r0, [pc, #200]	; (8fc <_sercom_get_default_pad+0x124>)
     834:	e7de      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     836:	4832      	ldr	r0, [pc, #200]	; (900 <_sercom_get_default_pad+0x128>)
     838:	e7dc      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     83a:	4832      	ldr	r0, [pc, #200]	; (904 <_sercom_get_default_pad+0x12c>)
     83c:	e7da      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     83e:	4832      	ldr	r0, [pc, #200]	; (908 <_sercom_get_default_pad+0x130>)
     840:	e7d8      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     842:	2901      	cmp	r1, #1
     844:	d007      	beq.n	856 <_sercom_get_default_pad+0x7e>
     846:	2900      	cmp	r1, #0
     848:	d03f      	beq.n	8ca <_sercom_get_default_pad+0xf2>
     84a:	2902      	cmp	r1, #2
     84c:	d005      	beq.n	85a <_sercom_get_default_pad+0x82>
     84e:	2903      	cmp	r1, #3
     850:	d005      	beq.n	85e <_sercom_get_default_pad+0x86>
	return 0;
     852:	2000      	movs	r0, #0
     854:	e7ce      	b.n	7f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     856:	482d      	ldr	r0, [pc, #180]	; (90c <_sercom_get_default_pad+0x134>)
     858:	e7cc      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     85a:	482d      	ldr	r0, [pc, #180]	; (910 <_sercom_get_default_pad+0x138>)
     85c:	e7ca      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     85e:	482d      	ldr	r0, [pc, #180]	; (914 <_sercom_get_default_pad+0x13c>)
     860:	e7c8      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     862:	2901      	cmp	r1, #1
     864:	d007      	beq.n	876 <_sercom_get_default_pad+0x9e>
     866:	2900      	cmp	r1, #0
     868:	d031      	beq.n	8ce <_sercom_get_default_pad+0xf6>
     86a:	2902      	cmp	r1, #2
     86c:	d005      	beq.n	87a <_sercom_get_default_pad+0xa2>
     86e:	2903      	cmp	r1, #3
     870:	d005      	beq.n	87e <_sercom_get_default_pad+0xa6>
	return 0;
     872:	2000      	movs	r0, #0
     874:	e7be      	b.n	7f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     876:	4828      	ldr	r0, [pc, #160]	; (918 <_sercom_get_default_pad+0x140>)
     878:	e7bc      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     87a:	4828      	ldr	r0, [pc, #160]	; (91c <_sercom_get_default_pad+0x144>)
     87c:	e7ba      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     87e:	4828      	ldr	r0, [pc, #160]	; (920 <_sercom_get_default_pad+0x148>)
     880:	e7b8      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     882:	2901      	cmp	r1, #1
     884:	d007      	beq.n	896 <_sercom_get_default_pad+0xbe>
     886:	2900      	cmp	r1, #0
     888:	d023      	beq.n	8d2 <_sercom_get_default_pad+0xfa>
     88a:	2902      	cmp	r1, #2
     88c:	d005      	beq.n	89a <_sercom_get_default_pad+0xc2>
     88e:	2903      	cmp	r1, #3
     890:	d005      	beq.n	89e <_sercom_get_default_pad+0xc6>
	return 0;
     892:	2000      	movs	r0, #0
     894:	e7ae      	b.n	7f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     896:	4823      	ldr	r0, [pc, #140]	; (924 <_sercom_get_default_pad+0x14c>)
     898:	e7ac      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     89a:	4823      	ldr	r0, [pc, #140]	; (928 <_sercom_get_default_pad+0x150>)
     89c:	e7aa      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     89e:	4823      	ldr	r0, [pc, #140]	; (92c <_sercom_get_default_pad+0x154>)
     8a0:	e7a8      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     8a2:	2901      	cmp	r1, #1
     8a4:	d007      	beq.n	8b6 <_sercom_get_default_pad+0xde>
     8a6:	2900      	cmp	r1, #0
     8a8:	d015      	beq.n	8d6 <_sercom_get_default_pad+0xfe>
     8aa:	2902      	cmp	r1, #2
     8ac:	d005      	beq.n	8ba <_sercom_get_default_pad+0xe2>
     8ae:	2903      	cmp	r1, #3
     8b0:	d005      	beq.n	8be <_sercom_get_default_pad+0xe6>
	return 0;
     8b2:	2000      	movs	r0, #0
     8b4:	e79e      	b.n	7f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8b6:	481e      	ldr	r0, [pc, #120]	; (930 <_sercom_get_default_pad+0x158>)
     8b8:	e79c      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     8ba:	481e      	ldr	r0, [pc, #120]	; (934 <_sercom_get_default_pad+0x15c>)
     8bc:	e79a      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     8be:	481e      	ldr	r0, [pc, #120]	; (938 <_sercom_get_default_pad+0x160>)
     8c0:	e798      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     8c2:	481e      	ldr	r0, [pc, #120]	; (93c <_sercom_get_default_pad+0x164>)
     8c4:	e796      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     8c6:	2003      	movs	r0, #3
     8c8:	e794      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     8ca:	481d      	ldr	r0, [pc, #116]	; (940 <_sercom_get_default_pad+0x168>)
     8cc:	e792      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     8ce:	481d      	ldr	r0, [pc, #116]	; (944 <_sercom_get_default_pad+0x16c>)
     8d0:	e790      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     8d2:	481d      	ldr	r0, [pc, #116]	; (948 <_sercom_get_default_pad+0x170>)
     8d4:	e78e      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     8d6:	481d      	ldr	r0, [pc, #116]	; (94c <_sercom_get_default_pad+0x174>)
     8d8:	e78c      	b.n	7f4 <_sercom_get_default_pad+0x1c>
     8da:	46c0      	nop			; (mov r8, r8)
     8dc:	42001000 	.word	0x42001000
     8e0:	42001800 	.word	0x42001800
     8e4:	42001c00 	.word	0x42001c00
     8e8:	42001400 	.word	0x42001400
     8ec:	42000800 	.word	0x42000800
     8f0:	42000c00 	.word	0x42000c00
     8f4:	00050003 	.word	0x00050003
     8f8:	00060003 	.word	0x00060003
     8fc:	00070003 	.word	0x00070003
     900:	00010003 	.word	0x00010003
     904:	001e0003 	.word	0x001e0003
     908:	001f0003 	.word	0x001f0003
     90c:	00090003 	.word	0x00090003
     910:	000a0003 	.word	0x000a0003
     914:	000b0003 	.word	0x000b0003
     918:	00110003 	.word	0x00110003
     91c:	00120003 	.word	0x00120003
     920:	00130003 	.word	0x00130003
     924:	000d0003 	.word	0x000d0003
     928:	000e0003 	.word	0x000e0003
     92c:	000f0003 	.word	0x000f0003
     930:	00170003 	.word	0x00170003
     934:	00180003 	.word	0x00180003
     938:	00190003 	.word	0x00190003
     93c:	00040003 	.word	0x00040003
     940:	00080003 	.word	0x00080003
     944:	00100003 	.word	0x00100003
     948:	000c0003 	.word	0x000c0003
     94c:	00160003 	.word	0x00160003

00000950 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     950:	b530      	push	{r4, r5, lr}
     952:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     954:	4b0b      	ldr	r3, [pc, #44]	; (984 <_sercom_get_sercom_inst_index+0x34>)
     956:	466a      	mov	r2, sp
     958:	cb32      	ldmia	r3!, {r1, r4, r5}
     95a:	c232      	stmia	r2!, {r1, r4, r5}
     95c:	cb32      	ldmia	r3!, {r1, r4, r5}
     95e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     960:	9b00      	ldr	r3, [sp, #0]
     962:	4283      	cmp	r3, r0
     964:	d00b      	beq.n	97e <_sercom_get_sercom_inst_index+0x2e>
     966:	2301      	movs	r3, #1
     968:	009a      	lsls	r2, r3, #2
     96a:	4669      	mov	r1, sp
     96c:	5852      	ldr	r2, [r2, r1]
     96e:	4282      	cmp	r2, r0
     970:	d006      	beq.n	980 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     972:	3301      	adds	r3, #1
     974:	2b06      	cmp	r3, #6
     976:	d1f7      	bne.n	968 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     978:	2000      	movs	r0, #0
}
     97a:	b007      	add	sp, #28
     97c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     97e:	2300      	movs	r3, #0
			return i;
     980:	b2d8      	uxtb	r0, r3
     982:	e7fa      	b.n	97a <_sercom_get_sercom_inst_index+0x2a>
     984:	000017a0 	.word	0x000017a0

00000988 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     988:	4770      	bx	lr
	...

0000098c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     98c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     98e:	4b0a      	ldr	r3, [pc, #40]	; (9b8 <_sercom_set_handler+0x2c>)
     990:	781b      	ldrb	r3, [r3, #0]
     992:	2b00      	cmp	r3, #0
     994:	d10c      	bne.n	9b0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     996:	4f09      	ldr	r7, [pc, #36]	; (9bc <_sercom_set_handler+0x30>)
     998:	4e09      	ldr	r6, [pc, #36]	; (9c0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     99a:	4d0a      	ldr	r5, [pc, #40]	; (9c4 <_sercom_set_handler+0x38>)
     99c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     99e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     9a0:	195a      	adds	r2, r3, r5
     9a2:	6014      	str	r4, [r2, #0]
     9a4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9a6:	2b18      	cmp	r3, #24
     9a8:	d1f9      	bne.n	99e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     9aa:	2201      	movs	r2, #1
     9ac:	4b02      	ldr	r3, [pc, #8]	; (9b8 <_sercom_set_handler+0x2c>)
     9ae:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     9b0:	0080      	lsls	r0, r0, #2
     9b2:	4b02      	ldr	r3, [pc, #8]	; (9bc <_sercom_set_handler+0x30>)
     9b4:	50c1      	str	r1, [r0, r3]
}
     9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9b8:	2000002a 	.word	0x2000002a
     9bc:	2000002c 	.word	0x2000002c
     9c0:	00000989 	.word	0x00000989
     9c4:	20000064 	.word	0x20000064

000009c8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     9c8:	b500      	push	{lr}
     9ca:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     9cc:	2307      	movs	r3, #7
     9ce:	466a      	mov	r2, sp
     9d0:	7013      	strb	r3, [r2, #0]
     9d2:	3301      	adds	r3, #1
     9d4:	7053      	strb	r3, [r2, #1]
     9d6:	3301      	adds	r3, #1
     9d8:	7093      	strb	r3, [r2, #2]
     9da:	3301      	adds	r3, #1
     9dc:	70d3      	strb	r3, [r2, #3]
     9de:	3301      	adds	r3, #1
     9e0:	7113      	strb	r3, [r2, #4]
     9e2:	3301      	adds	r3, #1
     9e4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     9e6:	4b03      	ldr	r3, [pc, #12]	; (9f4 <_sercom_get_interrupt_vector+0x2c>)
     9e8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     9ea:	466b      	mov	r3, sp
     9ec:	5618      	ldrsb	r0, [r3, r0]
}
     9ee:	b003      	add	sp, #12
     9f0:	bd00      	pop	{pc}
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	00000951 	.word	0x00000951

000009f8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     9f8:	b510      	push	{r4, lr}
     9fa:	4b02      	ldr	r3, [pc, #8]	; (a04 <SERCOM0_Handler+0xc>)
     9fc:	681b      	ldr	r3, [r3, #0]
     9fe:	2000      	movs	r0, #0
     a00:	4798      	blx	r3
     a02:	bd10      	pop	{r4, pc}
     a04:	2000002c 	.word	0x2000002c

00000a08 <SERCOM1_Handler>:
     a08:	b510      	push	{r4, lr}
     a0a:	4b02      	ldr	r3, [pc, #8]	; (a14 <SERCOM1_Handler+0xc>)
     a0c:	685b      	ldr	r3, [r3, #4]
     a0e:	2001      	movs	r0, #1
     a10:	4798      	blx	r3
     a12:	bd10      	pop	{r4, pc}
     a14:	2000002c 	.word	0x2000002c

00000a18 <SERCOM2_Handler>:
     a18:	b510      	push	{r4, lr}
     a1a:	4b02      	ldr	r3, [pc, #8]	; (a24 <SERCOM2_Handler+0xc>)
     a1c:	689b      	ldr	r3, [r3, #8]
     a1e:	2002      	movs	r0, #2
     a20:	4798      	blx	r3
     a22:	bd10      	pop	{r4, pc}
     a24:	2000002c 	.word	0x2000002c

00000a28 <SERCOM3_Handler>:
     a28:	b510      	push	{r4, lr}
     a2a:	4b02      	ldr	r3, [pc, #8]	; (a34 <SERCOM3_Handler+0xc>)
     a2c:	68db      	ldr	r3, [r3, #12]
     a2e:	2003      	movs	r0, #3
     a30:	4798      	blx	r3
     a32:	bd10      	pop	{r4, pc}
     a34:	2000002c 	.word	0x2000002c

00000a38 <SERCOM4_Handler>:
     a38:	b510      	push	{r4, lr}
     a3a:	4b02      	ldr	r3, [pc, #8]	; (a44 <SERCOM4_Handler+0xc>)
     a3c:	691b      	ldr	r3, [r3, #16]
     a3e:	2004      	movs	r0, #4
     a40:	4798      	blx	r3
     a42:	bd10      	pop	{r4, pc}
     a44:	2000002c 	.word	0x2000002c

00000a48 <SERCOM5_Handler>:
     a48:	b510      	push	{r4, lr}
     a4a:	4b02      	ldr	r3, [pc, #8]	; (a54 <SERCOM5_Handler+0xc>)
     a4c:	695b      	ldr	r3, [r3, #20]
     a4e:	2005      	movs	r0, #5
     a50:	4798      	blx	r3
     a52:	bd10      	pop	{r4, pc}
     a54:	2000002c 	.word	0x2000002c

00000a58 <configure_i2c_master>:
 * @return				- void
 *
 * @note				- Initialization
 **********************************************************************/
  void configure_i2c_master(void)
  {
     a58:	b570      	push	{r4, r5, r6, lr}
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     a5a:	4a1d      	ldr	r2, [pc, #116]	; (ad0 <configure_i2c_master+0x78>)
     a5c:	2364      	movs	r3, #100	; 0x64
     a5e:	6013      	str	r3, [r2, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
     a60:	2300      	movs	r3, #0
     a62:	7113      	strb	r3, [r2, #4]
	config->run_in_standby   = false;
     a64:	7413      	strb	r3, [r2, #16]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     a66:	2180      	movs	r1, #128	; 0x80
     a68:	0389      	lsls	r1, r1, #14
     a6a:	6091      	str	r1, [r2, #8]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
     a6c:	2101      	movs	r1, #1
     a6e:	4249      	negs	r1, r1
     a70:	8191      	strh	r1, [r2, #12]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     a72:	7713      	strb	r3, [r2, #28]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     a74:	6213      	str	r3, [r2, #32]
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
	config->master_scl_low_extend_timeout  = false;
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     a76:	33d7      	adds	r3, #215	; 0xd7
     a78:	8493      	strh	r3, [r2, #36]	; 0x24
	  /* Initialize config structure and software module. */
	  i2c_master_get_config_defaults(&config_i2c_master);

	  /* Change buffer timeout to something longer. */
	  config_i2c_master.buffer_timeout = 10000;
     a7a:	4b16      	ldr	r3, [pc, #88]	; (ad4 <configure_i2c_master+0x7c>)
     a7c:	81d3      	strh	r3, [r2, #14]

	  /* Initialize and enable device with config. */
	  // SERCOM0 PAD[0] PA08 - SDA
	  // SERCOM0 PAD[1] PA09 - SCL
	  config_i2c_master.pinmux_pad0    = PINMUX_PA08D_SERCOM2_PAD0;
     a7e:	4b16      	ldr	r3, [pc, #88]	; (ad8 <configure_i2c_master+0x80>)
     a80:	6153      	str	r3, [r2, #20]
	  config_i2c_master.pinmux_pad1    = PINMUX_PA09D_SERCOM2_PAD1;
     a82:	4b16      	ldr	r3, [pc, #88]	; (adc <configure_i2c_master+0x84>)
     a84:	6193      	str	r3, [r2, #24]
	  
	  i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
     a86:	4c16      	ldr	r4, [pc, #88]	; (ae0 <configure_i2c_master+0x88>)
     a88:	4916      	ldr	r1, [pc, #88]	; (ae4 <configure_i2c_master+0x8c>)
     a8a:	0020      	movs	r0, r4
     a8c:	4b16      	ldr	r3, [pc, #88]	; (ae8 <configure_i2c_master+0x90>)
     a8e:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a90:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     a92:	8a23      	ldrh	r3, [r4, #16]
	while (i2c_master_is_syncing(module)) {
     a94:	b21b      	sxth	r3, r3
     a96:	2b00      	cmp	r3, #0
     a98:	dbfb      	blt.n	a92 <configure_i2c_master+0x3a>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     a9a:	6823      	ldr	r3, [r4, #0]
     a9c:	2202      	movs	r2, #2
     a9e:	4313      	orrs	r3, r2
     aa0:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     aa2:	4d0f      	ldr	r5, [pc, #60]	; (ae0 <configure_i2c_master+0x88>)
     aa4:	6828      	ldr	r0, [r5, #0]
     aa6:	4b11      	ldr	r3, [pc, #68]	; (aec <configure_i2c_master+0x94>)
     aa8:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     aaa:	231f      	movs	r3, #31
     aac:	4018      	ands	r0, r3
     aae:	3b1e      	subs	r3, #30
     ab0:	4083      	lsls	r3, r0
     ab2:	4a0f      	ldr	r2, [pc, #60]	; (af0 <configure_i2c_master+0x98>)
     ab4:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     ab6:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
     ab8:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     aba:	2110      	movs	r1, #16
     abc:	8a22      	ldrh	r2, [r4, #16]
     abe:	420a      	tst	r2, r1
     ac0:	d104      	bne.n	acc <configure_i2c_master+0x74>
		timeout_counter++;
     ac2:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     ac4:	4283      	cmp	r3, r0
     ac6:	d3f9      	bcc.n	abc <configure_i2c_master+0x64>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     ac8:	2310      	movs	r3, #16
     aca:	8223      	strh	r3, [r4, #16]
	  i2c_master_enable(&i2c_master_instance);

  }// configure_i2c_master
     acc:	bd70      	pop	{r4, r5, r6, pc}
     ace:	46c0      	nop			; (mov r8, r8)
     ad0:	200001dc 	.word	0x200001dc
     ad4:	00002710 	.word	0x00002710
     ad8:	00080003 	.word	0x00080003
     adc:	00090003 	.word	0x00090003
     ae0:	200001b4 	.word	0x200001b4
     ae4:	42001000 	.word	0x42001000
     ae8:	00000321 	.word	0x00000321
     aec:	000009c9 	.word	0x000009c9
     af0:	e000e100 	.word	0xe000e100

00000af4 <i2c_slWrite>:
 * @return				- 0
 *
 * @note				- called from main
 **********************************************************************/
int8_t i2c_slWrite(uint8_t i2c_addr, uint8_t *write_buffer, uint8_t len)
 {
     af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     af6:	af00      	add	r7, sp, #0

	// Merge Device Register and data to TX
 	//uint8_t merged_packet[len];
	uint8_t merged_packet[len + 1];
     af8:	0013      	movs	r3, r2
     afa:	3308      	adds	r3, #8
     afc:	08db      	lsrs	r3, r3, #3
     afe:	00db      	lsls	r3, r3, #3
     b00:	466c      	mov	r4, sp
     b02:	1ae3      	subs	r3, r4, r3
     b04:	469d      	mov	sp, r3
     b06:	466d      	mov	r5, sp
 	//merged_packet[0] = reg_addr;
 	
 	for(uint16_t i = 0; i < len; i++)
     b08:	b292      	uxth	r2, r2
     b0a:	2a00      	cmp	r2, #0
     b0c:	d006      	beq.n	b1c <i2c_slWrite+0x28>
     b0e:	2300      	movs	r3, #0
 	//merged_packet[i + 1] = write_buffer[i];
	merged_packet[i] = write_buffer[i];
     b10:	5ccc      	ldrb	r4, [r1, r3]
     b12:	54ec      	strb	r4, [r5, r3]
     b14:	3301      	adds	r3, #1
 	for(uint16_t i = 0; i < len; i++)
     b16:	b29c      	uxth	r4, r3
     b18:	4294      	cmp	r4, r2
     b1a:	d3f9      	bcc.n	b10 <i2c_slWrite+0x1c>

	write_packet.address = i2c_addr;
     b1c:	4b0c      	ldr	r3, [pc, #48]	; (b50 <i2c_slWrite+0x5c>)
     b1e:	8018      	strh	r0, [r3, #0]
	write_packet.data = merged_packet;
     b20:	605d      	str	r5, [r3, #4]
	//write_packet.data_length = len + 1;
	write_packet.data_length = len;
     b22:	805a      	strh	r2, [r3, #2]
	read_packet.ten_bit_address = FALSE;
     b24:	4b0b      	ldr	r3, [pc, #44]	; (b54 <i2c_slWrite+0x60>)
     b26:	2200      	movs	r2, #0
     b28:	721a      	strb	r2, [r3, #8]
	read_packet.high_speed = FALSE;
     b2a:	725a      	strb	r2, [r3, #9]

	while (i2c_master_write_packet_wait(&i2c_master_instance, &write_packet) != STATUS_OK) 
     b2c:	4d08      	ldr	r5, [pc, #32]	; (b50 <i2c_slWrite+0x5c>)
     b2e:	4c0a      	ldr	r4, [pc, #40]	; (b58 <i2c_slWrite+0x64>)
     b30:	4e0a      	ldr	r6, [pc, #40]	; (b5c <i2c_slWrite+0x68>)
     b32:	0029      	movs	r1, r5
     b34:	0020      	movs	r0, r4
     b36:	47b0      	blx	r6
     b38:	2800      	cmp	r0, #0
     b3a:	d007      	beq.n	b4c <i2c_slWrite+0x58>
	{
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == I2C_TIMEOUT) {
     b3c:	4a08      	ldr	r2, [pc, #32]	; (b60 <i2c_slWrite+0x6c>)
     b3e:	8813      	ldrh	r3, [r2, #0]
     b40:	1c59      	adds	r1, r3, #1
     b42:	8011      	strh	r1, [r2, #0]
     b44:	2b0a      	cmp	r3, #10
     b46:	d1f4      	bne.n	b32 <i2c_slWrite+0x3e>
		return -1;
     b48:	2001      	movs	r0, #1
     b4a:	4240      	negs	r0, r0
			break;
		}
	}

	return 0;
 } //i2c_Write
     b4c:	46bd      	mov	sp, r7
     b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b50:	20000088 	.word	0x20000088
     b54:	200000a0 	.word	0x200000a0
     b58:	200001b4 	.word	0x200001b4
     b5c:	000004d9 	.word	0x000004d9
     b60:	20000044 	.word	0x20000044

00000b64 <i2c_slRead>:
 * @return				- 0
 *
 * @note				- called from main
 **********************************************************************/
int8_t i2c_slRead(uint8_t i2c_addr, uint8_t *read_buffer, uint8_t len)
 {
     b64:	b5f0      	push	{r4, r5, r6, r7, lr}
     b66:	b083      	sub	sp, #12
     b68:	000f      	movs	r7, r1
     b6a:	9201      	str	r2, [sp, #4]
	//Write to Address, Register
	read_packet.address = i2c_addr;
     b6c:	4b16      	ldr	r3, [pc, #88]	; (bc8 <i2c_slRead+0x64>)
     b6e:	8018      	strh	r0, [r3, #0]
	//read_packet.data = &reg_addr;
	//read_packet.data = read_buffer;
	read_packet.data_length = 0;	
     b70:	2200      	movs	r2, #0
     b72:	805a      	strh	r2, [r3, #2]
	read_packet.ten_bit_address = FALSE;
     b74:	721a      	strb	r2, [r3, #8]
	read_packet.high_speed = FALSE;
     b76:	725a      	strb	r2, [r3, #9]
	
	while (i2c_master_write_packet_wait(&i2c_master_instance, &read_packet) != STATUS_OK) 
     b78:	001d      	movs	r5, r3
     b7a:	4c14      	ldr	r4, [pc, #80]	; (bcc <i2c_slRead+0x68>)
     b7c:	4e14      	ldr	r6, [pc, #80]	; (bd0 <i2c_slRead+0x6c>)
     b7e:	0029      	movs	r1, r5
     b80:	0020      	movs	r0, r4
     b82:	47b0      	blx	r6
     b84:	2800      	cmp	r0, #0
     b86:	d009      	beq.n	b9c <i2c_slRead+0x38>
	{
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == I2C_TIMEOUT) {
     b88:	4a12      	ldr	r2, [pc, #72]	; (bd4 <i2c_slRead+0x70>)
     b8a:	8813      	ldrh	r3, [r2, #0]
     b8c:	1c59      	adds	r1, r3, #1
     b8e:	8011      	strh	r1, [r2, #0]
     b90:	2b0a      	cmp	r3, #10
     b92:	d1f4      	bne.n	b7e <i2c_slRead+0x1a>
			return -1;
     b94:	2001      	movs	r0, #1
     b96:	4240      	negs	r0, r0
		}
	}

	return 0;

     b98:	b003      	add	sp, #12
     b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	read_packet.data = read_buffer;
     b9c:	4b0a      	ldr	r3, [pc, #40]	; (bc8 <i2c_slRead+0x64>)
     b9e:	605f      	str	r7, [r3, #4]
	read_packet.data_length = len;
     ba0:	466a      	mov	r2, sp
     ba2:	8892      	ldrh	r2, [r2, #4]
     ba4:	805a      	strh	r2, [r3, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &read_packet) != STATUS_OK)
     ba6:	001d      	movs	r5, r3
     ba8:	4c08      	ldr	r4, [pc, #32]	; (bcc <i2c_slRead+0x68>)
     baa:	4e0b      	ldr	r6, [pc, #44]	; (bd8 <i2c_slRead+0x74>)
     bac:	0029      	movs	r1, r5
     bae:	0020      	movs	r0, r4
     bb0:	47b0      	blx	r6
     bb2:	2800      	cmp	r0, #0
     bb4:	d0f0      	beq.n	b98 <i2c_slRead+0x34>
		if (timeout++ == I2C_TIMEOUT) {
     bb6:	4a07      	ldr	r2, [pc, #28]	; (bd4 <i2c_slRead+0x70>)
     bb8:	8813      	ldrh	r3, [r2, #0]
     bba:	1c59      	adds	r1, r3, #1
     bbc:	8011      	strh	r1, [r2, #0]
     bbe:	2b0a      	cmp	r3, #10
     bc0:	d1f4      	bne.n	bac <i2c_slRead+0x48>
			return -1;
     bc2:	2001      	movs	r0, #1
     bc4:	4240      	negs	r0, r0
     bc6:	e7e7      	b.n	b98 <i2c_slRead+0x34>
     bc8:	200000a0 	.word	0x200000a0
     bcc:	200001b4 	.word	0x200001b4
     bd0:	000004d9 	.word	0x000004d9
     bd4:	20000044 	.word	0x20000044
     bd8:	000004b5 	.word	0x000004b5

00000bdc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     bdc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     bde:	2000      	movs	r0, #0
     be0:	4b08      	ldr	r3, [pc, #32]	; (c04 <delay_init+0x28>)
     be2:	4798      	blx	r3
     be4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     be6:	4c08      	ldr	r4, [pc, #32]	; (c08 <delay_init+0x2c>)
     be8:	21fa      	movs	r1, #250	; 0xfa
     bea:	0089      	lsls	r1, r1, #2
     bec:	47a0      	blx	r4
     bee:	4b07      	ldr	r3, [pc, #28]	; (c0c <delay_init+0x30>)
     bf0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     bf2:	4907      	ldr	r1, [pc, #28]	; (c10 <delay_init+0x34>)
     bf4:	0028      	movs	r0, r5
     bf6:	47a0      	blx	r4
     bf8:	4b06      	ldr	r3, [pc, #24]	; (c14 <delay_init+0x38>)
     bfa:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     bfc:	2205      	movs	r2, #5
     bfe:	4b06      	ldr	r3, [pc, #24]	; (c18 <delay_init+0x3c>)
     c00:	601a      	str	r2, [r3, #0]
}
     c02:	bd70      	pop	{r4, r5, r6, pc}
     c04:	00001231 	.word	0x00001231
     c08:	00001641 	.word	0x00001641
     c0c:	20000000 	.word	0x20000000
     c10:	000f4240 	.word	0x000f4240
     c14:	20000004 	.word	0x20000004
     c18:	e000e010 	.word	0xe000e010

00000c1c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     c1c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     c1e:	4b08      	ldr	r3, [pc, #32]	; (c40 <delay_cycles_ms+0x24>)
     c20:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     c22:	4a08      	ldr	r2, [pc, #32]	; (c44 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     c24:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     c26:	2180      	movs	r1, #128	; 0x80
     c28:	0249      	lsls	r1, r1, #9
	while (n--) {
     c2a:	3801      	subs	r0, #1
     c2c:	d307      	bcc.n	c3e <delay_cycles_ms+0x22>
	if (n > 0) {
     c2e:	2c00      	cmp	r4, #0
     c30:	d0fb      	beq.n	c2a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     c32:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     c34:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     c36:	6813      	ldr	r3, [r2, #0]
     c38:	420b      	tst	r3, r1
     c3a:	d0fc      	beq.n	c36 <delay_cycles_ms+0x1a>
     c3c:	e7f5      	b.n	c2a <delay_cycles_ms+0xe>
	}
}
     c3e:	bd30      	pop	{r4, r5, pc}
     c40:	20000000 	.word	0x20000000
     c44:	e000e010 	.word	0xe000e010

00000c48 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     c48:	4a04      	ldr	r2, [pc, #16]	; (c5c <_extint_enable+0x14>)
     c4a:	7813      	ldrb	r3, [r2, #0]
     c4c:	2102      	movs	r1, #2
     c4e:	430b      	orrs	r3, r1
     c50:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     c52:	7853      	ldrb	r3, [r2, #1]
     c54:	b25b      	sxtb	r3, r3
     c56:	2b00      	cmp	r3, #0
     c58:	dbfb      	blt.n	c52 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     c5a:	4770      	bx	lr
     c5c:	40001800 	.word	0x40001800

00000c60 <_system_extint_init>:
{
     c60:	b500      	push	{lr}
     c62:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     c64:	4a12      	ldr	r2, [pc, #72]	; (cb0 <_system_extint_init+0x50>)
     c66:	6993      	ldr	r3, [r2, #24]
     c68:	2140      	movs	r1, #64	; 0x40
     c6a:	430b      	orrs	r3, r1
     c6c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     c6e:	a901      	add	r1, sp, #4
     c70:	2300      	movs	r3, #0
     c72:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     c74:	2003      	movs	r0, #3
     c76:	4b0f      	ldr	r3, [pc, #60]	; (cb4 <_system_extint_init+0x54>)
     c78:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     c7a:	2003      	movs	r0, #3
     c7c:	4b0e      	ldr	r3, [pc, #56]	; (cb8 <_system_extint_init+0x58>)
     c7e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     c80:	4a0e      	ldr	r2, [pc, #56]	; (cbc <_system_extint_init+0x5c>)
     c82:	7813      	ldrb	r3, [r2, #0]
     c84:	2101      	movs	r1, #1
     c86:	430b      	orrs	r3, r1
     c88:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     c8a:	7853      	ldrb	r3, [r2, #1]
     c8c:	b25b      	sxtb	r3, r3
     c8e:	2b00      	cmp	r3, #0
     c90:	dbfb      	blt.n	c8a <_system_extint_init+0x2a>
     c92:	4b0b      	ldr	r3, [pc, #44]	; (cc0 <_system_extint_init+0x60>)
     c94:	0019      	movs	r1, r3
     c96:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     c98:	2200      	movs	r2, #0
     c9a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     c9c:	4299      	cmp	r1, r3
     c9e:	d1fc      	bne.n	c9a <_system_extint_init+0x3a>
     ca0:	2210      	movs	r2, #16
     ca2:	4b08      	ldr	r3, [pc, #32]	; (cc4 <_system_extint_init+0x64>)
     ca4:	601a      	str	r2, [r3, #0]
	_extint_enable();
     ca6:	4b08      	ldr	r3, [pc, #32]	; (cc8 <_system_extint_init+0x68>)
     ca8:	4798      	blx	r3
}
     caa:	b003      	add	sp, #12
     cac:	bd00      	pop	{pc}
     cae:	46c0      	nop			; (mov r8, r8)
     cb0:	40000400 	.word	0x40000400
     cb4:	00001349 	.word	0x00001349
     cb8:	000012bd 	.word	0x000012bd
     cbc:	40001800 	.word	0x40001800
     cc0:	20000204 	.word	0x20000204
     cc4:	e000e100 	.word	0xe000e100
     cc8:	00000c49 	.word	0x00000c49

00000ccc <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     ccc:	2300      	movs	r3, #0
     cce:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     cd0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     cd2:	2201      	movs	r2, #1
     cd4:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     cd6:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     cd8:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     cda:	3302      	adds	r3, #2
     cdc:	72c3      	strb	r3, [r0, #11]
}
     cde:	4770      	bx	lr

00000ce0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ce2:	b083      	sub	sp, #12
     ce4:	0005      	movs	r5, r0
     ce6:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ce8:	a901      	add	r1, sp, #4
     cea:	2300      	movs	r3, #0
     cec:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     cee:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     cf0:	7923      	ldrb	r3, [r4, #4]
     cf2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     cf4:	7a23      	ldrb	r3, [r4, #8]
     cf6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     cf8:	7820      	ldrb	r0, [r4, #0]
     cfa:	4b15      	ldr	r3, [pc, #84]	; (d50 <extint_chan_set_config+0x70>)
     cfc:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     cfe:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     d00:	2d1f      	cmp	r5, #31
     d02:	d800      	bhi.n	d06 <extint_chan_set_config+0x26>
		return eics[eic_index];
     d04:	4813      	ldr	r0, [pc, #76]	; (d54 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     d06:	2207      	movs	r2, #7
     d08:	402a      	ands	r2, r5
     d0a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     d0c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     d0e:	7aa3      	ldrb	r3, [r4, #10]
     d10:	2b00      	cmp	r3, #0
     d12:	d001      	beq.n	d18 <extint_chan_set_config+0x38>
     d14:	2308      	movs	r3, #8
     d16:	431f      	orrs	r7, r3
     d18:	08eb      	lsrs	r3, r5, #3
     d1a:	009b      	lsls	r3, r3, #2
     d1c:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     d1e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     d20:	260f      	movs	r6, #15
     d22:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     d24:	43b1      	bics	r1, r6
			(new_config << config_pos);
     d26:	4097      	lsls	r7, r2
     d28:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     d2a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     d2c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     d2e:	7a63      	ldrb	r3, [r4, #9]
     d30:	2b00      	cmp	r3, #0
     d32:	d106      	bne.n	d42 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     d34:	6943      	ldr	r3, [r0, #20]
     d36:	2201      	movs	r2, #1
     d38:	40aa      	lsls	r2, r5
     d3a:	4393      	bics	r3, r2
     d3c:	6143      	str	r3, [r0, #20]
	}
}
     d3e:	b003      	add	sp, #12
     d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     d42:	6942      	ldr	r2, [r0, #20]
     d44:	2301      	movs	r3, #1
     d46:	40ab      	lsls	r3, r5
     d48:	4313      	orrs	r3, r2
     d4a:	6143      	str	r3, [r0, #20]
     d4c:	e7f7      	b.n	d3e <extint_chan_set_config+0x5e>
     d4e:	46c0      	nop			; (mov r8, r8)
     d50:	00001441 	.word	0x00001441
     d54:	40001800 	.word	0x40001800

00000d58 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     d58:	b500      	push	{lr}
     d5a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     d5c:	ab01      	add	r3, sp, #4
     d5e:	2280      	movs	r2, #128	; 0x80
     d60:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     d62:	780a      	ldrb	r2, [r1, #0]
     d64:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     d66:	784a      	ldrb	r2, [r1, #1]
     d68:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     d6a:	788a      	ldrb	r2, [r1, #2]
     d6c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     d6e:	0019      	movs	r1, r3
     d70:	4b01      	ldr	r3, [pc, #4]	; (d78 <port_pin_set_config+0x20>)
     d72:	4798      	blx	r3
}
     d74:	b003      	add	sp, #12
     d76:	bd00      	pop	{pc}
     d78:	00001441 	.word	0x00001441

00000d7c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     d7c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     d7e:	2a00      	cmp	r2, #0
     d80:	d001      	beq.n	d86 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     d82:	0018      	movs	r0, r3
     d84:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     d86:	008b      	lsls	r3, r1, #2
     d88:	4a06      	ldr	r2, [pc, #24]	; (da4 <extint_register_callback+0x28>)
     d8a:	589b      	ldr	r3, [r3, r2]
     d8c:	2b00      	cmp	r3, #0
     d8e:	d003      	beq.n	d98 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     d90:	4283      	cmp	r3, r0
     d92:	d005      	beq.n	da0 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     d94:	231d      	movs	r3, #29
     d96:	e7f4      	b.n	d82 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     d98:	0089      	lsls	r1, r1, #2
     d9a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     d9c:	2300      	movs	r3, #0
     d9e:	e7f0      	b.n	d82 <extint_register_callback+0x6>
		return STATUS_OK;
     da0:	2300      	movs	r3, #0
     da2:	e7ee      	b.n	d82 <extint_register_callback+0x6>
     da4:	20000204 	.word	0x20000204

00000da8 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     da8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     daa:	2900      	cmp	r1, #0
     dac:	d001      	beq.n	db2 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     dae:	0018      	movs	r0, r3
     db0:	4770      	bx	lr
		return NULL;
     db2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     db4:	281f      	cmp	r0, #31
     db6:	d800      	bhi.n	dba <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     db8:	4a02      	ldr	r2, [pc, #8]	; (dc4 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     dba:	2301      	movs	r3, #1
     dbc:	4083      	lsls	r3, r0
     dbe:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     dc0:	2300      	movs	r3, #0
     dc2:	e7f4      	b.n	dae <extint_chan_enable_callback+0x6>
     dc4:	40001800 	.word	0x40001800

00000dc8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     dc8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     dca:	2200      	movs	r2, #0
     dcc:	4b10      	ldr	r3, [pc, #64]	; (e10 <EIC_Handler+0x48>)
     dce:	701a      	strb	r2, [r3, #0]
     dd0:	2300      	movs	r3, #0
     dd2:	4910      	ldr	r1, [pc, #64]	; (e14 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     dd4:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     dd6:	4e10      	ldr	r6, [pc, #64]	; (e18 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     dd8:	4c0d      	ldr	r4, [pc, #52]	; (e10 <EIC_Handler+0x48>)
     dda:	e00a      	b.n	df2 <EIC_Handler+0x2a>
		return eics[eic_index];
     ddc:	490d      	ldr	r1, [pc, #52]	; (e14 <EIC_Handler+0x4c>)
     dde:	e008      	b.n	df2 <EIC_Handler+0x2a>
     de0:	7823      	ldrb	r3, [r4, #0]
     de2:	3301      	adds	r3, #1
     de4:	b2db      	uxtb	r3, r3
     de6:	7023      	strb	r3, [r4, #0]
     de8:	2b0f      	cmp	r3, #15
     dea:	d810      	bhi.n	e0e <EIC_Handler+0x46>
		return NULL;
     dec:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     dee:	2b1f      	cmp	r3, #31
     df0:	d9f4      	bls.n	ddc <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     df2:	0028      	movs	r0, r5
     df4:	4018      	ands	r0, r3
     df6:	2201      	movs	r2, #1
     df8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     dfa:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     dfc:	4210      	tst	r0, r2
     dfe:	d0ef      	beq.n	de0 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     e00:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     e02:	009b      	lsls	r3, r3, #2
     e04:	599b      	ldr	r3, [r3, r6]
     e06:	2b00      	cmp	r3, #0
     e08:	d0ea      	beq.n	de0 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     e0a:	4798      	blx	r3
     e0c:	e7e8      	b.n	de0 <EIC_Handler+0x18>
			}
		}
	}
}
     e0e:	bd70      	pop	{r4, r5, r6, pc}
     e10:	20000244 	.word	0x20000244
     e14:	40001800 	.word	0x40001800
     e18:	20000204 	.word	0x20000204

00000e1c <config_led>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
 void config_led(void)
 {
     e1c:	b500      	push	{lr}
     e1e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     e20:	a901      	add	r1, sp, #4
     e22:	2301      	movs	r3, #1
     e24:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
     e26:	2200      	movs	r2, #0
     e28:	708a      	strb	r2, [r1, #2]
	 struct port_config pin_conf;
	 port_get_config_defaults(&pin_conf);

	 pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     e2a:	700b      	strb	r3, [r1, #0]
	 port_pin_set_config(LED_0_PIN, &pin_conf);
     e2c:	200e      	movs	r0, #14
     e2e:	4b04      	ldr	r3, [pc, #16]	; (e40 <config_led+0x24>)
     e30:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     e32:	2280      	movs	r2, #128	; 0x80
     e34:	01d2      	lsls	r2, r2, #7
     e36:	4b03      	ldr	r3, [pc, #12]	; (e44 <config_led+0x28>)
     e38:	619a      	str	r2, [r3, #24]
	 port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
 }
     e3a:	b003      	add	sp, #12
     e3c:	bd00      	pop	{pc}
     e3e:	46c0      	nop			; (mov r8, r8)
     e40:	00000d59 	.word	0x00000d59
     e44:	41004400 	.word	0x41004400

00000e48 <config_btn>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
 void config_btn(void)
 {
     e48:	b500      	push	{lr}
     e4a:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
     e4c:	a901      	add	r1, sp, #4
     e4e:	2300      	movs	r3, #0
     e50:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     e52:	2201      	movs	r2, #1
     e54:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     e56:	708b      	strb	r3, [r1, #2]
	 port_get_config_defaults(&pin_conf);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     e58:	200f      	movs	r0, #15
     e5a:	4b02      	ldr	r3, [pc, #8]	; (e64 <config_btn+0x1c>)
     e5c:	4798      	blx	r3
 }
     e5e:	b003      	add	sp, #12
     e60:	bd00      	pop	{pc}
     e62:	46c0      	nop			; (mov r8, r8)
     e64:	00000d59 	.word	0x00000d59

00000e68 <system_board_init>:

void system_board_init(void)
{
     e68:	b510      	push	{r4, lr}
 	/*Configure system tick to generate periodic interrupts */
 	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
     e6a:	2000      	movs	r0, #0
     e6c:	4b0d      	ldr	r3, [pc, #52]	; (ea4 <system_board_init+0x3c>)
     e6e:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
     e70:	3801      	subs	r0, #1
     e72:	4b0d      	ldr	r3, [pc, #52]	; (ea8 <system_board_init+0x40>)
     e74:	4298      	cmp	r0, r3
     e76:	d80d      	bhi.n	e94 <system_board_init+0x2c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
     e78:	4a0c      	ldr	r2, [pc, #48]	; (eac <system_board_init+0x44>)
     e7a:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     e7c:	480c      	ldr	r0, [pc, #48]	; (eb0 <system_board_init+0x48>)
     e7e:	6a03      	ldr	r3, [r0, #32]
     e80:	021b      	lsls	r3, r3, #8
     e82:	0a1b      	lsrs	r3, r3, #8
     e84:	21c0      	movs	r1, #192	; 0xc0
     e86:	0609      	lsls	r1, r1, #24
     e88:	430b      	orrs	r3, r1
     e8a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
     e8c:	2300      	movs	r3, #0
     e8e:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     e90:	3307      	adds	r3, #7
     e92:	6013      	str	r3, [r2, #0]
 	delay_init();
     e94:	4b07      	ldr	r3, [pc, #28]	; (eb4 <system_board_init+0x4c>)
     e96:	4798      	blx	r3

	config_led();
     e98:	4b07      	ldr	r3, [pc, #28]	; (eb8 <system_board_init+0x50>)
     e9a:	4798      	blx	r3
	config_btn();
     e9c:	4b07      	ldr	r3, [pc, #28]	; (ebc <system_board_init+0x54>)
     e9e:	4798      	blx	r3

}
     ea0:	bd10      	pop	{r4, pc}
     ea2:	46c0      	nop			; (mov r8, r8)
     ea4:	00001231 	.word	0x00001231
     ea8:	00ffffff 	.word	0x00ffffff
     eac:	e000e010 	.word	0xe000e010
     eb0:	e000ed00 	.word	0xe000ed00
     eb4:	00000bdd 	.word	0x00000bdd
     eb8:	00000e1d 	.word	0x00000e1d
     ebc:	00000e49 	.word	0x00000e49

00000ec0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     ec0:	4b0c      	ldr	r3, [pc, #48]	; (ef4 <cpu_irq_enter_critical+0x34>)
     ec2:	681b      	ldr	r3, [r3, #0]
     ec4:	2b00      	cmp	r3, #0
     ec6:	d106      	bne.n	ed6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     ec8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     ecc:	2b00      	cmp	r3, #0
     ece:	d007      	beq.n	ee0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     ed0:	2200      	movs	r2, #0
     ed2:	4b09      	ldr	r3, [pc, #36]	; (ef8 <cpu_irq_enter_critical+0x38>)
     ed4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     ed6:	4a07      	ldr	r2, [pc, #28]	; (ef4 <cpu_irq_enter_critical+0x34>)
     ed8:	6813      	ldr	r3, [r2, #0]
     eda:	3301      	adds	r3, #1
     edc:	6013      	str	r3, [r2, #0]
}
     ede:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     ee0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     ee2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     ee6:	2200      	movs	r2, #0
     ee8:	4b04      	ldr	r3, [pc, #16]	; (efc <cpu_irq_enter_critical+0x3c>)
     eea:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     eec:	3201      	adds	r2, #1
     eee:	4b02      	ldr	r3, [pc, #8]	; (ef8 <cpu_irq_enter_critical+0x38>)
     ef0:	701a      	strb	r2, [r3, #0]
     ef2:	e7f0      	b.n	ed6 <cpu_irq_enter_critical+0x16>
     ef4:	20000048 	.word	0x20000048
     ef8:	2000004c 	.word	0x2000004c
     efc:	20000008 	.word	0x20000008

00000f00 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     f00:	4b08      	ldr	r3, [pc, #32]	; (f24 <cpu_irq_leave_critical+0x24>)
     f02:	681a      	ldr	r2, [r3, #0]
     f04:	3a01      	subs	r2, #1
     f06:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     f08:	681b      	ldr	r3, [r3, #0]
     f0a:	2b00      	cmp	r3, #0
     f0c:	d109      	bne.n	f22 <cpu_irq_leave_critical+0x22>
     f0e:	4b06      	ldr	r3, [pc, #24]	; (f28 <cpu_irq_leave_critical+0x28>)
     f10:	781b      	ldrb	r3, [r3, #0]
     f12:	2b00      	cmp	r3, #0
     f14:	d005      	beq.n	f22 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     f16:	2201      	movs	r2, #1
     f18:	4b04      	ldr	r3, [pc, #16]	; (f2c <cpu_irq_leave_critical+0x2c>)
     f1a:	701a      	strb	r2, [r3, #0]
     f1c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     f20:	b662      	cpsie	i
	}
}
     f22:	4770      	bx	lr
     f24:	20000048 	.word	0x20000048
     f28:	2000004c 	.word	0x2000004c
     f2c:	20000008 	.word	0x20000008

00000f30 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     f30:	b510      	push	{r4, lr}
	switch (clock_source) {
     f32:	2807      	cmp	r0, #7
     f34:	d803      	bhi.n	f3e <system_clock_source_get_hz+0xe>
     f36:	0080      	lsls	r0, r0, #2
     f38:	4b16      	ldr	r3, [pc, #88]	; (f94 <system_clock_source_get_hz+0x64>)
     f3a:	581b      	ldr	r3, [r3, r0]
     f3c:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
     f3e:	2000      	movs	r0, #0
     f40:	e027      	b.n	f92 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
     f42:	4b15      	ldr	r3, [pc, #84]	; (f98 <system_clock_source_get_hz+0x68>)
     f44:	68d8      	ldr	r0, [r3, #12]
     f46:	e024      	b.n	f92 <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     f48:	4b14      	ldr	r3, [pc, #80]	; (f9c <system_clock_source_get_hz+0x6c>)
     f4a:	6a1b      	ldr	r3, [r3, #32]
     f4c:	059b      	lsls	r3, r3, #22
     f4e:	0f9b      	lsrs	r3, r3, #30
     f50:	4813      	ldr	r0, [pc, #76]	; (fa0 <system_clock_source_get_hz+0x70>)
     f52:	40d8      	lsrs	r0, r3
     f54:	e01d      	b.n	f92 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
     f56:	4b10      	ldr	r3, [pc, #64]	; (f98 <system_clock_source_get_hz+0x68>)
     f58:	6918      	ldr	r0, [r3, #16]
     f5a:	e01a      	b.n	f92 <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f5c:	4b0e      	ldr	r3, [pc, #56]	; (f98 <system_clock_source_get_hz+0x68>)
     f5e:	681b      	ldr	r3, [r3, #0]
			return 0;
     f60:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f62:	079b      	lsls	r3, r3, #30
     f64:	d515      	bpl.n	f92 <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f66:	490d      	ldr	r1, [pc, #52]	; (f9c <system_clock_source_get_hz+0x6c>)
     f68:	2210      	movs	r2, #16
     f6a:	68cb      	ldr	r3, [r1, #12]
     f6c:	421a      	tst	r2, r3
     f6e:	d0fc      	beq.n	f6a <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     f70:	4b09      	ldr	r3, [pc, #36]	; (f98 <system_clock_source_get_hz+0x68>)
     f72:	681b      	ldr	r3, [r3, #0]
     f74:	075b      	lsls	r3, r3, #29
     f76:	d401      	bmi.n	f7c <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     f78:	480a      	ldr	r0, [pc, #40]	; (fa4 <system_clock_source_get_hz+0x74>)
     f7a:	e00a      	b.n	f92 <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f7c:	2000      	movs	r0, #0
     f7e:	4b0a      	ldr	r3, [pc, #40]	; (fa8 <system_clock_source_get_hz+0x78>)
     f80:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     f82:	4b05      	ldr	r3, [pc, #20]	; (f98 <system_clock_source_get_hz+0x68>)
     f84:	689b      	ldr	r3, [r3, #8]
     f86:	041b      	lsls	r3, r3, #16
     f88:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f8a:	4358      	muls	r0, r3
     f8c:	e001      	b.n	f92 <system_clock_source_get_hz+0x62>
		return 32768UL;
     f8e:	2080      	movs	r0, #128	; 0x80
     f90:	0200      	lsls	r0, r0, #8
	}
}
     f92:	bd10      	pop	{r4, pc}
     f94:	000017b8 	.word	0x000017b8
     f98:	20000050 	.word	0x20000050
     f9c:	40000800 	.word	0x40000800
     fa0:	007a1200 	.word	0x007a1200
     fa4:	02dc6c00 	.word	0x02dc6c00
     fa8:	00001365 	.word	0x00001365

00000fac <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     fac:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     fae:	490c      	ldr	r1, [pc, #48]	; (fe0 <system_clock_source_osc8m_set_config+0x34>)
     fb0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     fb2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     fb4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     fb6:	7840      	ldrb	r0, [r0, #1]
     fb8:	2201      	movs	r2, #1
     fba:	4010      	ands	r0, r2
     fbc:	0180      	lsls	r0, r0, #6
     fbe:	2640      	movs	r6, #64	; 0x40
     fc0:	43b3      	bics	r3, r6
     fc2:	4303      	orrs	r3, r0
     fc4:	402a      	ands	r2, r5
     fc6:	01d2      	lsls	r2, r2, #7
     fc8:	2080      	movs	r0, #128	; 0x80
     fca:	4383      	bics	r3, r0
     fcc:	4313      	orrs	r3, r2
     fce:	2203      	movs	r2, #3
     fd0:	4022      	ands	r2, r4
     fd2:	0212      	lsls	r2, r2, #8
     fd4:	4803      	ldr	r0, [pc, #12]	; (fe4 <system_clock_source_osc8m_set_config+0x38>)
     fd6:	4003      	ands	r3, r0
     fd8:	4313      	orrs	r3, r2
     fda:	620b      	str	r3, [r1, #32]
}
     fdc:	bd70      	pop	{r4, r5, r6, pc}
     fde:	46c0      	nop			; (mov r8, r8)
     fe0:	40000800 	.word	0x40000800
     fe4:	fffffcff 	.word	0xfffffcff

00000fe8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     fe8:	2807      	cmp	r0, #7
     fea:	d803      	bhi.n	ff4 <system_clock_source_enable+0xc>
     fec:	0080      	lsls	r0, r0, #2
     fee:	4b1e      	ldr	r3, [pc, #120]	; (1068 <system_clock_source_enable+0x80>)
     ff0:	581b      	ldr	r3, [r3, r0]
     ff2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     ff4:	2017      	movs	r0, #23
     ff6:	e036      	b.n	1066 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     ff8:	4a1c      	ldr	r2, [pc, #112]	; (106c <system_clock_source_enable+0x84>)
     ffa:	6a13      	ldr	r3, [r2, #32]
     ffc:	2102      	movs	r1, #2
     ffe:	430b      	orrs	r3, r1
    1000:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1002:	2000      	movs	r0, #0
    1004:	e02f      	b.n	1066 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1006:	4a19      	ldr	r2, [pc, #100]	; (106c <system_clock_source_enable+0x84>)
    1008:	6993      	ldr	r3, [r2, #24]
    100a:	2102      	movs	r1, #2
    100c:	430b      	orrs	r3, r1
    100e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1010:	2000      	movs	r0, #0
		break;
    1012:	e028      	b.n	1066 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1014:	4a15      	ldr	r2, [pc, #84]	; (106c <system_clock_source_enable+0x84>)
    1016:	8a13      	ldrh	r3, [r2, #16]
    1018:	2102      	movs	r1, #2
    101a:	430b      	orrs	r3, r1
    101c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    101e:	2000      	movs	r0, #0
		break;
    1020:	e021      	b.n	1066 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1022:	4a12      	ldr	r2, [pc, #72]	; (106c <system_clock_source_enable+0x84>)
    1024:	8a93      	ldrh	r3, [r2, #20]
    1026:	2102      	movs	r1, #2
    1028:	430b      	orrs	r3, r1
    102a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    102c:	2000      	movs	r0, #0
		break;
    102e:	e01a      	b.n	1066 <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1030:	4b0f      	ldr	r3, [pc, #60]	; (1070 <system_clock_source_enable+0x88>)
    1032:	681a      	ldr	r2, [r3, #0]
    1034:	2102      	movs	r1, #2
    1036:	430a      	orrs	r2, r1
    1038:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    103a:	681b      	ldr	r3, [r3, #0]
    103c:	4a0d      	ldr	r2, [pc, #52]	; (1074 <system_clock_source_enable+0x8c>)
    103e:	4013      	ands	r3, r2
    1040:	4a0a      	ldr	r2, [pc, #40]	; (106c <system_clock_source_enable+0x84>)
    1042:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1044:	0011      	movs	r1, r2
    1046:	2210      	movs	r2, #16
    1048:	68cb      	ldr	r3, [r1, #12]
    104a:	421a      	tst	r2, r3
    104c:	d0fc      	beq.n	1048 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    104e:	4a08      	ldr	r2, [pc, #32]	; (1070 <system_clock_source_enable+0x88>)
    1050:	6891      	ldr	r1, [r2, #8]
    1052:	4b06      	ldr	r3, [pc, #24]	; (106c <system_clock_source_enable+0x84>)
    1054:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1056:	6851      	ldr	r1, [r2, #4]
    1058:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    105a:	6812      	ldr	r2, [r2, #0]
    105c:	b292      	uxth	r2, r2
    105e:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
    1060:	2000      	movs	r0, #0
    1062:	e000      	b.n	1066 <system_clock_source_enable+0x7e>
		return STATUS_OK;
    1064:	2000      	movs	r0, #0
}
    1066:	4770      	bx	lr
    1068:	000017d8 	.word	0x000017d8
    106c:	40000800 	.word	0x40000800
    1070:	20000050 	.word	0x20000050
    1074:	0000ff7f 	.word	0x0000ff7f

00001078 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1078:	b530      	push	{r4, r5, lr}
    107a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    107c:	22c2      	movs	r2, #194	; 0xc2
    107e:	00d2      	lsls	r2, r2, #3
    1080:	4b1a      	ldr	r3, [pc, #104]	; (10ec <system_clock_init+0x74>)
    1082:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1084:	4a1a      	ldr	r2, [pc, #104]	; (10f0 <system_clock_init+0x78>)
    1086:	6853      	ldr	r3, [r2, #4]
    1088:	211e      	movs	r1, #30
    108a:	438b      	bics	r3, r1
    108c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    108e:	2301      	movs	r3, #1
    1090:	466a      	mov	r2, sp
    1092:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1094:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1096:	4d17      	ldr	r5, [pc, #92]	; (10f4 <system_clock_init+0x7c>)
    1098:	b2e0      	uxtb	r0, r4
    109a:	4669      	mov	r1, sp
    109c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    109e:	3401      	adds	r4, #1
    10a0:	2c1c      	cmp	r4, #28
    10a2:	d1f9      	bne.n	1098 <system_clock_init+0x20>
	config->run_in_standby  = false;
    10a4:	a803      	add	r0, sp, #12
    10a6:	2400      	movs	r4, #0
    10a8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    10aa:	2501      	movs	r5, #1
    10ac:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    10ae:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    10b0:	4b11      	ldr	r3, [pc, #68]	; (10f8 <system_clock_init+0x80>)
    10b2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    10b4:	2006      	movs	r0, #6
    10b6:	4b11      	ldr	r3, [pc, #68]	; (10fc <system_clock_init+0x84>)
    10b8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    10ba:	4b11      	ldr	r3, [pc, #68]	; (1100 <system_clock_init+0x88>)
    10bc:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    10be:	4b11      	ldr	r3, [pc, #68]	; (1104 <system_clock_init+0x8c>)
    10c0:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    10c2:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    10c4:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    10c6:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    10c8:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    10ca:	466b      	mov	r3, sp
    10cc:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    10ce:	2306      	movs	r3, #6
    10d0:	466a      	mov	r2, sp
    10d2:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    10d4:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    10d6:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    10d8:	4669      	mov	r1, sp
    10da:	2000      	movs	r0, #0
    10dc:	4b0a      	ldr	r3, [pc, #40]	; (1108 <system_clock_init+0x90>)
    10de:	4798      	blx	r3
    10e0:	2000      	movs	r0, #0
    10e2:	4b0a      	ldr	r3, [pc, #40]	; (110c <system_clock_init+0x94>)
    10e4:	4798      	blx	r3
#endif
}
    10e6:	b005      	add	sp, #20
    10e8:	bd30      	pop	{r4, r5, pc}
    10ea:	46c0      	nop			; (mov r8, r8)
    10ec:	40000800 	.word	0x40000800
    10f0:	41004000 	.word	0x41004000
    10f4:	00001349 	.word	0x00001349
    10f8:	00000fad 	.word	0x00000fad
    10fc:	00000fe9 	.word	0x00000fe9
    1100:	00001111 	.word	0x00001111
    1104:	40000400 	.word	0x40000400
    1108:	00001135 	.word	0x00001135
    110c:	000011ed 	.word	0x000011ed

00001110 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1110:	4a06      	ldr	r2, [pc, #24]	; (112c <system_gclk_init+0x1c>)
    1112:	6993      	ldr	r3, [r2, #24]
    1114:	2108      	movs	r1, #8
    1116:	430b      	orrs	r3, r1
    1118:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    111a:	2201      	movs	r2, #1
    111c:	4b04      	ldr	r3, [pc, #16]	; (1130 <system_gclk_init+0x20>)
    111e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1120:	0019      	movs	r1, r3
    1122:	780b      	ldrb	r3, [r1, #0]
    1124:	4213      	tst	r3, r2
    1126:	d1fc      	bne.n	1122 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1128:	4770      	bx	lr
    112a:	46c0      	nop			; (mov r8, r8)
    112c:	40000400 	.word	0x40000400
    1130:	40000c00 	.word	0x40000c00

00001134 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1134:	b570      	push	{r4, r5, r6, lr}
    1136:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1138:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    113a:	780d      	ldrb	r5, [r1, #0]
    113c:	022d      	lsls	r5, r5, #8
    113e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1140:	784b      	ldrb	r3, [r1, #1]
    1142:	2b00      	cmp	r3, #0
    1144:	d002      	beq.n	114c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1146:	2380      	movs	r3, #128	; 0x80
    1148:	02db      	lsls	r3, r3, #11
    114a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    114c:	7a4b      	ldrb	r3, [r1, #9]
    114e:	2b00      	cmp	r3, #0
    1150:	d002      	beq.n	1158 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1152:	2380      	movs	r3, #128	; 0x80
    1154:	031b      	lsls	r3, r3, #12
    1156:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1158:	6848      	ldr	r0, [r1, #4]
    115a:	2801      	cmp	r0, #1
    115c:	d910      	bls.n	1180 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    115e:	1e43      	subs	r3, r0, #1
    1160:	4218      	tst	r0, r3
    1162:	d134      	bne.n	11ce <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1164:	2802      	cmp	r0, #2
    1166:	d930      	bls.n	11ca <system_gclk_gen_set_config+0x96>
    1168:	2302      	movs	r3, #2
    116a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    116c:	3201      	adds	r2, #1
						mask <<= 1) {
    116e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1170:	4298      	cmp	r0, r3
    1172:	d8fb      	bhi.n	116c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1174:	0212      	lsls	r2, r2, #8
    1176:	4332      	orrs	r2, r6
    1178:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    117a:	2380      	movs	r3, #128	; 0x80
    117c:	035b      	lsls	r3, r3, #13
    117e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1180:	7a0b      	ldrb	r3, [r1, #8]
    1182:	2b00      	cmp	r3, #0
    1184:	d002      	beq.n	118c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1186:	2380      	movs	r3, #128	; 0x80
    1188:	039b      	lsls	r3, r3, #14
    118a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    118c:	4a13      	ldr	r2, [pc, #76]	; (11dc <system_gclk_gen_set_config+0xa8>)
    118e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1190:	b25b      	sxtb	r3, r3
    1192:	2b00      	cmp	r3, #0
    1194:	dbfb      	blt.n	118e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1196:	4b12      	ldr	r3, [pc, #72]	; (11e0 <system_gclk_gen_set_config+0xac>)
    1198:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    119a:	4b12      	ldr	r3, [pc, #72]	; (11e4 <system_gclk_gen_set_config+0xb0>)
    119c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    119e:	4a0f      	ldr	r2, [pc, #60]	; (11dc <system_gclk_gen_set_config+0xa8>)
    11a0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    11a2:	b25b      	sxtb	r3, r3
    11a4:	2b00      	cmp	r3, #0
    11a6:	dbfb      	blt.n	11a0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    11a8:	4b0c      	ldr	r3, [pc, #48]	; (11dc <system_gclk_gen_set_config+0xa8>)
    11aa:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11ac:	001a      	movs	r2, r3
    11ae:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    11b0:	b25b      	sxtb	r3, r3
    11b2:	2b00      	cmp	r3, #0
    11b4:	dbfb      	blt.n	11ae <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    11b6:	4a09      	ldr	r2, [pc, #36]	; (11dc <system_gclk_gen_set_config+0xa8>)
    11b8:	6853      	ldr	r3, [r2, #4]
    11ba:	2180      	movs	r1, #128	; 0x80
    11bc:	0249      	lsls	r1, r1, #9
    11be:	400b      	ands	r3, r1
    11c0:	431d      	orrs	r5, r3
    11c2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    11c4:	4b08      	ldr	r3, [pc, #32]	; (11e8 <system_gclk_gen_set_config+0xb4>)
    11c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    11c8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    11ca:	2200      	movs	r2, #0
    11cc:	e7d2      	b.n	1174 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    11ce:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    11d0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    11d2:	2380      	movs	r3, #128	; 0x80
    11d4:	029b      	lsls	r3, r3, #10
    11d6:	431d      	orrs	r5, r3
    11d8:	e7d2      	b.n	1180 <system_gclk_gen_set_config+0x4c>
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	40000c00 	.word	0x40000c00
    11e0:	00000ec1 	.word	0x00000ec1
    11e4:	40000c08 	.word	0x40000c08
    11e8:	00000f01 	.word	0x00000f01

000011ec <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    11ec:	b510      	push	{r4, lr}
    11ee:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11f0:	4a0b      	ldr	r2, [pc, #44]	; (1220 <system_gclk_gen_enable+0x34>)
    11f2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    11f4:	b25b      	sxtb	r3, r3
    11f6:	2b00      	cmp	r3, #0
    11f8:	dbfb      	blt.n	11f2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    11fa:	4b0a      	ldr	r3, [pc, #40]	; (1224 <system_gclk_gen_enable+0x38>)
    11fc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    11fe:	4b0a      	ldr	r3, [pc, #40]	; (1228 <system_gclk_gen_enable+0x3c>)
    1200:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1202:	4a07      	ldr	r2, [pc, #28]	; (1220 <system_gclk_gen_enable+0x34>)
    1204:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1206:	b25b      	sxtb	r3, r3
    1208:	2b00      	cmp	r3, #0
    120a:	dbfb      	blt.n	1204 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    120c:	4a04      	ldr	r2, [pc, #16]	; (1220 <system_gclk_gen_enable+0x34>)
    120e:	6851      	ldr	r1, [r2, #4]
    1210:	2380      	movs	r3, #128	; 0x80
    1212:	025b      	lsls	r3, r3, #9
    1214:	430b      	orrs	r3, r1
    1216:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1218:	4b04      	ldr	r3, [pc, #16]	; (122c <system_gclk_gen_enable+0x40>)
    121a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    121c:	bd10      	pop	{r4, pc}
    121e:	46c0      	nop			; (mov r8, r8)
    1220:	40000c00 	.word	0x40000c00
    1224:	00000ec1 	.word	0x00000ec1
    1228:	40000c04 	.word	0x40000c04
    122c:	00000f01 	.word	0x00000f01

00001230 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1230:	b570      	push	{r4, r5, r6, lr}
    1232:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1234:	4a1a      	ldr	r2, [pc, #104]	; (12a0 <system_gclk_gen_get_hz+0x70>)
    1236:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1238:	b25b      	sxtb	r3, r3
    123a:	2b00      	cmp	r3, #0
    123c:	dbfb      	blt.n	1236 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    123e:	4b19      	ldr	r3, [pc, #100]	; (12a4 <system_gclk_gen_get_hz+0x74>)
    1240:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1242:	4b19      	ldr	r3, [pc, #100]	; (12a8 <system_gclk_gen_get_hz+0x78>)
    1244:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1246:	4a16      	ldr	r2, [pc, #88]	; (12a0 <system_gclk_gen_get_hz+0x70>)
    1248:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    124a:	b25b      	sxtb	r3, r3
    124c:	2b00      	cmp	r3, #0
    124e:	dbfb      	blt.n	1248 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1250:	4e13      	ldr	r6, [pc, #76]	; (12a0 <system_gclk_gen_get_hz+0x70>)
    1252:	6870      	ldr	r0, [r6, #4]
    1254:	04c0      	lsls	r0, r0, #19
    1256:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1258:	4b14      	ldr	r3, [pc, #80]	; (12ac <system_gclk_gen_get_hz+0x7c>)
    125a:	4798      	blx	r3
    125c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    125e:	4b12      	ldr	r3, [pc, #72]	; (12a8 <system_gclk_gen_get_hz+0x78>)
    1260:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1262:	6876      	ldr	r6, [r6, #4]
    1264:	02f6      	lsls	r6, r6, #11
    1266:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1268:	4b11      	ldr	r3, [pc, #68]	; (12b0 <system_gclk_gen_get_hz+0x80>)
    126a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    126c:	4a0c      	ldr	r2, [pc, #48]	; (12a0 <system_gclk_gen_get_hz+0x70>)
    126e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1270:	b25b      	sxtb	r3, r3
    1272:	2b00      	cmp	r3, #0
    1274:	dbfb      	blt.n	126e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1276:	4b0a      	ldr	r3, [pc, #40]	; (12a0 <system_gclk_gen_get_hz+0x70>)
    1278:	689c      	ldr	r4, [r3, #8]
    127a:	0224      	lsls	r4, r4, #8
    127c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    127e:	4b0d      	ldr	r3, [pc, #52]	; (12b4 <system_gclk_gen_get_hz+0x84>)
    1280:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1282:	2e00      	cmp	r6, #0
    1284:	d107      	bne.n	1296 <system_gclk_gen_get_hz+0x66>
    1286:	2c01      	cmp	r4, #1
    1288:	d907      	bls.n	129a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    128a:	0021      	movs	r1, r4
    128c:	0028      	movs	r0, r5
    128e:	4b0a      	ldr	r3, [pc, #40]	; (12b8 <system_gclk_gen_get_hz+0x88>)
    1290:	4798      	blx	r3
    1292:	0005      	movs	r5, r0
    1294:	e001      	b.n	129a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1296:	3401      	adds	r4, #1
    1298:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    129a:	0028      	movs	r0, r5
    129c:	bd70      	pop	{r4, r5, r6, pc}
    129e:	46c0      	nop			; (mov r8, r8)
    12a0:	40000c00 	.word	0x40000c00
    12a4:	00000ec1 	.word	0x00000ec1
    12a8:	40000c04 	.word	0x40000c04
    12ac:	00000f31 	.word	0x00000f31
    12b0:	40000c08 	.word	0x40000c08
    12b4:	00000f01 	.word	0x00000f01
    12b8:	00001641 	.word	0x00001641

000012bc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    12bc:	b510      	push	{r4, lr}
    12be:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    12c0:	4b06      	ldr	r3, [pc, #24]	; (12dc <system_gclk_chan_enable+0x20>)
    12c2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    12c4:	4b06      	ldr	r3, [pc, #24]	; (12e0 <system_gclk_chan_enable+0x24>)
    12c6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    12c8:	4a06      	ldr	r2, [pc, #24]	; (12e4 <system_gclk_chan_enable+0x28>)
    12ca:	8853      	ldrh	r3, [r2, #2]
    12cc:	2180      	movs	r1, #128	; 0x80
    12ce:	01c9      	lsls	r1, r1, #7
    12d0:	430b      	orrs	r3, r1
    12d2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    12d4:	4b04      	ldr	r3, [pc, #16]	; (12e8 <system_gclk_chan_enable+0x2c>)
    12d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    12d8:	bd10      	pop	{r4, pc}
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	00000ec1 	.word	0x00000ec1
    12e0:	40000c02 	.word	0x40000c02
    12e4:	40000c00 	.word	0x40000c00
    12e8:	00000f01 	.word	0x00000f01

000012ec <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    12ec:	b510      	push	{r4, lr}
    12ee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    12f0:	4b0f      	ldr	r3, [pc, #60]	; (1330 <system_gclk_chan_disable+0x44>)
    12f2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    12f4:	4b0f      	ldr	r3, [pc, #60]	; (1334 <system_gclk_chan_disable+0x48>)
    12f6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    12f8:	4a0f      	ldr	r2, [pc, #60]	; (1338 <system_gclk_chan_disable+0x4c>)
    12fa:	8853      	ldrh	r3, [r2, #2]
    12fc:	051b      	lsls	r3, r3, #20
    12fe:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1300:	8853      	ldrh	r3, [r2, #2]
    1302:	490e      	ldr	r1, [pc, #56]	; (133c <system_gclk_chan_disable+0x50>)
    1304:	400b      	ands	r3, r1
    1306:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1308:	8853      	ldrh	r3, [r2, #2]
    130a:	490d      	ldr	r1, [pc, #52]	; (1340 <system_gclk_chan_disable+0x54>)
    130c:	400b      	ands	r3, r1
    130e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1310:	0011      	movs	r1, r2
    1312:	2280      	movs	r2, #128	; 0x80
    1314:	01d2      	lsls	r2, r2, #7
    1316:	884b      	ldrh	r3, [r1, #2]
    1318:	4213      	tst	r3, r2
    131a:	d1fc      	bne.n	1316 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    131c:	4906      	ldr	r1, [pc, #24]	; (1338 <system_gclk_chan_disable+0x4c>)
    131e:	884a      	ldrh	r2, [r1, #2]
    1320:	0203      	lsls	r3, r0, #8
    1322:	4806      	ldr	r0, [pc, #24]	; (133c <system_gclk_chan_disable+0x50>)
    1324:	4002      	ands	r2, r0
    1326:	4313      	orrs	r3, r2
    1328:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    132a:	4b06      	ldr	r3, [pc, #24]	; (1344 <system_gclk_chan_disable+0x58>)
    132c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    132e:	bd10      	pop	{r4, pc}
    1330:	00000ec1 	.word	0x00000ec1
    1334:	40000c02 	.word	0x40000c02
    1338:	40000c00 	.word	0x40000c00
    133c:	fffff0ff 	.word	0xfffff0ff
    1340:	ffffbfff 	.word	0xffffbfff
    1344:	00000f01 	.word	0x00000f01

00001348 <system_gclk_chan_set_config>:
{
    1348:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    134a:	780c      	ldrb	r4, [r1, #0]
    134c:	0224      	lsls	r4, r4, #8
    134e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1350:	4b02      	ldr	r3, [pc, #8]	; (135c <system_gclk_chan_set_config+0x14>)
    1352:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1354:	b2a4      	uxth	r4, r4
    1356:	4b02      	ldr	r3, [pc, #8]	; (1360 <system_gclk_chan_set_config+0x18>)
    1358:	805c      	strh	r4, [r3, #2]
}
    135a:	bd10      	pop	{r4, pc}
    135c:	000012ed 	.word	0x000012ed
    1360:	40000c00 	.word	0x40000c00

00001364 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1364:	b510      	push	{r4, lr}
    1366:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1368:	4b06      	ldr	r3, [pc, #24]	; (1384 <system_gclk_chan_get_hz+0x20>)
    136a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    136c:	4b06      	ldr	r3, [pc, #24]	; (1388 <system_gclk_chan_get_hz+0x24>)
    136e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1370:	4b06      	ldr	r3, [pc, #24]	; (138c <system_gclk_chan_get_hz+0x28>)
    1372:	885c      	ldrh	r4, [r3, #2]
    1374:	0524      	lsls	r4, r4, #20
    1376:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1378:	4b05      	ldr	r3, [pc, #20]	; (1390 <system_gclk_chan_get_hz+0x2c>)
    137a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    137c:	0020      	movs	r0, r4
    137e:	4b05      	ldr	r3, [pc, #20]	; (1394 <system_gclk_chan_get_hz+0x30>)
    1380:	4798      	blx	r3
}
    1382:	bd10      	pop	{r4, pc}
    1384:	00000ec1 	.word	0x00000ec1
    1388:	40000c02 	.word	0x40000c02
    138c:	40000c00 	.word	0x40000c00
    1390:	00000f01 	.word	0x00000f01
    1394:	00001231 	.word	0x00001231

00001398 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1398:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    139a:	78d3      	ldrb	r3, [r2, #3]
    139c:	2b00      	cmp	r3, #0
    139e:	d135      	bne.n	140c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    13a0:	7813      	ldrb	r3, [r2, #0]
    13a2:	2b80      	cmp	r3, #128	; 0x80
    13a4:	d029      	beq.n	13fa <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    13a6:	061b      	lsls	r3, r3, #24
    13a8:	2480      	movs	r4, #128	; 0x80
    13aa:	0264      	lsls	r4, r4, #9
    13ac:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    13ae:	7854      	ldrb	r4, [r2, #1]
    13b0:	2502      	movs	r5, #2
    13b2:	43ac      	bics	r4, r5
    13b4:	d106      	bne.n	13c4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    13b6:	7894      	ldrb	r4, [r2, #2]
    13b8:	2c00      	cmp	r4, #0
    13ba:	d120      	bne.n	13fe <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    13bc:	2480      	movs	r4, #128	; 0x80
    13be:	02a4      	lsls	r4, r4, #10
    13c0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    13c2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    13c4:	7854      	ldrb	r4, [r2, #1]
    13c6:	3c01      	subs	r4, #1
    13c8:	2c01      	cmp	r4, #1
    13ca:	d91c      	bls.n	1406 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    13cc:	040d      	lsls	r5, r1, #16
    13ce:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    13d0:	24a0      	movs	r4, #160	; 0xa0
    13d2:	05e4      	lsls	r4, r4, #23
    13d4:	432c      	orrs	r4, r5
    13d6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13d8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    13da:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    13dc:	24d0      	movs	r4, #208	; 0xd0
    13de:	0624      	lsls	r4, r4, #24
    13e0:	432c      	orrs	r4, r5
    13e2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13e4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    13e6:	78d4      	ldrb	r4, [r2, #3]
    13e8:	2c00      	cmp	r4, #0
    13ea:	d122      	bne.n	1432 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    13ec:	035b      	lsls	r3, r3, #13
    13ee:	d51c      	bpl.n	142a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    13f0:	7893      	ldrb	r3, [r2, #2]
    13f2:	2b01      	cmp	r3, #1
    13f4:	d01e      	beq.n	1434 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    13f6:	6141      	str	r1, [r0, #20]
    13f8:	e017      	b.n	142a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    13fa:	2300      	movs	r3, #0
    13fc:	e7d7      	b.n	13ae <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    13fe:	24c0      	movs	r4, #192	; 0xc0
    1400:	02e4      	lsls	r4, r4, #11
    1402:	4323      	orrs	r3, r4
    1404:	e7dd      	b.n	13c2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1406:	4c0d      	ldr	r4, [pc, #52]	; (143c <_system_pinmux_config+0xa4>)
    1408:	4023      	ands	r3, r4
    140a:	e7df      	b.n	13cc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    140c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    140e:	040c      	lsls	r4, r1, #16
    1410:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1412:	23a0      	movs	r3, #160	; 0xa0
    1414:	05db      	lsls	r3, r3, #23
    1416:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1418:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    141a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    141c:	23d0      	movs	r3, #208	; 0xd0
    141e:	061b      	lsls	r3, r3, #24
    1420:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1422:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1424:	78d3      	ldrb	r3, [r2, #3]
    1426:	2b00      	cmp	r3, #0
    1428:	d103      	bne.n	1432 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    142a:	7853      	ldrb	r3, [r2, #1]
    142c:	3b01      	subs	r3, #1
    142e:	2b01      	cmp	r3, #1
    1430:	d902      	bls.n	1438 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1432:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1434:	6181      	str	r1, [r0, #24]
    1436:	e7f8      	b.n	142a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1438:	6081      	str	r1, [r0, #8]
}
    143a:	e7fa      	b.n	1432 <_system_pinmux_config+0x9a>
    143c:	fffbffff 	.word	0xfffbffff

00001440 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1440:	b510      	push	{r4, lr}
    1442:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1444:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1446:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1448:	2900      	cmp	r1, #0
    144a:	d104      	bne.n	1456 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    144c:	0943      	lsrs	r3, r0, #5
    144e:	01db      	lsls	r3, r3, #7
    1450:	4905      	ldr	r1, [pc, #20]	; (1468 <system_pinmux_pin_set_config+0x28>)
    1452:	468c      	mov	ip, r1
    1454:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1456:	241f      	movs	r4, #31
    1458:	4020      	ands	r0, r4
    145a:	2101      	movs	r1, #1
    145c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    145e:	0018      	movs	r0, r3
    1460:	4b02      	ldr	r3, [pc, #8]	; (146c <system_pinmux_pin_set_config+0x2c>)
    1462:	4798      	blx	r3
}
    1464:	bd10      	pop	{r4, pc}
    1466:	46c0      	nop			; (mov r8, r8)
    1468:	41004400 	.word	0x41004400
    146c:	00001399 	.word	0x00001399

00001470 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1470:	4770      	bx	lr
	...

00001474 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1474:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1476:	4b05      	ldr	r3, [pc, #20]	; (148c <system_init+0x18>)
    1478:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    147a:	4b05      	ldr	r3, [pc, #20]	; (1490 <system_init+0x1c>)
    147c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    147e:	4b05      	ldr	r3, [pc, #20]	; (1494 <system_init+0x20>)
    1480:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1482:	4b05      	ldr	r3, [pc, #20]	; (1498 <system_init+0x24>)
    1484:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1486:	4b05      	ldr	r3, [pc, #20]	; (149c <system_init+0x28>)
    1488:	4798      	blx	r3
}
    148a:	bd10      	pop	{r4, pc}
    148c:	00001079 	.word	0x00001079
    1490:	00000e69 	.word	0x00000e69
    1494:	00001471 	.word	0x00001471
    1498:	00000c61 	.word	0x00000c61
    149c:	00001471 	.word	0x00001471

000014a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    14a0:	e7fe      	b.n	14a0 <Dummy_Handler>
	...

000014a4 <Reset_Handler>:
{
    14a4:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    14a6:	4a1a      	ldr	r2, [pc, #104]	; (1510 <Reset_Handler+0x6c>)
    14a8:	4b1a      	ldr	r3, [pc, #104]	; (1514 <Reset_Handler+0x70>)
    14aa:	429a      	cmp	r2, r3
    14ac:	d011      	beq.n	14d2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    14ae:	001a      	movs	r2, r3
    14b0:	4b19      	ldr	r3, [pc, #100]	; (1518 <Reset_Handler+0x74>)
    14b2:	429a      	cmp	r2, r3
    14b4:	d20d      	bcs.n	14d2 <Reset_Handler+0x2e>
    14b6:	4a19      	ldr	r2, [pc, #100]	; (151c <Reset_Handler+0x78>)
    14b8:	3303      	adds	r3, #3
    14ba:	1a9b      	subs	r3, r3, r2
    14bc:	089b      	lsrs	r3, r3, #2
    14be:	3301      	adds	r3, #1
    14c0:	009b      	lsls	r3, r3, #2
    14c2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    14c4:	4813      	ldr	r0, [pc, #76]	; (1514 <Reset_Handler+0x70>)
    14c6:	4912      	ldr	r1, [pc, #72]	; (1510 <Reset_Handler+0x6c>)
    14c8:	588c      	ldr	r4, [r1, r2]
    14ca:	5084      	str	r4, [r0, r2]
    14cc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    14ce:	429a      	cmp	r2, r3
    14d0:	d1fa      	bne.n	14c8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    14d2:	4a13      	ldr	r2, [pc, #76]	; (1520 <Reset_Handler+0x7c>)
    14d4:	4b13      	ldr	r3, [pc, #76]	; (1524 <Reset_Handler+0x80>)
    14d6:	429a      	cmp	r2, r3
    14d8:	d20a      	bcs.n	14f0 <Reset_Handler+0x4c>
    14da:	43d3      	mvns	r3, r2
    14dc:	4911      	ldr	r1, [pc, #68]	; (1524 <Reset_Handler+0x80>)
    14de:	185b      	adds	r3, r3, r1
    14e0:	2103      	movs	r1, #3
    14e2:	438b      	bics	r3, r1
    14e4:	3304      	adds	r3, #4
    14e6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    14e8:	2100      	movs	r1, #0
    14ea:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    14ec:	4293      	cmp	r3, r2
    14ee:	d1fc      	bne.n	14ea <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    14f0:	4a0d      	ldr	r2, [pc, #52]	; (1528 <Reset_Handler+0x84>)
    14f2:	21ff      	movs	r1, #255	; 0xff
    14f4:	4b0d      	ldr	r3, [pc, #52]	; (152c <Reset_Handler+0x88>)
    14f6:	438b      	bics	r3, r1
    14f8:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    14fa:	4a0d      	ldr	r2, [pc, #52]	; (1530 <Reset_Handler+0x8c>)
    14fc:	6853      	ldr	r3, [r2, #4]
    14fe:	397f      	subs	r1, #127	; 0x7f
    1500:	430b      	orrs	r3, r1
    1502:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1504:	4b0b      	ldr	r3, [pc, #44]	; (1534 <Reset_Handler+0x90>)
    1506:	4798      	blx	r3
        main();
    1508:	4b0b      	ldr	r3, [pc, #44]	; (1538 <Reset_Handler+0x94>)
    150a:	4798      	blx	r3
    150c:	e7fe      	b.n	150c <Reset_Handler+0x68>
    150e:	46c0      	nop			; (mov r8, r8)
    1510:	00001818 	.word	0x00001818
    1514:	20000000 	.word	0x20000000
    1518:	2000000c 	.word	0x2000000c
    151c:	20000004 	.word	0x20000004
    1520:	2000000c 	.word	0x2000000c
    1524:	20000248 	.word	0x20000248
    1528:	e000ed00 	.word	0xe000ed00
    152c:	00000000 	.word	0x00000000
    1530:	41004000 	.word	0x41004000
    1534:	00001759 	.word	0x00001759
    1538:	0000162d 	.word	0x0000162d

0000153c <extint_detection_callback>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
void extint_detection_callback(void)
{
    153c:	b510      	push	{r4, lr}
	delay_ms(10);
    153e:	200a      	movs	r0, #10
    1540:	4b0c      	ldr	r3, [pc, #48]	; (1574 <extint_detection_callback+0x38>)
    1542:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    1544:	4b0c      	ldr	r3, [pc, #48]	; (1578 <extint_detection_callback+0x3c>)
    1546:	6a1b      	ldr	r3, [r3, #32]
	if (level) {
    1548:	041b      	lsls	r3, r3, #16
    154a:	d40e      	bmi.n	156a <extint_detection_callback+0x2e>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    154c:	2280      	movs	r2, #128	; 0x80
    154e:	01d2      	lsls	r2, r2, #7
    1550:	4b09      	ldr	r3, [pc, #36]	; (1578 <extint_detection_callback+0x3c>)
    1552:	615a      	str	r2, [r3, #20]
	bool button_pin_state = port_pin_get_input_level(BUTTON_0_PIN);
	port_pin_set_output_level(LED_0_PIN, button_pin_state);
	
	i2c_slWrite(I2C_SLAVE_ADDRESS, (uint8_t *)&wr_cmds, sizeof(wr_cmds));	//i2c_read_request_callback
    1554:	2205      	movs	r2, #5
    1556:	4909      	ldr	r1, [pc, #36]	; (157c <extint_detection_callback+0x40>)
    1558:	2018      	movs	r0, #24
    155a:	4b09      	ldr	r3, [pc, #36]	; (1580 <extint_detection_callback+0x44>)
    155c:	4798      	blx	r3
	//delay_ms(100);
	//i2c_Read(slaveADDR, slcfgReg, slrd_buffer, DATA_LENGTH);		//i2c_write_request_callback
	//i2c_Read(I2C_SLAVE_ADDRESS, slcfgReg, (uint8_t *)&rx_cmds, sizeof(rx_cmds));		//i2c_write_request_callback
	//i2c_slRead(slaveADDR, slrd_buffer, DATA_LENGTH);				//i2c_write_request_callback

	i2c_slRead(I2C_SLAVE_ADDRESS, (uint8_t *)&rx_cmds, sizeof(rx_cmds));				//i2c_write_request_callback
    155e:	220a      	movs	r2, #10
    1560:	4908      	ldr	r1, [pc, #32]	; (1584 <extint_detection_callback+0x48>)
    1562:	2018      	movs	r0, #24
    1564:	4b08      	ldr	r3, [pc, #32]	; (1588 <extint_detection_callback+0x4c>)
    1566:	4798      	blx	r3
			
 }
    1568:	bd10      	pop	{r4, pc}
		port_base->OUTSET.reg = pin_mask;
    156a:	2280      	movs	r2, #128	; 0x80
    156c:	01d2      	lsls	r2, r2, #7
    156e:	4b02      	ldr	r3, [pc, #8]	; (1578 <extint_detection_callback+0x3c>)
    1570:	619a      	str	r2, [r3, #24]
    1572:	e7ef      	b.n	1554 <extint_detection_callback+0x18>
    1574:	00000c1d 	.word	0x00000c1d
    1578:	41004400 	.word	0x41004400
    157c:	200001ac 	.word	0x200001ac
    1580:	00000af5 	.word	0x00000af5
    1584:	20000094 	.word	0x20000094
    1588:	00000b65 	.word	0x00000b65

0000158c <configure_extint_channel>:
{
    158c:	b510      	push	{r4, lr}
    158e:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
    1590:	ac01      	add	r4, sp, #4
    1592:	0020      	movs	r0, r4
    1594:	4b07      	ldr	r3, [pc, #28]	; (15b4 <configure_extint_channel+0x28>)
    1596:	4798      	blx	r3
	config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
    1598:	230f      	movs	r3, #15
    159a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
    159c:	2300      	movs	r3, #0
    159e:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    15a0:	3301      	adds	r3, #1
    15a2:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    15a4:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    15a6:	0021      	movs	r1, r4
    15a8:	200f      	movs	r0, #15
    15aa:	4b03      	ldr	r3, [pc, #12]	; (15b8 <configure_extint_channel+0x2c>)
    15ac:	4798      	blx	r3
}
    15ae:	b004      	add	sp, #16
    15b0:	bd10      	pop	{r4, pc}
    15b2:	46c0      	nop			; (mov r8, r8)
    15b4:	00000ccd 	.word	0x00000ccd
    15b8:	00000ce1 	.word	0x00000ce1

000015bc <configure_extint_callbacks>:
{
    15bc:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    15be:	2200      	movs	r2, #0
    15c0:	210f      	movs	r1, #15
    15c2:	4804      	ldr	r0, [pc, #16]	; (15d4 <configure_extint_callbacks+0x18>)
    15c4:	4b04      	ldr	r3, [pc, #16]	; (15d8 <configure_extint_callbacks+0x1c>)
    15c6:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    15c8:	2100      	movs	r1, #0
    15ca:	200f      	movs	r0, #15
    15cc:	4b03      	ldr	r3, [pc, #12]	; (15dc <configure_extint_callbacks+0x20>)
    15ce:	4798      	blx	r3
}
    15d0:	bd10      	pop	{r4, pc}
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	0000153d 	.word	0x0000153d
    15d8:	00000d7d 	.word	0x00000d7d
    15dc:	00000da9 	.word	0x00000da9

000015e0 <SysTick_Handler>:
 * @note				- 
 ******************************************************************************************************/
void SysTick_Handler(void)
{
	// Your code goes here
}
    15e0:	4770      	bx	lr
	...

000015e4 <sys_config>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
void sys_config(void)
{
    15e4:	b510      	push	{r4, lr}

 	configure_extint_channel();
    15e6:	4b0c      	ldr	r3, [pc, #48]	; (1618 <sys_config+0x34>)
    15e8:	4798      	blx	r3
 	configure_extint_callbacks();
    15ea:	4b0c      	ldr	r3, [pc, #48]	; (161c <sys_config+0x38>)
    15ec:	4798      	blx	r3
	cpu_irq_enable();
    15ee:	2201      	movs	r2, #1
    15f0:	4b0b      	ldr	r3, [pc, #44]	; (1620 <sys_config+0x3c>)
    15f2:	701a      	strb	r2, [r3, #0]
    15f4:	f3bf 8f5f 	dmb	sy
    15f8:	b662      	cpsie	i
 	system_interrupt_enable_global();

	configure_i2c_master();
    15fa:	4b0a      	ldr	r3, [pc, #40]	; (1624 <sys_config+0x40>)
    15fc:	4798      	blx	r3

		wr_cmds.cmdID = 0xFF;
    15fe:	4b0a      	ldr	r3, [pc, #40]	; (1628 <sys_config+0x44>)
    1600:	22ff      	movs	r2, #255	; 0xff
    1602:	711a      	strb	r2, [r3, #4]
		wr_cmds.encLocMoveTo = 0xA1A2A3A4;		// little endian
    1604:	3a5c      	subs	r2, #92	; 0x5c
    1606:	3aff      	subs	r2, #255	; 0xff
    1608:	701a      	strb	r2, [r3, #0]
    160a:	3a01      	subs	r2, #1
    160c:	705a      	strb	r2, [r3, #1]
    160e:	3a01      	subs	r2, #1
    1610:	709a      	strb	r2, [r3, #2]
    1612:	3a01      	subs	r2, #1
    1614:	70da      	strb	r2, [r3, #3]

    1616:	bd10      	pop	{r4, pc}
    1618:	0000158d 	.word	0x0000158d
    161c:	000015bd 	.word	0x000015bd
    1620:	20000008 	.word	0x20000008
    1624:	00000a59 	.word	0x00000a59
    1628:	200001ac 	.word	0x200001ac

0000162c <main>:
 * @note				- MCU specific definitions in (src->common2->boards) -> user_board.h, init routines in init.c
 *	                    - Peripheral config in Peripherals.c (src)
 *						- EXTINT will fire callback asynchronously. (Button0 press -> interrupt callback -> LED0 toggle)
 ******************************************************************************************************/
int main (void)
{
    162c:	b510      	push	{r4, lr}
	system_init();
    162e:	4b02      	ldr	r3, [pc, #8]	; (1638 <main+0xc>)
    1630:	4798      	blx	r3
	sys_config();
    1632:	4b02      	ldr	r3, [pc, #8]	; (163c <main+0x10>)
    1634:	4798      	blx	r3
    1636:	e7fe      	b.n	1636 <main+0xa>
    1638:	00001475 	.word	0x00001475
    163c:	000015e5 	.word	0x000015e5

00001640 <__udivsi3>:
    1640:	2200      	movs	r2, #0
    1642:	0843      	lsrs	r3, r0, #1
    1644:	428b      	cmp	r3, r1
    1646:	d374      	bcc.n	1732 <__udivsi3+0xf2>
    1648:	0903      	lsrs	r3, r0, #4
    164a:	428b      	cmp	r3, r1
    164c:	d35f      	bcc.n	170e <__udivsi3+0xce>
    164e:	0a03      	lsrs	r3, r0, #8
    1650:	428b      	cmp	r3, r1
    1652:	d344      	bcc.n	16de <__udivsi3+0x9e>
    1654:	0b03      	lsrs	r3, r0, #12
    1656:	428b      	cmp	r3, r1
    1658:	d328      	bcc.n	16ac <__udivsi3+0x6c>
    165a:	0c03      	lsrs	r3, r0, #16
    165c:	428b      	cmp	r3, r1
    165e:	d30d      	bcc.n	167c <__udivsi3+0x3c>
    1660:	22ff      	movs	r2, #255	; 0xff
    1662:	0209      	lsls	r1, r1, #8
    1664:	ba12      	rev	r2, r2
    1666:	0c03      	lsrs	r3, r0, #16
    1668:	428b      	cmp	r3, r1
    166a:	d302      	bcc.n	1672 <__udivsi3+0x32>
    166c:	1212      	asrs	r2, r2, #8
    166e:	0209      	lsls	r1, r1, #8
    1670:	d065      	beq.n	173e <__udivsi3+0xfe>
    1672:	0b03      	lsrs	r3, r0, #12
    1674:	428b      	cmp	r3, r1
    1676:	d319      	bcc.n	16ac <__udivsi3+0x6c>
    1678:	e000      	b.n	167c <__udivsi3+0x3c>
    167a:	0a09      	lsrs	r1, r1, #8
    167c:	0bc3      	lsrs	r3, r0, #15
    167e:	428b      	cmp	r3, r1
    1680:	d301      	bcc.n	1686 <__udivsi3+0x46>
    1682:	03cb      	lsls	r3, r1, #15
    1684:	1ac0      	subs	r0, r0, r3
    1686:	4152      	adcs	r2, r2
    1688:	0b83      	lsrs	r3, r0, #14
    168a:	428b      	cmp	r3, r1
    168c:	d301      	bcc.n	1692 <__udivsi3+0x52>
    168e:	038b      	lsls	r3, r1, #14
    1690:	1ac0      	subs	r0, r0, r3
    1692:	4152      	adcs	r2, r2
    1694:	0b43      	lsrs	r3, r0, #13
    1696:	428b      	cmp	r3, r1
    1698:	d301      	bcc.n	169e <__udivsi3+0x5e>
    169a:	034b      	lsls	r3, r1, #13
    169c:	1ac0      	subs	r0, r0, r3
    169e:	4152      	adcs	r2, r2
    16a0:	0b03      	lsrs	r3, r0, #12
    16a2:	428b      	cmp	r3, r1
    16a4:	d301      	bcc.n	16aa <__udivsi3+0x6a>
    16a6:	030b      	lsls	r3, r1, #12
    16a8:	1ac0      	subs	r0, r0, r3
    16aa:	4152      	adcs	r2, r2
    16ac:	0ac3      	lsrs	r3, r0, #11
    16ae:	428b      	cmp	r3, r1
    16b0:	d301      	bcc.n	16b6 <__udivsi3+0x76>
    16b2:	02cb      	lsls	r3, r1, #11
    16b4:	1ac0      	subs	r0, r0, r3
    16b6:	4152      	adcs	r2, r2
    16b8:	0a83      	lsrs	r3, r0, #10
    16ba:	428b      	cmp	r3, r1
    16bc:	d301      	bcc.n	16c2 <__udivsi3+0x82>
    16be:	028b      	lsls	r3, r1, #10
    16c0:	1ac0      	subs	r0, r0, r3
    16c2:	4152      	adcs	r2, r2
    16c4:	0a43      	lsrs	r3, r0, #9
    16c6:	428b      	cmp	r3, r1
    16c8:	d301      	bcc.n	16ce <__udivsi3+0x8e>
    16ca:	024b      	lsls	r3, r1, #9
    16cc:	1ac0      	subs	r0, r0, r3
    16ce:	4152      	adcs	r2, r2
    16d0:	0a03      	lsrs	r3, r0, #8
    16d2:	428b      	cmp	r3, r1
    16d4:	d301      	bcc.n	16da <__udivsi3+0x9a>
    16d6:	020b      	lsls	r3, r1, #8
    16d8:	1ac0      	subs	r0, r0, r3
    16da:	4152      	adcs	r2, r2
    16dc:	d2cd      	bcs.n	167a <__udivsi3+0x3a>
    16de:	09c3      	lsrs	r3, r0, #7
    16e0:	428b      	cmp	r3, r1
    16e2:	d301      	bcc.n	16e8 <__udivsi3+0xa8>
    16e4:	01cb      	lsls	r3, r1, #7
    16e6:	1ac0      	subs	r0, r0, r3
    16e8:	4152      	adcs	r2, r2
    16ea:	0983      	lsrs	r3, r0, #6
    16ec:	428b      	cmp	r3, r1
    16ee:	d301      	bcc.n	16f4 <__udivsi3+0xb4>
    16f0:	018b      	lsls	r3, r1, #6
    16f2:	1ac0      	subs	r0, r0, r3
    16f4:	4152      	adcs	r2, r2
    16f6:	0943      	lsrs	r3, r0, #5
    16f8:	428b      	cmp	r3, r1
    16fa:	d301      	bcc.n	1700 <__udivsi3+0xc0>
    16fc:	014b      	lsls	r3, r1, #5
    16fe:	1ac0      	subs	r0, r0, r3
    1700:	4152      	adcs	r2, r2
    1702:	0903      	lsrs	r3, r0, #4
    1704:	428b      	cmp	r3, r1
    1706:	d301      	bcc.n	170c <__udivsi3+0xcc>
    1708:	010b      	lsls	r3, r1, #4
    170a:	1ac0      	subs	r0, r0, r3
    170c:	4152      	adcs	r2, r2
    170e:	08c3      	lsrs	r3, r0, #3
    1710:	428b      	cmp	r3, r1
    1712:	d301      	bcc.n	1718 <__udivsi3+0xd8>
    1714:	00cb      	lsls	r3, r1, #3
    1716:	1ac0      	subs	r0, r0, r3
    1718:	4152      	adcs	r2, r2
    171a:	0883      	lsrs	r3, r0, #2
    171c:	428b      	cmp	r3, r1
    171e:	d301      	bcc.n	1724 <__udivsi3+0xe4>
    1720:	008b      	lsls	r3, r1, #2
    1722:	1ac0      	subs	r0, r0, r3
    1724:	4152      	adcs	r2, r2
    1726:	0843      	lsrs	r3, r0, #1
    1728:	428b      	cmp	r3, r1
    172a:	d301      	bcc.n	1730 <__udivsi3+0xf0>
    172c:	004b      	lsls	r3, r1, #1
    172e:	1ac0      	subs	r0, r0, r3
    1730:	4152      	adcs	r2, r2
    1732:	1a41      	subs	r1, r0, r1
    1734:	d200      	bcs.n	1738 <__udivsi3+0xf8>
    1736:	4601      	mov	r1, r0
    1738:	4152      	adcs	r2, r2
    173a:	4610      	mov	r0, r2
    173c:	4770      	bx	lr
    173e:	e7ff      	b.n	1740 <__udivsi3+0x100>
    1740:	b501      	push	{r0, lr}
    1742:	2000      	movs	r0, #0
    1744:	f000 f806 	bl	1754 <__aeabi_idiv0>
    1748:	bd02      	pop	{r1, pc}
    174a:	46c0      	nop			; (mov r8, r8)

0000174c <__aeabi_uidivmod>:
    174c:	2900      	cmp	r1, #0
    174e:	d0f7      	beq.n	1740 <__udivsi3+0x100>
    1750:	e776      	b.n	1640 <__udivsi3>
    1752:	4770      	bx	lr

00001754 <__aeabi_idiv0>:
    1754:	4770      	bx	lr
    1756:	46c0      	nop			; (mov r8, r8)

00001758 <__libc_init_array>:
    1758:	b570      	push	{r4, r5, r6, lr}
    175a:	2600      	movs	r6, #0
    175c:	4d0c      	ldr	r5, [pc, #48]	; (1790 <__libc_init_array+0x38>)
    175e:	4c0d      	ldr	r4, [pc, #52]	; (1794 <__libc_init_array+0x3c>)
    1760:	1b64      	subs	r4, r4, r5
    1762:	10a4      	asrs	r4, r4, #2
    1764:	42a6      	cmp	r6, r4
    1766:	d109      	bne.n	177c <__libc_init_array+0x24>
    1768:	2600      	movs	r6, #0
    176a:	f000 f845 	bl	17f8 <_init>
    176e:	4d0a      	ldr	r5, [pc, #40]	; (1798 <__libc_init_array+0x40>)
    1770:	4c0a      	ldr	r4, [pc, #40]	; (179c <__libc_init_array+0x44>)
    1772:	1b64      	subs	r4, r4, r5
    1774:	10a4      	asrs	r4, r4, #2
    1776:	42a6      	cmp	r6, r4
    1778:	d105      	bne.n	1786 <__libc_init_array+0x2e>
    177a:	bd70      	pop	{r4, r5, r6, pc}
    177c:	00b3      	lsls	r3, r6, #2
    177e:	58eb      	ldr	r3, [r5, r3]
    1780:	4798      	blx	r3
    1782:	3601      	adds	r6, #1
    1784:	e7ee      	b.n	1764 <__libc_init_array+0xc>
    1786:	00b3      	lsls	r3, r6, #2
    1788:	58eb      	ldr	r3, [r5, r3]
    178a:	4798      	blx	r3
    178c:	3601      	adds	r6, #1
    178e:	e7f2      	b.n	1776 <__libc_init_array+0x1e>
    1790:	00001804 	.word	0x00001804
    1794:	00001804 	.word	0x00001804
    1798:	00001804 	.word	0x00001804
    179c:	00001808 	.word	0x00001808
    17a0:	42000800 	.word	0x42000800
    17a4:	42000c00 	.word	0x42000c00
    17a8:	42001000 	.word	0x42001000
    17ac:	42001400 	.word	0x42001400
    17b0:	42001800 	.word	0x42001800
    17b4:	42001c00 	.word	0x42001c00
    17b8:	00000f42 	.word	0x00000f42
    17bc:	00000f3e 	.word	0x00000f3e
    17c0:	00000f3e 	.word	0x00000f3e
    17c4:	00000f8e 	.word	0x00000f8e
    17c8:	00000f8e 	.word	0x00000f8e
    17cc:	00000f56 	.word	0x00000f56
    17d0:	00000f48 	.word	0x00000f48
    17d4:	00000f5c 	.word	0x00000f5c
    17d8:	00001014 	.word	0x00001014
    17dc:	00000ff4 	.word	0x00000ff4
    17e0:	00000ff4 	.word	0x00000ff4
    17e4:	00001064 	.word	0x00001064
    17e8:	00001006 	.word	0x00001006
    17ec:	00001022 	.word	0x00001022
    17f0:	00000ff8 	.word	0x00000ff8
    17f4:	00001030 	.word	0x00001030

000017f8 <_init>:
    17f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    17fe:	bc08      	pop	{r3}
    1800:	469e      	mov	lr, r3
    1802:	4770      	bx	lr

00001804 <__init_array_start>:
    1804:	000000cd 	.word	0x000000cd

00001808 <_fini>:
    1808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    180a:	46c0      	nop			; (mov r8, r8)
    180c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    180e:	bc08      	pop	{r3}
    1810:	469e      	mov	lr, r3
    1812:	4770      	bx	lr

00001814 <__fini_array_start>:
    1814:	000000a5 	.word	0x000000a5
