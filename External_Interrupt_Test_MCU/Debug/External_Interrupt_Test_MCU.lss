
External_Interrupt_Test_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d6c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00000d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000094  2000000c  00000d78  0002000c  2**2
                  ALLOC
  3 .stack        00002000  200000a0  00000e0c  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00014b18  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a1a  00000000  00000000  00034ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000241a  00000000  00000000  000375bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000380  00000000  00000000  000399d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000388  00000000  00000000  00039d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000125ef  00000000  00000000  0003a0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008f7c  00000000  00000000  0004c6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005ef01  00000000  00000000  0005564c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000007a4  00000000  00000000  000b4550  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	a0 20 00 20 2d 0a 00 00 29 0a 00 00 29 0a 00 00     . . -...)...)...
	...
  2c:	29 0a 00 00 00 00 00 00 00 00 00 00 29 0a 00 00     )...........)...
  3c:	71 0b 00 00 29 0a 00 00 29 0a 00 00 29 0a 00 00     q...)...)...)...
  4c:	29 0a 00 00 f1 02 00 00 29 0a 00 00 29 0a 00 00     ).......)...)...
  5c:	59 04 00 00 69 04 00 00 79 04 00 00 89 04 00 00     Y...i...y.......
  6c:	99 04 00 00 a9 04 00 00 29 0a 00 00 29 0a 00 00     ........)...)...
  7c:	29 0a 00 00 29 0a 00 00 29 0a 00 00 29 0a 00 00     )...)...)...)...
  8c:	29 0a 00 00 29 0a 00 00 29 0a 00 00 29 0a 00 00     )...)...)...)...
  9c:	29 0a 00 00 29 0a 00 00                             )...)...

000000a4 <__do_global_dtors_aux>:
  a4:	b510      	push	{r4, lr}
  a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
  a8:	7823      	ldrb	r3, [r4, #0]
  aa:	2b00      	cmp	r3, #0
  ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
  ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
  b0:	2b00      	cmp	r3, #0
  b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
  b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
  b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
  b8:	bf00      	nop
  ba:	2301      	movs	r3, #1
  bc:	7023      	strb	r3, [r4, #0]
  be:	bd10      	pop	{r4, pc}
  c0:	2000000c 	.word	0x2000000c
  c4:	00000000 	.word	0x00000000
  c8:	00000d6c 	.word	0x00000d6c

000000cc <frame_dummy>:
  cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
  ce:	b510      	push	{r4, lr}
  d0:	2b00      	cmp	r3, #0
  d2:	d003      	beq.n	dc <frame_dummy+0x10>
  d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
  d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
  d8:	e000      	b.n	dc <frame_dummy+0x10>
  da:	bf00      	nop
  dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
  de:	6803      	ldr	r3, [r0, #0]
  e0:	2b00      	cmp	r3, #0
  e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
  e4:	bd10      	pop	{r4, pc}
  e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
  e8:	2b00      	cmp	r3, #0
  ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
  ec:	4798      	blx	r3
  ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
  f0:	00000000 	.word	0x00000000
  f4:	20000010 	.word	0x20000010
  f8:	00000d6c 	.word	0x00000d6c
  fc:	00000d6c 	.word	0x00000d6c
 100:	00000000 	.word	0x00000000

00000104 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
 104:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
 106:	2000      	movs	r0, #0
 108:	4b08      	ldr	r3, [pc, #32]	; (12c <delay_init+0x28>)
 10a:	4798      	blx	r3
 10c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
 10e:	4c08      	ldr	r4, [pc, #32]	; (130 <delay_init+0x2c>)
 110:	21fa      	movs	r1, #250	; 0xfa
 112:	0089      	lsls	r1, r1, #2
 114:	47a0      	blx	r4
 116:	4b07      	ldr	r3, [pc, #28]	; (134 <delay_init+0x30>)
 118:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
 11a:	4907      	ldr	r1, [pc, #28]	; (138 <delay_init+0x34>)
 11c:	0028      	movs	r0, r5
 11e:	47a0      	blx	r4
 120:	4b06      	ldr	r3, [pc, #24]	; (13c <delay_init+0x38>)
 122:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 124:	2205      	movs	r2, #5
 126:	4b06      	ldr	r3, [pc, #24]	; (140 <delay_init+0x3c>)
 128:	601a      	str	r2, [r3, #0]
}
 12a:	bd70      	pop	{r4, r5, r6, pc}
 12c:	000007b9 	.word	0x000007b9
 130:	00000bad 	.word	0x00000bad
 134:	20000000 	.word	0x20000000
 138:	000f4240 	.word	0x000f4240
 13c:	20000004 	.word	0x20000004
 140:	e000e010 	.word	0xe000e010

00000144 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
 144:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
 146:	4b08      	ldr	r3, [pc, #32]	; (168 <delay_cycles_ms+0x24>)
 148:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
 14a:	4a08      	ldr	r2, [pc, #32]	; (16c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
 14c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 14e:	2180      	movs	r1, #128	; 0x80
 150:	0249      	lsls	r1, r1, #9
	while (n--) {
 152:	3801      	subs	r0, #1
 154:	d307      	bcc.n	166 <delay_cycles_ms+0x22>
	if (n > 0) {
 156:	2c00      	cmp	r4, #0
 158:	d0fb      	beq.n	152 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
 15a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
 15c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 15e:	6813      	ldr	r3, [r2, #0]
 160:	420b      	tst	r3, r1
 162:	d0fc      	beq.n	15e <delay_cycles_ms+0x1a>
 164:	e7f5      	b.n	152 <delay_cycles_ms+0xe>
	}
}
 166:	bd30      	pop	{r4, r5, pc}
 168:	20000000 	.word	0x20000000
 16c:	e000e010 	.word	0xe000e010

00000170 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
 170:	4a04      	ldr	r2, [pc, #16]	; (184 <_extint_enable+0x14>)
 172:	7813      	ldrb	r3, [r2, #0]
 174:	2102      	movs	r1, #2
 176:	430b      	orrs	r3, r1
 178:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
 17a:	7853      	ldrb	r3, [r2, #1]
 17c:	b25b      	sxtb	r3, r3
 17e:	2b00      	cmp	r3, #0
 180:	dbfb      	blt.n	17a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
 182:	4770      	bx	lr
 184:	40001800 	.word	0x40001800

00000188 <_system_extint_init>:
{
 188:	b500      	push	{lr}
 18a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
 18c:	4a12      	ldr	r2, [pc, #72]	; (1d8 <_system_extint_init+0x50>)
 18e:	6993      	ldr	r3, [r2, #24]
 190:	2140      	movs	r1, #64	; 0x40
 192:	430b      	orrs	r3, r1
 194:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
 196:	a901      	add	r1, sp, #4
 198:	2300      	movs	r3, #0
 19a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
 19c:	2003      	movs	r0, #3
 19e:	4b0f      	ldr	r3, [pc, #60]	; (1dc <_system_extint_init+0x54>)
 1a0:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
 1a2:	2003      	movs	r0, #3
 1a4:	4b0e      	ldr	r3, [pc, #56]	; (1e0 <_system_extint_init+0x58>)
 1a6:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
 1a8:	4a0e      	ldr	r2, [pc, #56]	; (1e4 <_system_extint_init+0x5c>)
 1aa:	7813      	ldrb	r3, [r2, #0]
 1ac:	2101      	movs	r1, #1
 1ae:	430b      	orrs	r3, r1
 1b0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
 1b2:	7853      	ldrb	r3, [r2, #1]
 1b4:	b25b      	sxtb	r3, r3
 1b6:	2b00      	cmp	r3, #0
 1b8:	dbfb      	blt.n	1b2 <_system_extint_init+0x2a>
 1ba:	4b0b      	ldr	r3, [pc, #44]	; (1e8 <_system_extint_init+0x60>)
 1bc:	0019      	movs	r1, r3
 1be:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
 1c0:	2200      	movs	r2, #0
 1c2:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
 1c4:	4299      	cmp	r1, r3
 1c6:	d1fc      	bne.n	1c2 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
 1c8:	2210      	movs	r2, #16
 1ca:	4b08      	ldr	r3, [pc, #32]	; (1ec <_system_extint_init+0x64>)
 1cc:	601a      	str	r2, [r3, #0]
	_extint_enable();
 1ce:	4b08      	ldr	r3, [pc, #32]	; (1f0 <_system_extint_init+0x68>)
 1d0:	4798      	blx	r3
}
 1d2:	b003      	add	sp, #12
 1d4:	bd00      	pop	{pc}
 1d6:	46c0      	nop			; (mov r8, r8)
 1d8:	40000400 	.word	0x40000400
 1dc:	000008d1 	.word	0x000008d1
 1e0:	00000845 	.word	0x00000845
 1e4:	40001800 	.word	0x40001800
 1e8:	2000005c 	.word	0x2000005c
 1ec:	e000e100 	.word	0xe000e100
 1f0:	00000171 	.word	0x00000171

000001f4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
 1f4:	2300      	movs	r3, #0
 1f6:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
 1f8:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
 1fa:	2201      	movs	r2, #1
 1fc:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
 1fe:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
 200:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
 202:	3302      	adds	r3, #2
 204:	72c3      	strb	r3, [r0, #11]
}
 206:	4770      	bx	lr

00000208 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
 208:	b5f0      	push	{r4, r5, r6, r7, lr}
 20a:	b083      	sub	sp, #12
 20c:	0005      	movs	r5, r0
 20e:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
 210:	a901      	add	r1, sp, #4
 212:	2300      	movs	r3, #0
 214:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
 216:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
 218:	7923      	ldrb	r3, [r4, #4]
 21a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
 21c:	7a23      	ldrb	r3, [r4, #8]
 21e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
 220:	7820      	ldrb	r0, [r4, #0]
 222:	4b15      	ldr	r3, [pc, #84]	; (278 <extint_chan_set_config+0x70>)
 224:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
 226:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
 228:	2d1f      	cmp	r5, #31
 22a:	d800      	bhi.n	22e <extint_chan_set_config+0x26>
		return eics[eic_index];
 22c:	4813      	ldr	r0, [pc, #76]	; (27c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
 22e:	2207      	movs	r2, #7
 230:	402a      	ands	r2, r5
 232:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
 234:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
 236:	7aa3      	ldrb	r3, [r4, #10]
 238:	2b00      	cmp	r3, #0
 23a:	d001      	beq.n	240 <extint_chan_set_config+0x38>
 23c:	2308      	movs	r3, #8
 23e:	431f      	orrs	r7, r3
 240:	08eb      	lsrs	r3, r5, #3
 242:	009b      	lsls	r3, r3, #2
 244:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
 246:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
 248:	260f      	movs	r6, #15
 24a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
 24c:	43b1      	bics	r1, r6
			(new_config << config_pos);
 24e:	4097      	lsls	r7, r2
 250:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
 252:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
 254:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
 256:	7a63      	ldrb	r3, [r4, #9]
 258:	2b00      	cmp	r3, #0
 25a:	d106      	bne.n	26a <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
 25c:	6943      	ldr	r3, [r0, #20]
 25e:	2201      	movs	r2, #1
 260:	40aa      	lsls	r2, r5
 262:	4393      	bics	r3, r2
 264:	6143      	str	r3, [r0, #20]
	}
}
 266:	b003      	add	sp, #12
 268:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
 26a:	6942      	ldr	r2, [r0, #20]
 26c:	2301      	movs	r3, #1
 26e:	40ab      	lsls	r3, r5
 270:	4313      	orrs	r3, r2
 272:	6143      	str	r3, [r0, #20]
 274:	e7f7      	b.n	266 <extint_chan_set_config+0x5e>
 276:	46c0      	nop			; (mov r8, r8)
 278:	000009c9 	.word	0x000009c9
 27c:	40001800 	.word	0x40001800

00000280 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 280:	b500      	push	{lr}
 282:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
 284:	ab01      	add	r3, sp, #4
 286:	2280      	movs	r2, #128	; 0x80
 288:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 28a:	780a      	ldrb	r2, [r1, #0]
 28c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 28e:	784a      	ldrb	r2, [r1, #1]
 290:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 292:	788a      	ldrb	r2, [r1, #2]
 294:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 296:	0019      	movs	r1, r3
 298:	4b01      	ldr	r3, [pc, #4]	; (2a0 <port_pin_set_config+0x20>)
 29a:	4798      	blx	r3
}
 29c:	b003      	add	sp, #12
 29e:	bd00      	pop	{pc}
 2a0:	000009c9 	.word	0x000009c9

000002a4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 2a4:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
 2a6:	2a00      	cmp	r2, #0
 2a8:	d001      	beq.n	2ae <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
 2aa:	0018      	movs	r0, r3
 2ac:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
 2ae:	008b      	lsls	r3, r1, #2
 2b0:	4a06      	ldr	r2, [pc, #24]	; (2cc <extint_register_callback+0x28>)
 2b2:	589b      	ldr	r3, [r3, r2]
 2b4:	2b00      	cmp	r3, #0
 2b6:	d003      	beq.n	2c0 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
 2b8:	4283      	cmp	r3, r0
 2ba:	d005      	beq.n	2c8 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
 2bc:	231d      	movs	r3, #29
 2be:	e7f4      	b.n	2aa <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
 2c0:	0089      	lsls	r1, r1, #2
 2c2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
 2c4:	2300      	movs	r3, #0
 2c6:	e7f0      	b.n	2aa <extint_register_callback+0x6>
		return STATUS_OK;
 2c8:	2300      	movs	r3, #0
 2ca:	e7ee      	b.n	2aa <extint_register_callback+0x6>
 2cc:	2000005c 	.word	0x2000005c

000002d0 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 2d0:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
 2d2:	2900      	cmp	r1, #0
 2d4:	d001      	beq.n	2da <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
 2d6:	0018      	movs	r0, r3
 2d8:	4770      	bx	lr
		return NULL;
 2da:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
 2dc:	281f      	cmp	r0, #31
 2de:	d800      	bhi.n	2e2 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
 2e0:	4a02      	ldr	r2, [pc, #8]	; (2ec <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
 2e2:	2301      	movs	r3, #1
 2e4:	4083      	lsls	r3, r0
 2e6:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
 2e8:	2300      	movs	r3, #0
 2ea:	e7f4      	b.n	2d6 <extint_chan_enable_callback+0x6>
 2ec:	40001800 	.word	0x40001800

000002f0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
 2f0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
 2f2:	2200      	movs	r2, #0
 2f4:	4b10      	ldr	r3, [pc, #64]	; (338 <EIC_Handler+0x48>)
 2f6:	701a      	strb	r2, [r3, #0]
 2f8:	2300      	movs	r3, #0
 2fa:	4910      	ldr	r1, [pc, #64]	; (33c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
 2fc:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
 2fe:	4e10      	ldr	r6, [pc, #64]	; (340 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
 300:	4c0d      	ldr	r4, [pc, #52]	; (338 <EIC_Handler+0x48>)
 302:	e00a      	b.n	31a <EIC_Handler+0x2a>
		return eics[eic_index];
 304:	490d      	ldr	r1, [pc, #52]	; (33c <EIC_Handler+0x4c>)
 306:	e008      	b.n	31a <EIC_Handler+0x2a>
 308:	7823      	ldrb	r3, [r4, #0]
 30a:	3301      	adds	r3, #1
 30c:	b2db      	uxtb	r3, r3
 30e:	7023      	strb	r3, [r4, #0]
 310:	2b0f      	cmp	r3, #15
 312:	d810      	bhi.n	336 <EIC_Handler+0x46>
		return NULL;
 314:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
 316:	2b1f      	cmp	r3, #31
 318:	d9f4      	bls.n	304 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
 31a:	0028      	movs	r0, r5
 31c:	4018      	ands	r0, r3
 31e:	2201      	movs	r2, #1
 320:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
 322:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
 324:	4210      	tst	r0, r2
 326:	d0ef      	beq.n	308 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
 328:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
 32a:	009b      	lsls	r3, r3, #2
 32c:	599b      	ldr	r3, [r3, r6]
 32e:	2b00      	cmp	r3, #0
 330:	d0ea      	beq.n	308 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
 332:	4798      	blx	r3
 334:	e7e8      	b.n	308 <EIC_Handler+0x18>
			}
		}
	}
}
 336:	bd70      	pop	{r4, r5, r6, pc}
 338:	2000009c 	.word	0x2000009c
 33c:	40001800 	.word	0x40001800
 340:	2000005c 	.word	0x2000005c

00000344 <config_led>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
 void config_led(void)
 {
 344:	b500      	push	{lr}
 346:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 348:	a901      	add	r1, sp, #4
 34a:	2301      	movs	r3, #1
 34c:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
 34e:	2200      	movs	r2, #0
 350:	708a      	strb	r2, [r1, #2]
	 struct port_config pin_conf;
	 port_get_config_defaults(&pin_conf);

	 pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 352:	700b      	strb	r3, [r1, #0]
	 port_pin_set_config(LED_0_PIN, &pin_conf);
 354:	200e      	movs	r0, #14
 356:	4b04      	ldr	r3, [pc, #16]	; (368 <config_led+0x24>)
 358:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 35a:	2280      	movs	r2, #128	; 0x80
 35c:	01d2      	lsls	r2, r2, #7
 35e:	4b03      	ldr	r3, [pc, #12]	; (36c <config_led+0x28>)
 360:	619a      	str	r2, [r3, #24]
	 port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
 }
 362:	b003      	add	sp, #12
 364:	bd00      	pop	{pc}
 366:	46c0      	nop			; (mov r8, r8)
 368:	00000281 	.word	0x00000281
 36c:	41004400 	.word	0x41004400

00000370 <config_btn>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
 void config_btn(void)
 {
 370:	b500      	push	{lr}
 372:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
 374:	a901      	add	r1, sp, #4
 376:	2300      	movs	r3, #0
 378:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
 37a:	2201      	movs	r2, #1
 37c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
 37e:	708b      	strb	r3, [r1, #2]
	 port_get_config_defaults(&pin_conf);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 380:	200f      	movs	r0, #15
 382:	4b02      	ldr	r3, [pc, #8]	; (38c <config_btn+0x1c>)
 384:	4798      	blx	r3
 }
 386:	b003      	add	sp, #12
 388:	bd00      	pop	{pc}
 38a:	46c0      	nop			; (mov r8, r8)
 38c:	00000281 	.word	0x00000281

00000390 <system_board_init>:

void system_board_init(void)
{
 390:	b510      	push	{r4, lr}
 	/*Configure system tick to generate periodic interrupts */
 	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
 392:	2000      	movs	r0, #0
 394:	4b0d      	ldr	r3, [pc, #52]	; (3cc <system_board_init+0x3c>)
 396:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 398:	3801      	subs	r0, #1
 39a:	4b0d      	ldr	r3, [pc, #52]	; (3d0 <system_board_init+0x40>)
 39c:	4298      	cmp	r0, r3
 39e:	d80d      	bhi.n	3bc <system_board_init+0x2c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 3a0:	4a0c      	ldr	r2, [pc, #48]	; (3d4 <system_board_init+0x44>)
 3a2:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 3a4:	480c      	ldr	r0, [pc, #48]	; (3d8 <system_board_init+0x48>)
 3a6:	6a03      	ldr	r3, [r0, #32]
 3a8:	021b      	lsls	r3, r3, #8
 3aa:	0a1b      	lsrs	r3, r3, #8
 3ac:	21c0      	movs	r1, #192	; 0xc0
 3ae:	0609      	lsls	r1, r1, #24
 3b0:	430b      	orrs	r3, r1
 3b2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 3b4:	2300      	movs	r3, #0
 3b6:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 3b8:	3307      	adds	r3, #7
 3ba:	6013      	str	r3, [r2, #0]
 	delay_init();
 3bc:	4b07      	ldr	r3, [pc, #28]	; (3dc <system_board_init+0x4c>)
 3be:	4798      	blx	r3

	config_led();
 3c0:	4b07      	ldr	r3, [pc, #28]	; (3e0 <system_board_init+0x50>)
 3c2:	4798      	blx	r3
	config_btn();
 3c4:	4b07      	ldr	r3, [pc, #28]	; (3e4 <system_board_init+0x54>)
 3c6:	4798      	blx	r3

}
 3c8:	bd10      	pop	{r4, pc}
 3ca:	46c0      	nop			; (mov r8, r8)
 3cc:	000007b9 	.word	0x000007b9
 3d0:	00ffffff 	.word	0x00ffffff
 3d4:	e000e010 	.word	0xe000e010
 3d8:	e000ed00 	.word	0xe000ed00
 3dc:	00000105 	.word	0x00000105
 3e0:	00000345 	.word	0x00000345
 3e4:	00000371 	.word	0x00000371

000003e8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 3e8:	4b0c      	ldr	r3, [pc, #48]	; (41c <cpu_irq_enter_critical+0x34>)
 3ea:	681b      	ldr	r3, [r3, #0]
 3ec:	2b00      	cmp	r3, #0
 3ee:	d106      	bne.n	3fe <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 3f0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 3f4:	2b00      	cmp	r3, #0
 3f6:	d007      	beq.n	408 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 3f8:	2200      	movs	r2, #0
 3fa:	4b09      	ldr	r3, [pc, #36]	; (420 <cpu_irq_enter_critical+0x38>)
 3fc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 3fe:	4a07      	ldr	r2, [pc, #28]	; (41c <cpu_irq_enter_critical+0x34>)
 400:	6813      	ldr	r3, [r2, #0]
 402:	3301      	adds	r3, #1
 404:	6013      	str	r3, [r2, #0]
}
 406:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 408:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 40a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 40e:	2200      	movs	r2, #0
 410:	4b04      	ldr	r3, [pc, #16]	; (424 <cpu_irq_enter_critical+0x3c>)
 412:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 414:	3201      	adds	r2, #1
 416:	4b02      	ldr	r3, [pc, #8]	; (420 <cpu_irq_enter_critical+0x38>)
 418:	701a      	strb	r2, [r3, #0]
 41a:	e7f0      	b.n	3fe <cpu_irq_enter_critical+0x16>
 41c:	20000028 	.word	0x20000028
 420:	2000002c 	.word	0x2000002c
 424:	20000008 	.word	0x20000008

00000428 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 428:	4b08      	ldr	r3, [pc, #32]	; (44c <cpu_irq_leave_critical+0x24>)
 42a:	681a      	ldr	r2, [r3, #0]
 42c:	3a01      	subs	r2, #1
 42e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 430:	681b      	ldr	r3, [r3, #0]
 432:	2b00      	cmp	r3, #0
 434:	d109      	bne.n	44a <cpu_irq_leave_critical+0x22>
 436:	4b06      	ldr	r3, [pc, #24]	; (450 <cpu_irq_leave_critical+0x28>)
 438:	781b      	ldrb	r3, [r3, #0]
 43a:	2b00      	cmp	r3, #0
 43c:	d005      	beq.n	44a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 43e:	2201      	movs	r2, #1
 440:	4b04      	ldr	r3, [pc, #16]	; (454 <cpu_irq_leave_critical+0x2c>)
 442:	701a      	strb	r2, [r3, #0]
 444:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 448:	b662      	cpsie	i
	}
}
 44a:	4770      	bx	lr
 44c:	20000028 	.word	0x20000028
 450:	2000002c 	.word	0x2000002c
 454:	20000008 	.word	0x20000008

00000458 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
 458:	b510      	push	{r4, lr}
 45a:	4b02      	ldr	r3, [pc, #8]	; (464 <SERCOM0_Handler+0xc>)
 45c:	681b      	ldr	r3, [r3, #0]
 45e:	2000      	movs	r0, #0
 460:	4798      	blx	r3
 462:	bd10      	pop	{r4, pc}
 464:	20000030 	.word	0x20000030

00000468 <SERCOM1_Handler>:
 468:	b510      	push	{r4, lr}
 46a:	4b02      	ldr	r3, [pc, #8]	; (474 <SERCOM1_Handler+0xc>)
 46c:	685b      	ldr	r3, [r3, #4]
 46e:	2001      	movs	r0, #1
 470:	4798      	blx	r3
 472:	bd10      	pop	{r4, pc}
 474:	20000030 	.word	0x20000030

00000478 <SERCOM2_Handler>:
 478:	b510      	push	{r4, lr}
 47a:	4b02      	ldr	r3, [pc, #8]	; (484 <SERCOM2_Handler+0xc>)
 47c:	689b      	ldr	r3, [r3, #8]
 47e:	2002      	movs	r0, #2
 480:	4798      	blx	r3
 482:	bd10      	pop	{r4, pc}
 484:	20000030 	.word	0x20000030

00000488 <SERCOM3_Handler>:
 488:	b510      	push	{r4, lr}
 48a:	4b02      	ldr	r3, [pc, #8]	; (494 <SERCOM3_Handler+0xc>)
 48c:	68db      	ldr	r3, [r3, #12]
 48e:	2003      	movs	r0, #3
 490:	4798      	blx	r3
 492:	bd10      	pop	{r4, pc}
 494:	20000030 	.word	0x20000030

00000498 <SERCOM4_Handler>:
 498:	b510      	push	{r4, lr}
 49a:	4b02      	ldr	r3, [pc, #8]	; (4a4 <SERCOM4_Handler+0xc>)
 49c:	691b      	ldr	r3, [r3, #16]
 49e:	2004      	movs	r0, #4
 4a0:	4798      	blx	r3
 4a2:	bd10      	pop	{r4, pc}
 4a4:	20000030 	.word	0x20000030

000004a8 <SERCOM5_Handler>:
 4a8:	b510      	push	{r4, lr}
 4aa:	4b02      	ldr	r3, [pc, #8]	; (4b4 <SERCOM5_Handler+0xc>)
 4ac:	695b      	ldr	r3, [r3, #20]
 4ae:	2005      	movs	r0, #5
 4b0:	4798      	blx	r3
 4b2:	bd10      	pop	{r4, pc}
 4b4:	20000030 	.word	0x20000030

000004b8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
 4b8:	b510      	push	{r4, lr}
	switch (clock_source) {
 4ba:	2807      	cmp	r0, #7
 4bc:	d803      	bhi.n	4c6 <system_clock_source_get_hz+0xe>
 4be:	0080      	lsls	r0, r0, #2
 4c0:	4b16      	ldr	r3, [pc, #88]	; (51c <system_clock_source_get_hz+0x64>)
 4c2:	581b      	ldr	r3, [r3, r0]
 4c4:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
 4c6:	2000      	movs	r0, #0
 4c8:	e027      	b.n	51a <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
 4ca:	4b15      	ldr	r3, [pc, #84]	; (520 <system_clock_source_get_hz+0x68>)
 4cc:	68d8      	ldr	r0, [r3, #12]
 4ce:	e024      	b.n	51a <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
 4d0:	4b14      	ldr	r3, [pc, #80]	; (524 <system_clock_source_get_hz+0x6c>)
 4d2:	6a1b      	ldr	r3, [r3, #32]
 4d4:	059b      	lsls	r3, r3, #22
 4d6:	0f9b      	lsrs	r3, r3, #30
 4d8:	4813      	ldr	r0, [pc, #76]	; (528 <system_clock_source_get_hz+0x70>)
 4da:	40d8      	lsrs	r0, r3
 4dc:	e01d      	b.n	51a <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
 4de:	4b10      	ldr	r3, [pc, #64]	; (520 <system_clock_source_get_hz+0x68>)
 4e0:	6918      	ldr	r0, [r3, #16]
 4e2:	e01a      	b.n	51a <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
 4e4:	4b0e      	ldr	r3, [pc, #56]	; (520 <system_clock_source_get_hz+0x68>)
 4e6:	681b      	ldr	r3, [r3, #0]
			return 0;
 4e8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
 4ea:	079b      	lsls	r3, r3, #30
 4ec:	d515      	bpl.n	51a <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 4ee:	490d      	ldr	r1, [pc, #52]	; (524 <system_clock_source_get_hz+0x6c>)
 4f0:	2210      	movs	r2, #16
 4f2:	68cb      	ldr	r3, [r1, #12]
 4f4:	421a      	tst	r2, r3
 4f6:	d0fc      	beq.n	4f2 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
 4f8:	4b09      	ldr	r3, [pc, #36]	; (520 <system_clock_source_get_hz+0x68>)
 4fa:	681b      	ldr	r3, [r3, #0]
 4fc:	075b      	lsls	r3, r3, #29
 4fe:	d401      	bmi.n	504 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
 500:	480a      	ldr	r0, [pc, #40]	; (52c <system_clock_source_get_hz+0x74>)
 502:	e00a      	b.n	51a <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 504:	2000      	movs	r0, #0
 506:	4b0a      	ldr	r3, [pc, #40]	; (530 <system_clock_source_get_hz+0x78>)
 508:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
 50a:	4b05      	ldr	r3, [pc, #20]	; (520 <system_clock_source_get_hz+0x68>)
 50c:	689b      	ldr	r3, [r3, #8]
 50e:	041b      	lsls	r3, r3, #16
 510:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 512:	4358      	muls	r0, r3
 514:	e001      	b.n	51a <system_clock_source_get_hz+0x62>
		return 32768UL;
 516:	2080      	movs	r0, #128	; 0x80
 518:	0200      	lsls	r0, r0, #8
	}
}
 51a:	bd10      	pop	{r4, pc}
 51c:	00000d0c 	.word	0x00000d0c
 520:	20000048 	.word	0x20000048
 524:	40000800 	.word	0x40000800
 528:	007a1200 	.word	0x007a1200
 52c:	02dc6c00 	.word	0x02dc6c00
 530:	000008ed 	.word	0x000008ed

00000534 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 534:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 536:	490c      	ldr	r1, [pc, #48]	; (568 <system_clock_source_osc8m_set_config+0x34>)
 538:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 53a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 53c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 53e:	7840      	ldrb	r0, [r0, #1]
 540:	2201      	movs	r2, #1
 542:	4010      	ands	r0, r2
 544:	0180      	lsls	r0, r0, #6
 546:	2640      	movs	r6, #64	; 0x40
 548:	43b3      	bics	r3, r6
 54a:	4303      	orrs	r3, r0
 54c:	402a      	ands	r2, r5
 54e:	01d2      	lsls	r2, r2, #7
 550:	2080      	movs	r0, #128	; 0x80
 552:	4383      	bics	r3, r0
 554:	4313      	orrs	r3, r2
 556:	2203      	movs	r2, #3
 558:	4022      	ands	r2, r4
 55a:	0212      	lsls	r2, r2, #8
 55c:	4803      	ldr	r0, [pc, #12]	; (56c <system_clock_source_osc8m_set_config+0x38>)
 55e:	4003      	ands	r3, r0
 560:	4313      	orrs	r3, r2
 562:	620b      	str	r3, [r1, #32]
}
 564:	bd70      	pop	{r4, r5, r6, pc}
 566:	46c0      	nop			; (mov r8, r8)
 568:	40000800 	.word	0x40000800
 56c:	fffffcff 	.word	0xfffffcff

00000570 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 570:	2807      	cmp	r0, #7
 572:	d803      	bhi.n	57c <system_clock_source_enable+0xc>
 574:	0080      	lsls	r0, r0, #2
 576:	4b1e      	ldr	r3, [pc, #120]	; (5f0 <system_clock_source_enable+0x80>)
 578:	581b      	ldr	r3, [r3, r0]
 57a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 57c:	2017      	movs	r0, #23
 57e:	e036      	b.n	5ee <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 580:	4a1c      	ldr	r2, [pc, #112]	; (5f4 <system_clock_source_enable+0x84>)
 582:	6a13      	ldr	r3, [r2, #32]
 584:	2102      	movs	r1, #2
 586:	430b      	orrs	r3, r1
 588:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 58a:	2000      	movs	r0, #0
 58c:	e02f      	b.n	5ee <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 58e:	4a19      	ldr	r2, [pc, #100]	; (5f4 <system_clock_source_enable+0x84>)
 590:	6993      	ldr	r3, [r2, #24]
 592:	2102      	movs	r1, #2
 594:	430b      	orrs	r3, r1
 596:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
 598:	2000      	movs	r0, #0
		break;
 59a:	e028      	b.n	5ee <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 59c:	4a15      	ldr	r2, [pc, #84]	; (5f4 <system_clock_source_enable+0x84>)
 59e:	8a13      	ldrh	r3, [r2, #16]
 5a0:	2102      	movs	r1, #2
 5a2:	430b      	orrs	r3, r1
 5a4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
 5a6:	2000      	movs	r0, #0
		break;
 5a8:	e021      	b.n	5ee <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 5aa:	4a12      	ldr	r2, [pc, #72]	; (5f4 <system_clock_source_enable+0x84>)
 5ac:	8a93      	ldrh	r3, [r2, #20]
 5ae:	2102      	movs	r1, #2
 5b0:	430b      	orrs	r3, r1
 5b2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
 5b4:	2000      	movs	r0, #0
		break;
 5b6:	e01a      	b.n	5ee <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 5b8:	4b0f      	ldr	r3, [pc, #60]	; (5f8 <system_clock_source_enable+0x88>)
 5ba:	681a      	ldr	r2, [r3, #0]
 5bc:	2102      	movs	r1, #2
 5be:	430a      	orrs	r2, r1
 5c0:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
 5c2:	681b      	ldr	r3, [r3, #0]
 5c4:	4a0d      	ldr	r2, [pc, #52]	; (5fc <system_clock_source_enable+0x8c>)
 5c6:	4013      	ands	r3, r2
 5c8:	4a0a      	ldr	r2, [pc, #40]	; (5f4 <system_clock_source_enable+0x84>)
 5ca:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 5cc:	0011      	movs	r1, r2
 5ce:	2210      	movs	r2, #16
 5d0:	68cb      	ldr	r3, [r1, #12]
 5d2:	421a      	tst	r2, r3
 5d4:	d0fc      	beq.n	5d0 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 5d6:	4a08      	ldr	r2, [pc, #32]	; (5f8 <system_clock_source_enable+0x88>)
 5d8:	6891      	ldr	r1, [r2, #8]
 5da:	4b06      	ldr	r3, [pc, #24]	; (5f4 <system_clock_source_enable+0x84>)
 5dc:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 5de:	6851      	ldr	r1, [r2, #4]
 5e0:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 5e2:	6812      	ldr	r2, [r2, #0]
 5e4:	b292      	uxth	r2, r2
 5e6:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
 5e8:	2000      	movs	r0, #0
 5ea:	e000      	b.n	5ee <system_clock_source_enable+0x7e>
		return STATUS_OK;
 5ec:	2000      	movs	r0, #0
}
 5ee:	4770      	bx	lr
 5f0:	00000d2c 	.word	0x00000d2c
 5f4:	40000800 	.word	0x40000800
 5f8:	20000048 	.word	0x20000048
 5fc:	0000ff7f 	.word	0x0000ff7f

00000600 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 600:	b530      	push	{r4, r5, lr}
 602:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 604:	22c2      	movs	r2, #194	; 0xc2
 606:	00d2      	lsls	r2, r2, #3
 608:	4b1a      	ldr	r3, [pc, #104]	; (674 <system_clock_init+0x74>)
 60a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 60c:	4a1a      	ldr	r2, [pc, #104]	; (678 <system_clock_init+0x78>)
 60e:	6853      	ldr	r3, [r2, #4]
 610:	211e      	movs	r1, #30
 612:	438b      	bics	r3, r1
 614:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 616:	2301      	movs	r3, #1
 618:	466a      	mov	r2, sp
 61a:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 61c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 61e:	4d17      	ldr	r5, [pc, #92]	; (67c <system_clock_init+0x7c>)
 620:	b2e0      	uxtb	r0, r4
 622:	4669      	mov	r1, sp
 624:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 626:	3401      	adds	r4, #1
 628:	2c1c      	cmp	r4, #28
 62a:	d1f9      	bne.n	620 <system_clock_init+0x20>
	config->run_in_standby  = false;
 62c:	a803      	add	r0, sp, #12
 62e:	2400      	movs	r4, #0
 630:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 632:	2501      	movs	r5, #1
 634:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 636:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 638:	4b11      	ldr	r3, [pc, #68]	; (680 <system_clock_init+0x80>)
 63a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 63c:	2006      	movs	r0, #6
 63e:	4b11      	ldr	r3, [pc, #68]	; (684 <system_clock_init+0x84>)
 640:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 642:	4b11      	ldr	r3, [pc, #68]	; (688 <system_clock_init+0x88>)
 644:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
 646:	4b11      	ldr	r3, [pc, #68]	; (68c <system_clock_init+0x8c>)
 648:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
 64a:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
 64c:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
 64e:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
 650:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 652:	466b      	mov	r3, sp
 654:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
 656:	2306      	movs	r3, #6
 658:	466a      	mov	r2, sp
 65a:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
 65c:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 65e:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 660:	4669      	mov	r1, sp
 662:	2000      	movs	r0, #0
 664:	4b0a      	ldr	r3, [pc, #40]	; (690 <system_clock_init+0x90>)
 666:	4798      	blx	r3
 668:	2000      	movs	r0, #0
 66a:	4b0a      	ldr	r3, [pc, #40]	; (694 <system_clock_init+0x94>)
 66c:	4798      	blx	r3
#endif
}
 66e:	b005      	add	sp, #20
 670:	bd30      	pop	{r4, r5, pc}
 672:	46c0      	nop			; (mov r8, r8)
 674:	40000800 	.word	0x40000800
 678:	41004000 	.word	0x41004000
 67c:	000008d1 	.word	0x000008d1
 680:	00000535 	.word	0x00000535
 684:	00000571 	.word	0x00000571
 688:	00000699 	.word	0x00000699
 68c:	40000400 	.word	0x40000400
 690:	000006bd 	.word	0x000006bd
 694:	00000775 	.word	0x00000775

00000698 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
 698:	4a06      	ldr	r2, [pc, #24]	; (6b4 <system_gclk_init+0x1c>)
 69a:	6993      	ldr	r3, [r2, #24]
 69c:	2108      	movs	r1, #8
 69e:	430b      	orrs	r3, r1
 6a0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 6a2:	2201      	movs	r2, #1
 6a4:	4b04      	ldr	r3, [pc, #16]	; (6b8 <system_gclk_init+0x20>)
 6a6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 6a8:	0019      	movs	r1, r3
 6aa:	780b      	ldrb	r3, [r1, #0]
 6ac:	4213      	tst	r3, r2
 6ae:	d1fc      	bne.n	6aa <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 6b0:	4770      	bx	lr
 6b2:	46c0      	nop			; (mov r8, r8)
 6b4:	40000400 	.word	0x40000400
 6b8:	40000c00 	.word	0x40000c00

000006bc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 6bc:	b570      	push	{r4, r5, r6, lr}
 6be:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 6c0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 6c2:	780d      	ldrb	r5, [r1, #0]
 6c4:	022d      	lsls	r5, r5, #8
 6c6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 6c8:	784b      	ldrb	r3, [r1, #1]
 6ca:	2b00      	cmp	r3, #0
 6cc:	d002      	beq.n	6d4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 6ce:	2380      	movs	r3, #128	; 0x80
 6d0:	02db      	lsls	r3, r3, #11
 6d2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 6d4:	7a4b      	ldrb	r3, [r1, #9]
 6d6:	2b00      	cmp	r3, #0
 6d8:	d002      	beq.n	6e0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 6da:	2380      	movs	r3, #128	; 0x80
 6dc:	031b      	lsls	r3, r3, #12
 6de:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 6e0:	6848      	ldr	r0, [r1, #4]
 6e2:	2801      	cmp	r0, #1
 6e4:	d910      	bls.n	708 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 6e6:	1e43      	subs	r3, r0, #1
 6e8:	4218      	tst	r0, r3
 6ea:	d134      	bne.n	756 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 6ec:	2802      	cmp	r0, #2
 6ee:	d930      	bls.n	752 <system_gclk_gen_set_config+0x96>
 6f0:	2302      	movs	r3, #2
 6f2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 6f4:	3201      	adds	r2, #1
						mask <<= 1) {
 6f6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 6f8:	4298      	cmp	r0, r3
 6fa:	d8fb      	bhi.n	6f4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 6fc:	0212      	lsls	r2, r2, #8
 6fe:	4332      	orrs	r2, r6
 700:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 702:	2380      	movs	r3, #128	; 0x80
 704:	035b      	lsls	r3, r3, #13
 706:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 708:	7a0b      	ldrb	r3, [r1, #8]
 70a:	2b00      	cmp	r3, #0
 70c:	d002      	beq.n	714 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 70e:	2380      	movs	r3, #128	; 0x80
 710:	039b      	lsls	r3, r3, #14
 712:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 714:	4a13      	ldr	r2, [pc, #76]	; (764 <system_gclk_gen_set_config+0xa8>)
 716:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
 718:	b25b      	sxtb	r3, r3
 71a:	2b00      	cmp	r3, #0
 71c:	dbfb      	blt.n	716 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
 71e:	4b12      	ldr	r3, [pc, #72]	; (768 <system_gclk_gen_set_config+0xac>)
 720:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 722:	4b12      	ldr	r3, [pc, #72]	; (76c <system_gclk_gen_set_config+0xb0>)
 724:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 726:	4a0f      	ldr	r2, [pc, #60]	; (764 <system_gclk_gen_set_config+0xa8>)
 728:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 72a:	b25b      	sxtb	r3, r3
 72c:	2b00      	cmp	r3, #0
 72e:	dbfb      	blt.n	728 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 730:	4b0c      	ldr	r3, [pc, #48]	; (764 <system_gclk_gen_set_config+0xa8>)
 732:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 734:	001a      	movs	r2, r3
 736:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
 738:	b25b      	sxtb	r3, r3
 73a:	2b00      	cmp	r3, #0
 73c:	dbfb      	blt.n	736 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 73e:	4a09      	ldr	r2, [pc, #36]	; (764 <system_gclk_gen_set_config+0xa8>)
 740:	6853      	ldr	r3, [r2, #4]
 742:	2180      	movs	r1, #128	; 0x80
 744:	0249      	lsls	r1, r1, #9
 746:	400b      	ands	r3, r1
 748:	431d      	orrs	r5, r3
 74a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
 74c:	4b08      	ldr	r3, [pc, #32]	; (770 <system_gclk_gen_set_config+0xb4>)
 74e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 750:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
 752:	2200      	movs	r2, #0
 754:	e7d2      	b.n	6fc <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 756:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
 758:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 75a:	2380      	movs	r3, #128	; 0x80
 75c:	029b      	lsls	r3, r3, #10
 75e:	431d      	orrs	r5, r3
 760:	e7d2      	b.n	708 <system_gclk_gen_set_config+0x4c>
 762:	46c0      	nop			; (mov r8, r8)
 764:	40000c00 	.word	0x40000c00
 768:	000003e9 	.word	0x000003e9
 76c:	40000c08 	.word	0x40000c08
 770:	00000429 	.word	0x00000429

00000774 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 774:	b510      	push	{r4, lr}
 776:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 778:	4a0b      	ldr	r2, [pc, #44]	; (7a8 <system_gclk_gen_enable+0x34>)
 77a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 77c:	b25b      	sxtb	r3, r3
 77e:	2b00      	cmp	r3, #0
 780:	dbfb      	blt.n	77a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
 782:	4b0a      	ldr	r3, [pc, #40]	; (7ac <system_gclk_gen_enable+0x38>)
 784:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 786:	4b0a      	ldr	r3, [pc, #40]	; (7b0 <system_gclk_gen_enable+0x3c>)
 788:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 78a:	4a07      	ldr	r2, [pc, #28]	; (7a8 <system_gclk_gen_enable+0x34>)
 78c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 78e:	b25b      	sxtb	r3, r3
 790:	2b00      	cmp	r3, #0
 792:	dbfb      	blt.n	78c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 794:	4a04      	ldr	r2, [pc, #16]	; (7a8 <system_gclk_gen_enable+0x34>)
 796:	6851      	ldr	r1, [r2, #4]
 798:	2380      	movs	r3, #128	; 0x80
 79a:	025b      	lsls	r3, r3, #9
 79c:	430b      	orrs	r3, r1
 79e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
 7a0:	4b04      	ldr	r3, [pc, #16]	; (7b4 <system_gclk_gen_enable+0x40>)
 7a2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 7a4:	bd10      	pop	{r4, pc}
 7a6:	46c0      	nop			; (mov r8, r8)
 7a8:	40000c00 	.word	0x40000c00
 7ac:	000003e9 	.word	0x000003e9
 7b0:	40000c04 	.word	0x40000c04
 7b4:	00000429 	.word	0x00000429

000007b8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
 7b8:	b570      	push	{r4, r5, r6, lr}
 7ba:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 7bc:	4a1a      	ldr	r2, [pc, #104]	; (828 <system_gclk_gen_get_hz+0x70>)
 7be:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 7c0:	b25b      	sxtb	r3, r3
 7c2:	2b00      	cmp	r3, #0
 7c4:	dbfb      	blt.n	7be <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
 7c6:	4b19      	ldr	r3, [pc, #100]	; (82c <system_gclk_gen_get_hz+0x74>)
 7c8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 7ca:	4b19      	ldr	r3, [pc, #100]	; (830 <system_gclk_gen_get_hz+0x78>)
 7cc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 7ce:	4a16      	ldr	r2, [pc, #88]	; (828 <system_gclk_gen_get_hz+0x70>)
 7d0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 7d2:	b25b      	sxtb	r3, r3
 7d4:	2b00      	cmp	r3, #0
 7d6:	dbfb      	blt.n	7d0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
 7d8:	4e13      	ldr	r6, [pc, #76]	; (828 <system_gclk_gen_get_hz+0x70>)
 7da:	6870      	ldr	r0, [r6, #4]
 7dc:	04c0      	lsls	r0, r0, #19
 7de:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
 7e0:	4b14      	ldr	r3, [pc, #80]	; (834 <system_gclk_gen_get_hz+0x7c>)
 7e2:	4798      	blx	r3
 7e4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 7e6:	4b12      	ldr	r3, [pc, #72]	; (830 <system_gclk_gen_get_hz+0x78>)
 7e8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
 7ea:	6876      	ldr	r6, [r6, #4]
 7ec:	02f6      	lsls	r6, r6, #11
 7ee:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 7f0:	4b11      	ldr	r3, [pc, #68]	; (838 <system_gclk_gen_get_hz+0x80>)
 7f2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 7f4:	4a0c      	ldr	r2, [pc, #48]	; (828 <system_gclk_gen_get_hz+0x70>)
 7f6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 7f8:	b25b      	sxtb	r3, r3
 7fa:	2b00      	cmp	r3, #0
 7fc:	dbfb      	blt.n	7f6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
 7fe:	4b0a      	ldr	r3, [pc, #40]	; (828 <system_gclk_gen_get_hz+0x70>)
 800:	689c      	ldr	r4, [r3, #8]
 802:	0224      	lsls	r4, r4, #8
 804:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
 806:	4b0d      	ldr	r3, [pc, #52]	; (83c <system_gclk_gen_get_hz+0x84>)
 808:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
 80a:	2e00      	cmp	r6, #0
 80c:	d107      	bne.n	81e <system_gclk_gen_get_hz+0x66>
 80e:	2c01      	cmp	r4, #1
 810:	d907      	bls.n	822 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
 812:	0021      	movs	r1, r4
 814:	0028      	movs	r0, r5
 816:	4b0a      	ldr	r3, [pc, #40]	; (840 <system_gclk_gen_get_hz+0x88>)
 818:	4798      	blx	r3
 81a:	0005      	movs	r5, r0
 81c:	e001      	b.n	822 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
 81e:	3401      	adds	r4, #1
 820:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
 822:	0028      	movs	r0, r5
 824:	bd70      	pop	{r4, r5, r6, pc}
 826:	46c0      	nop			; (mov r8, r8)
 828:	40000c00 	.word	0x40000c00
 82c:	000003e9 	.word	0x000003e9
 830:	40000c04 	.word	0x40000c04
 834:	000004b9 	.word	0x000004b9
 838:	40000c08 	.word	0x40000c08
 83c:	00000429 	.word	0x00000429
 840:	00000bad 	.word	0x00000bad

00000844 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
 844:	b510      	push	{r4, lr}
 846:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 848:	4b06      	ldr	r3, [pc, #24]	; (864 <system_gclk_chan_enable+0x20>)
 84a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 84c:	4b06      	ldr	r3, [pc, #24]	; (868 <system_gclk_chan_enable+0x24>)
 84e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
 850:	4a06      	ldr	r2, [pc, #24]	; (86c <system_gclk_chan_enable+0x28>)
 852:	8853      	ldrh	r3, [r2, #2]
 854:	2180      	movs	r1, #128	; 0x80
 856:	01c9      	lsls	r1, r1, #7
 858:	430b      	orrs	r3, r1
 85a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
 85c:	4b04      	ldr	r3, [pc, #16]	; (870 <system_gclk_chan_enable+0x2c>)
 85e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 860:	bd10      	pop	{r4, pc}
 862:	46c0      	nop			; (mov r8, r8)
 864:	000003e9 	.word	0x000003e9
 868:	40000c02 	.word	0x40000c02
 86c:	40000c00 	.word	0x40000c00
 870:	00000429 	.word	0x00000429

00000874 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 874:	b510      	push	{r4, lr}
 876:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 878:	4b0f      	ldr	r3, [pc, #60]	; (8b8 <system_gclk_chan_disable+0x44>)
 87a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 87c:	4b0f      	ldr	r3, [pc, #60]	; (8bc <system_gclk_chan_disable+0x48>)
 87e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 880:	4a0f      	ldr	r2, [pc, #60]	; (8c0 <system_gclk_chan_disable+0x4c>)
 882:	8853      	ldrh	r3, [r2, #2]
 884:	051b      	lsls	r3, r3, #20
 886:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 888:	8853      	ldrh	r3, [r2, #2]
 88a:	490e      	ldr	r1, [pc, #56]	; (8c4 <system_gclk_chan_disable+0x50>)
 88c:	400b      	ands	r3, r1
 88e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 890:	8853      	ldrh	r3, [r2, #2]
 892:	490d      	ldr	r1, [pc, #52]	; (8c8 <system_gclk_chan_disable+0x54>)
 894:	400b      	ands	r3, r1
 896:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 898:	0011      	movs	r1, r2
 89a:	2280      	movs	r2, #128	; 0x80
 89c:	01d2      	lsls	r2, r2, #7
 89e:	884b      	ldrh	r3, [r1, #2]
 8a0:	4213      	tst	r3, r2
 8a2:	d1fc      	bne.n	89e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 8a4:	4906      	ldr	r1, [pc, #24]	; (8c0 <system_gclk_chan_disable+0x4c>)
 8a6:	884a      	ldrh	r2, [r1, #2]
 8a8:	0203      	lsls	r3, r0, #8
 8aa:	4806      	ldr	r0, [pc, #24]	; (8c4 <system_gclk_chan_disable+0x50>)
 8ac:	4002      	ands	r2, r0
 8ae:	4313      	orrs	r3, r2
 8b0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
 8b2:	4b06      	ldr	r3, [pc, #24]	; (8cc <system_gclk_chan_disable+0x58>)
 8b4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 8b6:	bd10      	pop	{r4, pc}
 8b8:	000003e9 	.word	0x000003e9
 8bc:	40000c02 	.word	0x40000c02
 8c0:	40000c00 	.word	0x40000c00
 8c4:	fffff0ff 	.word	0xfffff0ff
 8c8:	ffffbfff 	.word	0xffffbfff
 8cc:	00000429 	.word	0x00000429

000008d0 <system_gclk_chan_set_config>:
{
 8d0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 8d2:	780c      	ldrb	r4, [r1, #0]
 8d4:	0224      	lsls	r4, r4, #8
 8d6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
 8d8:	4b02      	ldr	r3, [pc, #8]	; (8e4 <system_gclk_chan_set_config+0x14>)
 8da:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 8dc:	b2a4      	uxth	r4, r4
 8de:	4b02      	ldr	r3, [pc, #8]	; (8e8 <system_gclk_chan_set_config+0x18>)
 8e0:	805c      	strh	r4, [r3, #2]
}
 8e2:	bd10      	pop	{r4, pc}
 8e4:	00000875 	.word	0x00000875
 8e8:	40000c00 	.word	0x40000c00

000008ec <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
 8ec:	b510      	push	{r4, lr}
 8ee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 8f0:	4b06      	ldr	r3, [pc, #24]	; (90c <system_gclk_chan_get_hz+0x20>)
 8f2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 8f4:	4b06      	ldr	r3, [pc, #24]	; (910 <system_gclk_chan_get_hz+0x24>)
 8f6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
 8f8:	4b06      	ldr	r3, [pc, #24]	; (914 <system_gclk_chan_get_hz+0x28>)
 8fa:	885c      	ldrh	r4, [r3, #2]
 8fc:	0524      	lsls	r4, r4, #20
 8fe:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
 900:	4b05      	ldr	r3, [pc, #20]	; (918 <system_gclk_chan_get_hz+0x2c>)
 902:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
 904:	0020      	movs	r0, r4
 906:	4b05      	ldr	r3, [pc, #20]	; (91c <system_gclk_chan_get_hz+0x30>)
 908:	4798      	blx	r3
}
 90a:	bd10      	pop	{r4, pc}
 90c:	000003e9 	.word	0x000003e9
 910:	40000c02 	.word	0x40000c02
 914:	40000c00 	.word	0x40000c00
 918:	00000429 	.word	0x00000429
 91c:	000007b9 	.word	0x000007b9

00000920 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 920:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 922:	78d3      	ldrb	r3, [r2, #3]
 924:	2b00      	cmp	r3, #0
 926:	d135      	bne.n	994 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 928:	7813      	ldrb	r3, [r2, #0]
 92a:	2b80      	cmp	r3, #128	; 0x80
 92c:	d029      	beq.n	982 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 92e:	061b      	lsls	r3, r3, #24
 930:	2480      	movs	r4, #128	; 0x80
 932:	0264      	lsls	r4, r4, #9
 934:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 936:	7854      	ldrb	r4, [r2, #1]
 938:	2502      	movs	r5, #2
 93a:	43ac      	bics	r4, r5
 93c:	d106      	bne.n	94c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 93e:	7894      	ldrb	r4, [r2, #2]
 940:	2c00      	cmp	r4, #0
 942:	d120      	bne.n	986 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
 944:	2480      	movs	r4, #128	; 0x80
 946:	02a4      	lsls	r4, r4, #10
 948:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 94a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 94c:	7854      	ldrb	r4, [r2, #1]
 94e:	3c01      	subs	r4, #1
 950:	2c01      	cmp	r4, #1
 952:	d91c      	bls.n	98e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 954:	040d      	lsls	r5, r1, #16
 956:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 958:	24a0      	movs	r4, #160	; 0xa0
 95a:	05e4      	lsls	r4, r4, #23
 95c:	432c      	orrs	r4, r5
 95e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 960:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 962:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 964:	24d0      	movs	r4, #208	; 0xd0
 966:	0624      	lsls	r4, r4, #24
 968:	432c      	orrs	r4, r5
 96a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 96c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 96e:	78d4      	ldrb	r4, [r2, #3]
 970:	2c00      	cmp	r4, #0
 972:	d122      	bne.n	9ba <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 974:	035b      	lsls	r3, r3, #13
 976:	d51c      	bpl.n	9b2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 978:	7893      	ldrb	r3, [r2, #2]
 97a:	2b01      	cmp	r3, #1
 97c:	d01e      	beq.n	9bc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
 97e:	6141      	str	r1, [r0, #20]
 980:	e017      	b.n	9b2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
 982:	2300      	movs	r3, #0
 984:	e7d7      	b.n	936 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 986:	24c0      	movs	r4, #192	; 0xc0
 988:	02e4      	lsls	r4, r4, #11
 98a:	4323      	orrs	r3, r4
 98c:	e7dd      	b.n	94a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 98e:	4c0d      	ldr	r4, [pc, #52]	; (9c4 <_system_pinmux_config+0xa4>)
 990:	4023      	ands	r3, r4
 992:	e7df      	b.n	954 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
 994:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 996:	040c      	lsls	r4, r1, #16
 998:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 99a:	23a0      	movs	r3, #160	; 0xa0
 99c:	05db      	lsls	r3, r3, #23
 99e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 9a0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 9a2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 9a4:	23d0      	movs	r3, #208	; 0xd0
 9a6:	061b      	lsls	r3, r3, #24
 9a8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 9aa:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
 9ac:	78d3      	ldrb	r3, [r2, #3]
 9ae:	2b00      	cmp	r3, #0
 9b0:	d103      	bne.n	9ba <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 9b2:	7853      	ldrb	r3, [r2, #1]
 9b4:	3b01      	subs	r3, #1
 9b6:	2b01      	cmp	r3, #1
 9b8:	d902      	bls.n	9c0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
 9ba:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
 9bc:	6181      	str	r1, [r0, #24]
 9be:	e7f8      	b.n	9b2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
 9c0:	6081      	str	r1, [r0, #8]
}
 9c2:	e7fa      	b.n	9ba <_system_pinmux_config+0x9a>
 9c4:	fffbffff 	.word	0xfffbffff

000009c8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 9c8:	b510      	push	{r4, lr}
 9ca:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 9cc:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 9ce:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
 9d0:	2900      	cmp	r1, #0
 9d2:	d104      	bne.n	9de <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
 9d4:	0943      	lsrs	r3, r0, #5
 9d6:	01db      	lsls	r3, r3, #7
 9d8:	4905      	ldr	r1, [pc, #20]	; (9f0 <system_pinmux_pin_set_config+0x28>)
 9da:	468c      	mov	ip, r1
 9dc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 9de:	241f      	movs	r4, #31
 9e0:	4020      	ands	r0, r4
 9e2:	2101      	movs	r1, #1
 9e4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
 9e6:	0018      	movs	r0, r3
 9e8:	4b02      	ldr	r3, [pc, #8]	; (9f4 <system_pinmux_pin_set_config+0x2c>)
 9ea:	4798      	blx	r3
}
 9ec:	bd10      	pop	{r4, pc}
 9ee:	46c0      	nop			; (mov r8, r8)
 9f0:	41004400 	.word	0x41004400
 9f4:	00000921 	.word	0x00000921

000009f8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 9f8:	4770      	bx	lr
	...

000009fc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 9fc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 9fe:	4b05      	ldr	r3, [pc, #20]	; (a14 <system_init+0x18>)
 a00:	4798      	blx	r3

	/* Initialize board hardware */

	system_board_init();
 a02:	4b05      	ldr	r3, [pc, #20]	; (a18 <system_init+0x1c>)
 a04:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 a06:	4b05      	ldr	r3, [pc, #20]	; (a1c <system_init+0x20>)
 a08:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 a0a:	4b05      	ldr	r3, [pc, #20]	; (a20 <system_init+0x24>)
 a0c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 a0e:	4b05      	ldr	r3, [pc, #20]	; (a24 <system_init+0x28>)
 a10:	4798      	blx	r3
}
 a12:	bd10      	pop	{r4, pc}
 a14:	00000601 	.word	0x00000601
 a18:	00000391 	.word	0x00000391
 a1c:	000009f9 	.word	0x000009f9
 a20:	00000189 	.word	0x00000189
 a24:	000009f9 	.word	0x000009f9

00000a28 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 a28:	e7fe      	b.n	a28 <Dummy_Handler>
	...

00000a2c <Reset_Handler>:
{
 a2c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 a2e:	4a1a      	ldr	r2, [pc, #104]	; (a98 <Reset_Handler+0x6c>)
 a30:	4b1a      	ldr	r3, [pc, #104]	; (a9c <Reset_Handler+0x70>)
 a32:	429a      	cmp	r2, r3
 a34:	d011      	beq.n	a5a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 a36:	001a      	movs	r2, r3
 a38:	4b19      	ldr	r3, [pc, #100]	; (aa0 <Reset_Handler+0x74>)
 a3a:	429a      	cmp	r2, r3
 a3c:	d20d      	bcs.n	a5a <Reset_Handler+0x2e>
 a3e:	4a19      	ldr	r2, [pc, #100]	; (aa4 <Reset_Handler+0x78>)
 a40:	3303      	adds	r3, #3
 a42:	1a9b      	subs	r3, r3, r2
 a44:	089b      	lsrs	r3, r3, #2
 a46:	3301      	adds	r3, #1
 a48:	009b      	lsls	r3, r3, #2
 a4a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 a4c:	4813      	ldr	r0, [pc, #76]	; (a9c <Reset_Handler+0x70>)
 a4e:	4912      	ldr	r1, [pc, #72]	; (a98 <Reset_Handler+0x6c>)
 a50:	588c      	ldr	r4, [r1, r2]
 a52:	5084      	str	r4, [r0, r2]
 a54:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 a56:	429a      	cmp	r2, r3
 a58:	d1fa      	bne.n	a50 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 a5a:	4a13      	ldr	r2, [pc, #76]	; (aa8 <Reset_Handler+0x7c>)
 a5c:	4b13      	ldr	r3, [pc, #76]	; (aac <Reset_Handler+0x80>)
 a5e:	429a      	cmp	r2, r3
 a60:	d20a      	bcs.n	a78 <Reset_Handler+0x4c>
 a62:	43d3      	mvns	r3, r2
 a64:	4911      	ldr	r1, [pc, #68]	; (aac <Reset_Handler+0x80>)
 a66:	185b      	adds	r3, r3, r1
 a68:	2103      	movs	r1, #3
 a6a:	438b      	bics	r3, r1
 a6c:	3304      	adds	r3, #4
 a6e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 a70:	2100      	movs	r1, #0
 a72:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 a74:	4293      	cmp	r3, r2
 a76:	d1fc      	bne.n	a72 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 a78:	4a0d      	ldr	r2, [pc, #52]	; (ab0 <Reset_Handler+0x84>)
 a7a:	21ff      	movs	r1, #255	; 0xff
 a7c:	4b0d      	ldr	r3, [pc, #52]	; (ab4 <Reset_Handler+0x88>)
 a7e:	438b      	bics	r3, r1
 a80:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
 a82:	4a0d      	ldr	r2, [pc, #52]	; (ab8 <Reset_Handler+0x8c>)
 a84:	6853      	ldr	r3, [r2, #4]
 a86:	397f      	subs	r1, #127	; 0x7f
 a88:	430b      	orrs	r3, r1
 a8a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 a8c:	4b0b      	ldr	r3, [pc, #44]	; (abc <Reset_Handler+0x90>)
 a8e:	4798      	blx	r3
        main();
 a90:	4b0b      	ldr	r3, [pc, #44]	; (ac0 <Reset_Handler+0x94>)
 a92:	4798      	blx	r3
 a94:	e7fe      	b.n	a94 <Reset_Handler+0x68>
 a96:	46c0      	nop			; (mov r8, r8)
 a98:	00000d6c 	.word	0x00000d6c
 a9c:	20000000 	.word	0x20000000
 aa0:	2000000c 	.word	0x2000000c
 aa4:	20000004 	.word	0x20000004
 aa8:	2000000c 	.word	0x2000000c
 aac:	200000a0 	.word	0x200000a0
 ab0:	e000ed00 	.word	0xe000ed00
 ab4:	00000000 	.word	0x00000000
 ab8:	41004000 	.word	0x41004000
 abc:	00000cc5 	.word	0x00000cc5
 ac0:	00000b99 	.word	0x00000b99

00000ac4 <extint_detection_callback>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
void extint_detection_callback(void)
{
 ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (port_base->IN.reg & pin_mask);
 ac6:	4b13      	ldr	r3, [pc, #76]	; (b14 <extint_detection_callback+0x50>)
 ac8:	6a1b      	ldr	r3, [r3, #32]
	if (level) {
 aca:	041b      	lsls	r3, r3, #16
 acc:	d517      	bpl.n	afe <extint_detection_callback+0x3a>
		port_base->OUTSET.reg = pin_mask;
 ace:	2280      	movs	r2, #128	; 0x80
 ad0:	01d2      	lsls	r2, r2, #7
 ad2:	4b10      	ldr	r3, [pc, #64]	; (b14 <extint_detection_callback+0x50>)
 ad4:	619a      	str	r2, [r3, #24]
 ad6:	2405      	movs	r4, #5
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
 ad8:	4f0e      	ldr	r7, [pc, #56]	; (b14 <extint_detection_callback+0x50>)
 ada:	2680      	movs	r6, #128	; 0x80
 adc:	01f6      	lsls	r6, r6, #7
	bool button_pin_state = port_pin_get_input_level(BUTTON_0_PIN);
	port_pin_set_output_level(LED_0_PIN, button_pin_state);
	for (int i = 0; i<5; i++)
	{
		port_pin_toggle_output_level(LED_0_PIN);
		delay_ms(100);
 ade:	4d0e      	ldr	r5, [pc, #56]	; (b18 <extint_detection_callback+0x54>)
 ae0:	61fe      	str	r6, [r7, #28]
 ae2:	2064      	movs	r0, #100	; 0x64
 ae4:	47a8      	blx	r5
 ae6:	3c01      	subs	r4, #1
	for (int i = 0; i<5; i++)
 ae8:	2c00      	cmp	r4, #0
 aea:	d1f9      	bne.n	ae0 <extint_detection_callback+0x1c>
	return (port_base->IN.reg & pin_mask);
 aec:	4b09      	ldr	r3, [pc, #36]	; (b14 <extint_detection_callback+0x50>)
 aee:	6a1b      	ldr	r3, [r3, #32]
	if (level) {
 af0:	041b      	lsls	r3, r3, #16
 af2:	d409      	bmi.n	b08 <extint_detection_callback+0x44>
		port_base->OUTCLR.reg = pin_mask;
 af4:	2280      	movs	r2, #128	; 0x80
 af6:	01d2      	lsls	r2, r2, #7
 af8:	4b06      	ldr	r3, [pc, #24]	; (b14 <extint_detection_callback+0x50>)
 afa:	615a      	str	r2, [r3, #20]
	}
	button_pin_state = port_pin_get_input_level(BUTTON_0_PIN);
	port_pin_set_output_level(LED_0_PIN, button_pin_state);
 }
 afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 afe:	2280      	movs	r2, #128	; 0x80
 b00:	01d2      	lsls	r2, r2, #7
 b02:	4b04      	ldr	r3, [pc, #16]	; (b14 <extint_detection_callback+0x50>)
 b04:	615a      	str	r2, [r3, #20]
 b06:	e7e6      	b.n	ad6 <extint_detection_callback+0x12>
		port_base->OUTSET.reg = pin_mask;
 b08:	2280      	movs	r2, #128	; 0x80
 b0a:	01d2      	lsls	r2, r2, #7
 b0c:	4b01      	ldr	r3, [pc, #4]	; (b14 <extint_detection_callback+0x50>)
 b0e:	619a      	str	r2, [r3, #24]
 b10:	e7f4      	b.n	afc <extint_detection_callback+0x38>
 b12:	46c0      	nop			; (mov r8, r8)
 b14:	41004400 	.word	0x41004400
 b18:	00000145 	.word	0x00000145

00000b1c <configure_extint_channel>:
{
 b1c:	b510      	push	{r4, lr}
 b1e:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
 b20:	ac01      	add	r4, sp, #4
 b22:	0020      	movs	r0, r4
 b24:	4b07      	ldr	r3, [pc, #28]	; (b44 <configure_extint_channel+0x28>)
 b26:	4798      	blx	r3
	config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
 b28:	230f      	movs	r3, #15
 b2a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
 b2c:	2300      	movs	r3, #0
 b2e:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
 b30:	3301      	adds	r3, #1
 b32:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
 b34:	3302      	adds	r3, #2
 b36:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
 b38:	0021      	movs	r1, r4
 b3a:	200f      	movs	r0, #15
 b3c:	4b02      	ldr	r3, [pc, #8]	; (b48 <configure_extint_channel+0x2c>)
 b3e:	4798      	blx	r3
}
 b40:	b004      	add	sp, #16
 b42:	bd10      	pop	{r4, pc}
 b44:	000001f5 	.word	0x000001f5
 b48:	00000209 	.word	0x00000209

00000b4c <configure_extint_callbacks>:
{
 b4c:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
 b4e:	2200      	movs	r2, #0
 b50:	210f      	movs	r1, #15
 b52:	4804      	ldr	r0, [pc, #16]	; (b64 <configure_extint_callbacks+0x18>)
 b54:	4b04      	ldr	r3, [pc, #16]	; (b68 <configure_extint_callbacks+0x1c>)
 b56:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
 b58:	2100      	movs	r1, #0
 b5a:	200f      	movs	r0, #15
 b5c:	4b03      	ldr	r3, [pc, #12]	; (b6c <configure_extint_callbacks+0x20>)
 b5e:	4798      	blx	r3
}
 b60:	bd10      	pop	{r4, pc}
 b62:	46c0      	nop			; (mov r8, r8)
 b64:	00000ac5 	.word	0x00000ac5
 b68:	000002a5 	.word	0x000002a5
 b6c:	000002d1 	.word	0x000002d1

00000b70 <SysTick_Handler>:
 * @note				- 
 ******************************************************************************************************/
void SysTick_Handler(void)
{
	// Your code goes here
}
 b70:	4770      	bx	lr
	...

00000b74 <sys_config>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
void sys_config(void)
{
 b74:	b510      	push	{r4, lr}

 	configure_extint_channel();
 b76:	4b05      	ldr	r3, [pc, #20]	; (b8c <sys_config+0x18>)
 b78:	4798      	blx	r3
 	configure_extint_callbacks();
 b7a:	4b05      	ldr	r3, [pc, #20]	; (b90 <sys_config+0x1c>)
 b7c:	4798      	blx	r3
	cpu_irq_enable();
 b7e:	2201      	movs	r2, #1
 b80:	4b04      	ldr	r3, [pc, #16]	; (b94 <sys_config+0x20>)
 b82:	701a      	strb	r2, [r3, #0]
 b84:	f3bf 8f5f 	dmb	sy
 b88:	b662      	cpsie	i
 	system_interrupt_enable_global();
 b8a:	bd10      	pop	{r4, pc}
 b8c:	00000b1d 	.word	0x00000b1d
 b90:	00000b4d 	.word	0x00000b4d
 b94:	20000008 	.word	0x20000008

00000b98 <main>:
 * @note				- MCU specific definitions in (src->common2->boards) -> user_board.h, init routines in init.c
 *	                    - Peripheral config in Peripherals.c (src)
 *						- EXTINT will fire callback asynchronously. (Button0 press -> interrupt callback -> LED0 toggle)
 ******************************************************************************************************/
int main (void)
{
 b98:	b510      	push	{r4, lr}
	system_init();
 b9a:	4b02      	ldr	r3, [pc, #8]	; (ba4 <main+0xc>)
 b9c:	4798      	blx	r3
	sys_config();
 b9e:	4b02      	ldr	r3, [pc, #8]	; (ba8 <main+0x10>)
 ba0:	4798      	blx	r3
 ba2:	e7fe      	b.n	ba2 <main+0xa>
 ba4:	000009fd 	.word	0x000009fd
 ba8:	00000b75 	.word	0x00000b75

00000bac <__udivsi3>:
 bac:	2200      	movs	r2, #0
 bae:	0843      	lsrs	r3, r0, #1
 bb0:	428b      	cmp	r3, r1
 bb2:	d374      	bcc.n	c9e <__udivsi3+0xf2>
 bb4:	0903      	lsrs	r3, r0, #4
 bb6:	428b      	cmp	r3, r1
 bb8:	d35f      	bcc.n	c7a <__udivsi3+0xce>
 bba:	0a03      	lsrs	r3, r0, #8
 bbc:	428b      	cmp	r3, r1
 bbe:	d344      	bcc.n	c4a <__udivsi3+0x9e>
 bc0:	0b03      	lsrs	r3, r0, #12
 bc2:	428b      	cmp	r3, r1
 bc4:	d328      	bcc.n	c18 <__udivsi3+0x6c>
 bc6:	0c03      	lsrs	r3, r0, #16
 bc8:	428b      	cmp	r3, r1
 bca:	d30d      	bcc.n	be8 <__udivsi3+0x3c>
 bcc:	22ff      	movs	r2, #255	; 0xff
 bce:	0209      	lsls	r1, r1, #8
 bd0:	ba12      	rev	r2, r2
 bd2:	0c03      	lsrs	r3, r0, #16
 bd4:	428b      	cmp	r3, r1
 bd6:	d302      	bcc.n	bde <__udivsi3+0x32>
 bd8:	1212      	asrs	r2, r2, #8
 bda:	0209      	lsls	r1, r1, #8
 bdc:	d065      	beq.n	caa <__udivsi3+0xfe>
 bde:	0b03      	lsrs	r3, r0, #12
 be0:	428b      	cmp	r3, r1
 be2:	d319      	bcc.n	c18 <__udivsi3+0x6c>
 be4:	e000      	b.n	be8 <__udivsi3+0x3c>
 be6:	0a09      	lsrs	r1, r1, #8
 be8:	0bc3      	lsrs	r3, r0, #15
 bea:	428b      	cmp	r3, r1
 bec:	d301      	bcc.n	bf2 <__udivsi3+0x46>
 bee:	03cb      	lsls	r3, r1, #15
 bf0:	1ac0      	subs	r0, r0, r3
 bf2:	4152      	adcs	r2, r2
 bf4:	0b83      	lsrs	r3, r0, #14
 bf6:	428b      	cmp	r3, r1
 bf8:	d301      	bcc.n	bfe <__udivsi3+0x52>
 bfa:	038b      	lsls	r3, r1, #14
 bfc:	1ac0      	subs	r0, r0, r3
 bfe:	4152      	adcs	r2, r2
 c00:	0b43      	lsrs	r3, r0, #13
 c02:	428b      	cmp	r3, r1
 c04:	d301      	bcc.n	c0a <__udivsi3+0x5e>
 c06:	034b      	lsls	r3, r1, #13
 c08:	1ac0      	subs	r0, r0, r3
 c0a:	4152      	adcs	r2, r2
 c0c:	0b03      	lsrs	r3, r0, #12
 c0e:	428b      	cmp	r3, r1
 c10:	d301      	bcc.n	c16 <__udivsi3+0x6a>
 c12:	030b      	lsls	r3, r1, #12
 c14:	1ac0      	subs	r0, r0, r3
 c16:	4152      	adcs	r2, r2
 c18:	0ac3      	lsrs	r3, r0, #11
 c1a:	428b      	cmp	r3, r1
 c1c:	d301      	bcc.n	c22 <__udivsi3+0x76>
 c1e:	02cb      	lsls	r3, r1, #11
 c20:	1ac0      	subs	r0, r0, r3
 c22:	4152      	adcs	r2, r2
 c24:	0a83      	lsrs	r3, r0, #10
 c26:	428b      	cmp	r3, r1
 c28:	d301      	bcc.n	c2e <__udivsi3+0x82>
 c2a:	028b      	lsls	r3, r1, #10
 c2c:	1ac0      	subs	r0, r0, r3
 c2e:	4152      	adcs	r2, r2
 c30:	0a43      	lsrs	r3, r0, #9
 c32:	428b      	cmp	r3, r1
 c34:	d301      	bcc.n	c3a <__udivsi3+0x8e>
 c36:	024b      	lsls	r3, r1, #9
 c38:	1ac0      	subs	r0, r0, r3
 c3a:	4152      	adcs	r2, r2
 c3c:	0a03      	lsrs	r3, r0, #8
 c3e:	428b      	cmp	r3, r1
 c40:	d301      	bcc.n	c46 <__udivsi3+0x9a>
 c42:	020b      	lsls	r3, r1, #8
 c44:	1ac0      	subs	r0, r0, r3
 c46:	4152      	adcs	r2, r2
 c48:	d2cd      	bcs.n	be6 <__udivsi3+0x3a>
 c4a:	09c3      	lsrs	r3, r0, #7
 c4c:	428b      	cmp	r3, r1
 c4e:	d301      	bcc.n	c54 <__udivsi3+0xa8>
 c50:	01cb      	lsls	r3, r1, #7
 c52:	1ac0      	subs	r0, r0, r3
 c54:	4152      	adcs	r2, r2
 c56:	0983      	lsrs	r3, r0, #6
 c58:	428b      	cmp	r3, r1
 c5a:	d301      	bcc.n	c60 <__udivsi3+0xb4>
 c5c:	018b      	lsls	r3, r1, #6
 c5e:	1ac0      	subs	r0, r0, r3
 c60:	4152      	adcs	r2, r2
 c62:	0943      	lsrs	r3, r0, #5
 c64:	428b      	cmp	r3, r1
 c66:	d301      	bcc.n	c6c <__udivsi3+0xc0>
 c68:	014b      	lsls	r3, r1, #5
 c6a:	1ac0      	subs	r0, r0, r3
 c6c:	4152      	adcs	r2, r2
 c6e:	0903      	lsrs	r3, r0, #4
 c70:	428b      	cmp	r3, r1
 c72:	d301      	bcc.n	c78 <__udivsi3+0xcc>
 c74:	010b      	lsls	r3, r1, #4
 c76:	1ac0      	subs	r0, r0, r3
 c78:	4152      	adcs	r2, r2
 c7a:	08c3      	lsrs	r3, r0, #3
 c7c:	428b      	cmp	r3, r1
 c7e:	d301      	bcc.n	c84 <__udivsi3+0xd8>
 c80:	00cb      	lsls	r3, r1, #3
 c82:	1ac0      	subs	r0, r0, r3
 c84:	4152      	adcs	r2, r2
 c86:	0883      	lsrs	r3, r0, #2
 c88:	428b      	cmp	r3, r1
 c8a:	d301      	bcc.n	c90 <__udivsi3+0xe4>
 c8c:	008b      	lsls	r3, r1, #2
 c8e:	1ac0      	subs	r0, r0, r3
 c90:	4152      	adcs	r2, r2
 c92:	0843      	lsrs	r3, r0, #1
 c94:	428b      	cmp	r3, r1
 c96:	d301      	bcc.n	c9c <__udivsi3+0xf0>
 c98:	004b      	lsls	r3, r1, #1
 c9a:	1ac0      	subs	r0, r0, r3
 c9c:	4152      	adcs	r2, r2
 c9e:	1a41      	subs	r1, r0, r1
 ca0:	d200      	bcs.n	ca4 <__udivsi3+0xf8>
 ca2:	4601      	mov	r1, r0
 ca4:	4152      	adcs	r2, r2
 ca6:	4610      	mov	r0, r2
 ca8:	4770      	bx	lr
 caa:	e7ff      	b.n	cac <__udivsi3+0x100>
 cac:	b501      	push	{r0, lr}
 cae:	2000      	movs	r0, #0
 cb0:	f000 f806 	bl	cc0 <__aeabi_idiv0>
 cb4:	bd02      	pop	{r1, pc}
 cb6:	46c0      	nop			; (mov r8, r8)

00000cb8 <__aeabi_uidivmod>:
 cb8:	2900      	cmp	r1, #0
 cba:	d0f7      	beq.n	cac <__udivsi3+0x100>
 cbc:	e776      	b.n	bac <__udivsi3>
 cbe:	4770      	bx	lr

00000cc0 <__aeabi_idiv0>:
 cc0:	4770      	bx	lr
 cc2:	46c0      	nop			; (mov r8, r8)

00000cc4 <__libc_init_array>:
 cc4:	b570      	push	{r4, r5, r6, lr}
 cc6:	2600      	movs	r6, #0
 cc8:	4d0c      	ldr	r5, [pc, #48]	; (cfc <__libc_init_array+0x38>)
 cca:	4c0d      	ldr	r4, [pc, #52]	; (d00 <__libc_init_array+0x3c>)
 ccc:	1b64      	subs	r4, r4, r5
 cce:	10a4      	asrs	r4, r4, #2
 cd0:	42a6      	cmp	r6, r4
 cd2:	d109      	bne.n	ce8 <__libc_init_array+0x24>
 cd4:	2600      	movs	r6, #0
 cd6:	f000 f839 	bl	d4c <_init>
 cda:	4d0a      	ldr	r5, [pc, #40]	; (d04 <__libc_init_array+0x40>)
 cdc:	4c0a      	ldr	r4, [pc, #40]	; (d08 <__libc_init_array+0x44>)
 cde:	1b64      	subs	r4, r4, r5
 ce0:	10a4      	asrs	r4, r4, #2
 ce2:	42a6      	cmp	r6, r4
 ce4:	d105      	bne.n	cf2 <__libc_init_array+0x2e>
 ce6:	bd70      	pop	{r4, r5, r6, pc}
 ce8:	00b3      	lsls	r3, r6, #2
 cea:	58eb      	ldr	r3, [r5, r3]
 cec:	4798      	blx	r3
 cee:	3601      	adds	r6, #1
 cf0:	e7ee      	b.n	cd0 <__libc_init_array+0xc>
 cf2:	00b3      	lsls	r3, r6, #2
 cf4:	58eb      	ldr	r3, [r5, r3]
 cf6:	4798      	blx	r3
 cf8:	3601      	adds	r6, #1
 cfa:	e7f2      	b.n	ce2 <__libc_init_array+0x1e>
 cfc:	00000d58 	.word	0x00000d58
 d00:	00000d58 	.word	0x00000d58
 d04:	00000d58 	.word	0x00000d58
 d08:	00000d5c 	.word	0x00000d5c
 d0c:	000004ca 	.word	0x000004ca
 d10:	000004c6 	.word	0x000004c6
 d14:	000004c6 	.word	0x000004c6
 d18:	00000516 	.word	0x00000516
 d1c:	00000516 	.word	0x00000516
 d20:	000004de 	.word	0x000004de
 d24:	000004d0 	.word	0x000004d0
 d28:	000004e4 	.word	0x000004e4
 d2c:	0000059c 	.word	0x0000059c
 d30:	0000057c 	.word	0x0000057c
 d34:	0000057c 	.word	0x0000057c
 d38:	000005ec 	.word	0x000005ec
 d3c:	0000058e 	.word	0x0000058e
 d40:	000005aa 	.word	0x000005aa
 d44:	00000580 	.word	0x00000580
 d48:	000005b8 	.word	0x000005b8

00000d4c <_init>:
 d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 d4e:	46c0      	nop			; (mov r8, r8)
 d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 d52:	bc08      	pop	{r3}
 d54:	469e      	mov	lr, r3
 d56:	4770      	bx	lr

00000d58 <__init_array_start>:
 d58:	000000cd 	.word	0x000000cd

00000d5c <_fini>:
 d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 d5e:	46c0      	nop			; (mov r8, r8)
 d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 d62:	bc08      	pop	{r3}
 d64:	469e      	mov	lr, r3
 d66:	4770      	bx	lr

00000d68 <__fini_array_start>:
 d68:	000000a5 	.word	0x000000a5
