
External_Interrupt_Test_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cb4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00000cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007c  2000000c  00000cc0  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000088  00000d3c  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00012650  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002702  00000000  00000000  000326dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002213  00000000  00000000  00034ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000318  00000000  00000000  00036ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000300  00000000  00000000  0003730a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00011f02  00000000  00000000  0003760a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000822f  00000000  00000000  0004950c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005e2b1  00000000  00000000  0005173b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000069c  00000000  00000000  000af9ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	88 20 00 20 35 09 00 00 31 09 00 00 31 09 00 00     . . 5...1...1...
	...
  2c:	31 09 00 00 00 00 00 00 00 00 00 00 31 09 00 00     1...........1...
  3c:	6d 0a 00 00 31 09 00 00 31 09 00 00 31 09 00 00     m...1...1...1...
  4c:	31 09 00 00 c5 02 00 00 31 09 00 00 31 09 00 00     1.......1...1...
  5c:	31 09 00 00 31 09 00 00 31 09 00 00 31 09 00 00     1...1...1...1...
  6c:	31 09 00 00 31 09 00 00 31 09 00 00 31 09 00 00     1...1...1...1...
  7c:	31 09 00 00 31 09 00 00 31 09 00 00 31 09 00 00     1...1...1...1...
  8c:	31 09 00 00 31 09 00 00 31 09 00 00 31 09 00 00     1...1...1...1...
  9c:	31 09 00 00 31 09 00 00                             1...1...

000000a4 <__do_global_dtors_aux>:
  a4:	b510      	push	{r4, lr}
  a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
  a8:	7823      	ldrb	r3, [r4, #0]
  aa:	2b00      	cmp	r3, #0
  ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
  ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
  b0:	2b00      	cmp	r3, #0
  b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
  b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
  b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
  b8:	bf00      	nop
  ba:	2301      	movs	r3, #1
  bc:	7023      	strb	r3, [r4, #0]
  be:	bd10      	pop	{r4, pc}
  c0:	2000000c 	.word	0x2000000c
  c4:	00000000 	.word	0x00000000
  c8:	00000cb4 	.word	0x00000cb4

000000cc <frame_dummy>:
  cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
  ce:	b510      	push	{r4, lr}
  d0:	2b00      	cmp	r3, #0
  d2:	d003      	beq.n	dc <frame_dummy+0x10>
  d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
  d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
  d8:	e000      	b.n	dc <frame_dummy+0x10>
  da:	bf00      	nop
  dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
  de:	6803      	ldr	r3, [r0, #0]
  e0:	2b00      	cmp	r3, #0
  e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
  e4:	bd10      	pop	{r4, pc}
  e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
  e8:	2b00      	cmp	r3, #0
  ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
  ec:	4798      	blx	r3
  ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
  f0:	00000000 	.word	0x00000000
  f4:	20000010 	.word	0x20000010
  f8:	00000cb4 	.word	0x00000cb4
  fc:	00000cb4 	.word	0x00000cb4
 100:	00000000 	.word	0x00000000

00000104 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
 104:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
 106:	2000      	movs	r0, #0
 108:	4b08      	ldr	r3, [pc, #32]	; (12c <delay_init+0x28>)
 10a:	4798      	blx	r3
 10c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
 10e:	4c08      	ldr	r4, [pc, #32]	; (130 <delay_init+0x2c>)
 110:	21fa      	movs	r1, #250	; 0xfa
 112:	0089      	lsls	r1, r1, #2
 114:	47a0      	blx	r4
 116:	4b07      	ldr	r3, [pc, #28]	; (134 <delay_init+0x30>)
 118:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
 11a:	4907      	ldr	r1, [pc, #28]	; (138 <delay_init+0x34>)
 11c:	0028      	movs	r0, r5
 11e:	47a0      	blx	r4
 120:	4b06      	ldr	r3, [pc, #24]	; (13c <delay_init+0x38>)
 122:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 124:	2205      	movs	r2, #5
 126:	4b06      	ldr	r3, [pc, #24]	; (140 <delay_init+0x3c>)
 128:	601a      	str	r2, [r3, #0]
}
 12a:	bd70      	pop	{r4, r5, r6, pc}
 12c:	000006c1 	.word	0x000006c1
 130:	00000af5 	.word	0x00000af5
 134:	20000000 	.word	0x20000000
 138:	000f4240 	.word	0x000f4240
 13c:	20000004 	.word	0x20000004
 140:	e000e010 	.word	0xe000e010

00000144 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
 144:	4a04      	ldr	r2, [pc, #16]	; (158 <_extint_enable+0x14>)
 146:	7813      	ldrb	r3, [r2, #0]
 148:	2102      	movs	r1, #2
 14a:	430b      	orrs	r3, r1
 14c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
 14e:	7853      	ldrb	r3, [r2, #1]
 150:	b25b      	sxtb	r3, r3
 152:	2b00      	cmp	r3, #0
 154:	dbfb      	blt.n	14e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
 156:	4770      	bx	lr
 158:	40001800 	.word	0x40001800

0000015c <_system_extint_init>:
{
 15c:	b500      	push	{lr}
 15e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
 160:	4a12      	ldr	r2, [pc, #72]	; (1ac <_system_extint_init+0x50>)
 162:	6993      	ldr	r3, [r2, #24]
 164:	2140      	movs	r1, #64	; 0x40
 166:	430b      	orrs	r3, r1
 168:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
 16a:	a901      	add	r1, sp, #4
 16c:	2300      	movs	r3, #0
 16e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
 170:	2003      	movs	r0, #3
 172:	4b0f      	ldr	r3, [pc, #60]	; (1b0 <_system_extint_init+0x54>)
 174:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
 176:	2003      	movs	r0, #3
 178:	4b0e      	ldr	r3, [pc, #56]	; (1b4 <_system_extint_init+0x58>)
 17a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
 17c:	4a0e      	ldr	r2, [pc, #56]	; (1b8 <_system_extint_init+0x5c>)
 17e:	7813      	ldrb	r3, [r2, #0]
 180:	2101      	movs	r1, #1
 182:	430b      	orrs	r3, r1
 184:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
 186:	7853      	ldrb	r3, [r2, #1]
 188:	b25b      	sxtb	r3, r3
 18a:	2b00      	cmp	r3, #0
 18c:	dbfb      	blt.n	186 <_system_extint_init+0x2a>
 18e:	4b0b      	ldr	r3, [pc, #44]	; (1bc <_system_extint_init+0x60>)
 190:	0019      	movs	r1, r3
 192:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
 194:	2200      	movs	r2, #0
 196:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
 198:	4299      	cmp	r1, r3
 19a:	d1fc      	bne.n	196 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
 19c:	2210      	movs	r2, #16
 19e:	4b08      	ldr	r3, [pc, #32]	; (1c0 <_system_extint_init+0x64>)
 1a0:	601a      	str	r2, [r3, #0]
	_extint_enable();
 1a2:	4b08      	ldr	r3, [pc, #32]	; (1c4 <_system_extint_init+0x68>)
 1a4:	4798      	blx	r3
}
 1a6:	b003      	add	sp, #12
 1a8:	bd00      	pop	{pc}
 1aa:	46c0      	nop			; (mov r8, r8)
 1ac:	40000400 	.word	0x40000400
 1b0:	000007d9 	.word	0x000007d9
 1b4:	0000074d 	.word	0x0000074d
 1b8:	40001800 	.word	0x40001800
 1bc:	20000044 	.word	0x20000044
 1c0:	e000e100 	.word	0xe000e100
 1c4:	00000145 	.word	0x00000145

000001c8 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
 1c8:	2300      	movs	r3, #0
 1ca:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
 1cc:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
 1ce:	2201      	movs	r2, #1
 1d0:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
 1d2:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
 1d4:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
 1d6:	3302      	adds	r3, #2
 1d8:	72c3      	strb	r3, [r0, #11]
}
 1da:	4770      	bx	lr

000001dc <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
 1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 1de:	b083      	sub	sp, #12
 1e0:	0005      	movs	r5, r0
 1e2:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
 1e4:	a901      	add	r1, sp, #4
 1e6:	2300      	movs	r3, #0
 1e8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
 1ea:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
 1ec:	7923      	ldrb	r3, [r4, #4]
 1ee:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
 1f0:	7a23      	ldrb	r3, [r4, #8]
 1f2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
 1f4:	7820      	ldrb	r0, [r4, #0]
 1f6:	4b15      	ldr	r3, [pc, #84]	; (24c <extint_chan_set_config+0x70>)
 1f8:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
 1fa:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
 1fc:	2d1f      	cmp	r5, #31
 1fe:	d800      	bhi.n	202 <extint_chan_set_config+0x26>
		return eics[eic_index];
 200:	4813      	ldr	r0, [pc, #76]	; (250 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
 202:	2207      	movs	r2, #7
 204:	402a      	ands	r2, r5
 206:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
 208:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
 20a:	7aa3      	ldrb	r3, [r4, #10]
 20c:	2b00      	cmp	r3, #0
 20e:	d001      	beq.n	214 <extint_chan_set_config+0x38>
 210:	2308      	movs	r3, #8
 212:	431f      	orrs	r7, r3
 214:	08eb      	lsrs	r3, r5, #3
 216:	009b      	lsls	r3, r3, #2
 218:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
 21a:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
 21c:	260f      	movs	r6, #15
 21e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
 220:	43b1      	bics	r1, r6
			(new_config << config_pos);
 222:	4097      	lsls	r7, r2
 224:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
 226:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
 228:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
 22a:	7a63      	ldrb	r3, [r4, #9]
 22c:	2b00      	cmp	r3, #0
 22e:	d106      	bne.n	23e <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
 230:	6943      	ldr	r3, [r0, #20]
 232:	2201      	movs	r2, #1
 234:	40aa      	lsls	r2, r5
 236:	4393      	bics	r3, r2
 238:	6143      	str	r3, [r0, #20]
	}
}
 23a:	b003      	add	sp, #12
 23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
 23e:	6942      	ldr	r2, [r0, #20]
 240:	2301      	movs	r3, #1
 242:	40ab      	lsls	r3, r5
 244:	4313      	orrs	r3, r2
 246:	6143      	str	r3, [r0, #20]
 248:	e7f7      	b.n	23a <extint_chan_set_config+0x5e>
 24a:	46c0      	nop			; (mov r8, r8)
 24c:	000008d1 	.word	0x000008d1
 250:	40001800 	.word	0x40001800

00000254 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 254:	b500      	push	{lr}
 256:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
 258:	ab01      	add	r3, sp, #4
 25a:	2280      	movs	r2, #128	; 0x80
 25c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 25e:	780a      	ldrb	r2, [r1, #0]
 260:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 262:	784a      	ldrb	r2, [r1, #1]
 264:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 266:	788a      	ldrb	r2, [r1, #2]
 268:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 26a:	0019      	movs	r1, r3
 26c:	4b01      	ldr	r3, [pc, #4]	; (274 <port_pin_set_config+0x20>)
 26e:	4798      	blx	r3
}
 270:	b003      	add	sp, #12
 272:	bd00      	pop	{pc}
 274:	000008d1 	.word	0x000008d1

00000278 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 278:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
 27a:	2a00      	cmp	r2, #0
 27c:	d001      	beq.n	282 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
 27e:	0018      	movs	r0, r3
 280:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
 282:	008b      	lsls	r3, r1, #2
 284:	4a06      	ldr	r2, [pc, #24]	; (2a0 <extint_register_callback+0x28>)
 286:	589b      	ldr	r3, [r3, r2]
 288:	2b00      	cmp	r3, #0
 28a:	d003      	beq.n	294 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
 28c:	4283      	cmp	r3, r0
 28e:	d005      	beq.n	29c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
 290:	231d      	movs	r3, #29
 292:	e7f4      	b.n	27e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
 294:	0089      	lsls	r1, r1, #2
 296:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
 298:	2300      	movs	r3, #0
 29a:	e7f0      	b.n	27e <extint_register_callback+0x6>
		return STATUS_OK;
 29c:	2300      	movs	r3, #0
 29e:	e7ee      	b.n	27e <extint_register_callback+0x6>
 2a0:	20000044 	.word	0x20000044

000002a4 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 2a4:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
 2a6:	2900      	cmp	r1, #0
 2a8:	d001      	beq.n	2ae <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
 2aa:	0018      	movs	r0, r3
 2ac:	4770      	bx	lr
		return NULL;
 2ae:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
 2b0:	281f      	cmp	r0, #31
 2b2:	d800      	bhi.n	2b6 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
 2b4:	4a02      	ldr	r2, [pc, #8]	; (2c0 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
 2b6:	2301      	movs	r3, #1
 2b8:	4083      	lsls	r3, r0
 2ba:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
 2bc:	2300      	movs	r3, #0
 2be:	e7f4      	b.n	2aa <extint_chan_enable_callback+0x6>
 2c0:	40001800 	.word	0x40001800

000002c4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
 2c4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
 2c6:	2200      	movs	r2, #0
 2c8:	4b10      	ldr	r3, [pc, #64]	; (30c <EIC_Handler+0x48>)
 2ca:	701a      	strb	r2, [r3, #0]
 2cc:	2300      	movs	r3, #0
 2ce:	4910      	ldr	r1, [pc, #64]	; (310 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
 2d0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
 2d2:	4e10      	ldr	r6, [pc, #64]	; (314 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
 2d4:	4c0d      	ldr	r4, [pc, #52]	; (30c <EIC_Handler+0x48>)
 2d6:	e00a      	b.n	2ee <EIC_Handler+0x2a>
		return eics[eic_index];
 2d8:	490d      	ldr	r1, [pc, #52]	; (310 <EIC_Handler+0x4c>)
 2da:	e008      	b.n	2ee <EIC_Handler+0x2a>
 2dc:	7823      	ldrb	r3, [r4, #0]
 2de:	3301      	adds	r3, #1
 2e0:	b2db      	uxtb	r3, r3
 2e2:	7023      	strb	r3, [r4, #0]
 2e4:	2b0f      	cmp	r3, #15
 2e6:	d810      	bhi.n	30a <EIC_Handler+0x46>
		return NULL;
 2e8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
 2ea:	2b1f      	cmp	r3, #31
 2ec:	d9f4      	bls.n	2d8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
 2ee:	0028      	movs	r0, r5
 2f0:	4018      	ands	r0, r3
 2f2:	2201      	movs	r2, #1
 2f4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
 2f6:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
 2f8:	4210      	tst	r0, r2
 2fa:	d0ef      	beq.n	2dc <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
 2fc:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
 2fe:	009b      	lsls	r3, r3, #2
 300:	599b      	ldr	r3, [r3, r6]
 302:	2b00      	cmp	r3, #0
 304:	d0ea      	beq.n	2dc <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
 306:	4798      	blx	r3
 308:	e7e8      	b.n	2dc <EIC_Handler+0x18>
			}
		}
	}
}
 30a:	bd70      	pop	{r4, r5, r6, pc}
 30c:	20000084 	.word	0x20000084
 310:	40001800 	.word	0x40001800
 314:	20000044 	.word	0x20000044

00000318 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
 318:	b5f0      	push	{r4, r5, r6, r7, lr}
 31a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 31c:	ac01      	add	r4, sp, #4
 31e:	2501      	movs	r5, #1
 320:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
 322:	2700      	movs	r7, #0
 324:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 326:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 328:	0021      	movs	r1, r4
 32a:	200e      	movs	r0, #14
 32c:	4e06      	ldr	r6, [pc, #24]	; (348 <system_board_init+0x30>)
 32e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 330:	2280      	movs	r2, #128	; 0x80
 332:	01d2      	lsls	r2, r2, #7
 334:	4b05      	ldr	r3, [pc, #20]	; (34c <system_board_init+0x34>)
 336:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
 338:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
 33a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 33c:	0021      	movs	r1, r4
 33e:	200f      	movs	r0, #15
 340:	47b0      	blx	r6

 342:	b003      	add	sp, #12
 344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 346:	46c0      	nop			; (mov r8, r8)
 348:	00000255 	.word	0x00000255
 34c:	41004400 	.word	0x41004400

00000350 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 350:	4b0c      	ldr	r3, [pc, #48]	; (384 <cpu_irq_enter_critical+0x34>)
 352:	681b      	ldr	r3, [r3, #0]
 354:	2b00      	cmp	r3, #0
 356:	d106      	bne.n	366 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 358:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 35c:	2b00      	cmp	r3, #0
 35e:	d007      	beq.n	370 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 360:	2200      	movs	r2, #0
 362:	4b09      	ldr	r3, [pc, #36]	; (388 <cpu_irq_enter_critical+0x38>)
 364:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 366:	4a07      	ldr	r2, [pc, #28]	; (384 <cpu_irq_enter_critical+0x34>)
 368:	6813      	ldr	r3, [r2, #0]
 36a:	3301      	adds	r3, #1
 36c:	6013      	str	r3, [r2, #0]
}
 36e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 370:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 372:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 376:	2200      	movs	r2, #0
 378:	4b04      	ldr	r3, [pc, #16]	; (38c <cpu_irq_enter_critical+0x3c>)
 37a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 37c:	3201      	adds	r2, #1
 37e:	4b02      	ldr	r3, [pc, #8]	; (388 <cpu_irq_enter_critical+0x38>)
 380:	701a      	strb	r2, [r3, #0]
 382:	e7f0      	b.n	366 <cpu_irq_enter_critical+0x16>
 384:	20000028 	.word	0x20000028
 388:	2000002c 	.word	0x2000002c
 38c:	20000008 	.word	0x20000008

00000390 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 390:	4b08      	ldr	r3, [pc, #32]	; (3b4 <cpu_irq_leave_critical+0x24>)
 392:	681a      	ldr	r2, [r3, #0]
 394:	3a01      	subs	r2, #1
 396:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 398:	681b      	ldr	r3, [r3, #0]
 39a:	2b00      	cmp	r3, #0
 39c:	d109      	bne.n	3b2 <cpu_irq_leave_critical+0x22>
 39e:	4b06      	ldr	r3, [pc, #24]	; (3b8 <cpu_irq_leave_critical+0x28>)
 3a0:	781b      	ldrb	r3, [r3, #0]
 3a2:	2b00      	cmp	r3, #0
 3a4:	d005      	beq.n	3b2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 3a6:	2201      	movs	r2, #1
 3a8:	4b04      	ldr	r3, [pc, #16]	; (3bc <cpu_irq_leave_critical+0x2c>)
 3aa:	701a      	strb	r2, [r3, #0]
 3ac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 3b0:	b662      	cpsie	i
	}
}
 3b2:	4770      	bx	lr
 3b4:	20000028 	.word	0x20000028
 3b8:	2000002c 	.word	0x2000002c
 3bc:	20000008 	.word	0x20000008

000003c0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
 3c0:	b510      	push	{r4, lr}
	switch (clock_source) {
 3c2:	2807      	cmp	r0, #7
 3c4:	d803      	bhi.n	3ce <system_clock_source_get_hz+0xe>
 3c6:	0080      	lsls	r0, r0, #2
 3c8:	4b16      	ldr	r3, [pc, #88]	; (424 <system_clock_source_get_hz+0x64>)
 3ca:	581b      	ldr	r3, [r3, r0]
 3cc:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
 3ce:	2000      	movs	r0, #0
 3d0:	e027      	b.n	422 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
 3d2:	4b15      	ldr	r3, [pc, #84]	; (428 <system_clock_source_get_hz+0x68>)
 3d4:	68d8      	ldr	r0, [r3, #12]
 3d6:	e024      	b.n	422 <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
 3d8:	4b14      	ldr	r3, [pc, #80]	; (42c <system_clock_source_get_hz+0x6c>)
 3da:	6a1b      	ldr	r3, [r3, #32]
 3dc:	059b      	lsls	r3, r3, #22
 3de:	0f9b      	lsrs	r3, r3, #30
 3e0:	4813      	ldr	r0, [pc, #76]	; (430 <system_clock_source_get_hz+0x70>)
 3e2:	40d8      	lsrs	r0, r3
 3e4:	e01d      	b.n	422 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
 3e6:	4b10      	ldr	r3, [pc, #64]	; (428 <system_clock_source_get_hz+0x68>)
 3e8:	6918      	ldr	r0, [r3, #16]
 3ea:	e01a      	b.n	422 <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
 3ec:	4b0e      	ldr	r3, [pc, #56]	; (428 <system_clock_source_get_hz+0x68>)
 3ee:	681b      	ldr	r3, [r3, #0]
			return 0;
 3f0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
 3f2:	079b      	lsls	r3, r3, #30
 3f4:	d515      	bpl.n	422 <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 3f6:	490d      	ldr	r1, [pc, #52]	; (42c <system_clock_source_get_hz+0x6c>)
 3f8:	2210      	movs	r2, #16
 3fa:	68cb      	ldr	r3, [r1, #12]
 3fc:	421a      	tst	r2, r3
 3fe:	d0fc      	beq.n	3fa <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
 400:	4b09      	ldr	r3, [pc, #36]	; (428 <system_clock_source_get_hz+0x68>)
 402:	681b      	ldr	r3, [r3, #0]
 404:	075b      	lsls	r3, r3, #29
 406:	d401      	bmi.n	40c <system_clock_source_get_hz+0x4c>
		return 48000000UL;
 408:	480a      	ldr	r0, [pc, #40]	; (434 <system_clock_source_get_hz+0x74>)
 40a:	e00a      	b.n	422 <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 40c:	2000      	movs	r0, #0
 40e:	4b0a      	ldr	r3, [pc, #40]	; (438 <system_clock_source_get_hz+0x78>)
 410:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
 412:	4b05      	ldr	r3, [pc, #20]	; (428 <system_clock_source_get_hz+0x68>)
 414:	689b      	ldr	r3, [r3, #8]
 416:	041b      	lsls	r3, r3, #16
 418:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 41a:	4358      	muls	r0, r3
 41c:	e001      	b.n	422 <system_clock_source_get_hz+0x62>
		return 32768UL;
 41e:	2080      	movs	r0, #128	; 0x80
 420:	0200      	lsls	r0, r0, #8
	}
}
 422:	bd10      	pop	{r4, pc}
 424:	00000c54 	.word	0x00000c54
 428:	20000030 	.word	0x20000030
 42c:	40000800 	.word	0x40000800
 430:	007a1200 	.word	0x007a1200
 434:	02dc6c00 	.word	0x02dc6c00
 438:	000007f5 	.word	0x000007f5

0000043c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 43c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 43e:	490c      	ldr	r1, [pc, #48]	; (470 <system_clock_source_osc8m_set_config+0x34>)
 440:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 442:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 444:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 446:	7840      	ldrb	r0, [r0, #1]
 448:	2201      	movs	r2, #1
 44a:	4010      	ands	r0, r2
 44c:	0180      	lsls	r0, r0, #6
 44e:	2640      	movs	r6, #64	; 0x40
 450:	43b3      	bics	r3, r6
 452:	4303      	orrs	r3, r0
 454:	402a      	ands	r2, r5
 456:	01d2      	lsls	r2, r2, #7
 458:	2080      	movs	r0, #128	; 0x80
 45a:	4383      	bics	r3, r0
 45c:	4313      	orrs	r3, r2
 45e:	2203      	movs	r2, #3
 460:	4022      	ands	r2, r4
 462:	0212      	lsls	r2, r2, #8
 464:	4803      	ldr	r0, [pc, #12]	; (474 <system_clock_source_osc8m_set_config+0x38>)
 466:	4003      	ands	r3, r0
 468:	4313      	orrs	r3, r2
 46a:	620b      	str	r3, [r1, #32]
}
 46c:	bd70      	pop	{r4, r5, r6, pc}
 46e:	46c0      	nop			; (mov r8, r8)
 470:	40000800 	.word	0x40000800
 474:	fffffcff 	.word	0xfffffcff

00000478 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 478:	2807      	cmp	r0, #7
 47a:	d803      	bhi.n	484 <system_clock_source_enable+0xc>
 47c:	0080      	lsls	r0, r0, #2
 47e:	4b1e      	ldr	r3, [pc, #120]	; (4f8 <system_clock_source_enable+0x80>)
 480:	581b      	ldr	r3, [r3, r0]
 482:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 484:	2017      	movs	r0, #23
 486:	e036      	b.n	4f6 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 488:	4a1c      	ldr	r2, [pc, #112]	; (4fc <system_clock_source_enable+0x84>)
 48a:	6a13      	ldr	r3, [r2, #32]
 48c:	2102      	movs	r1, #2
 48e:	430b      	orrs	r3, r1
 490:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 492:	2000      	movs	r0, #0
 494:	e02f      	b.n	4f6 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 496:	4a19      	ldr	r2, [pc, #100]	; (4fc <system_clock_source_enable+0x84>)
 498:	6993      	ldr	r3, [r2, #24]
 49a:	2102      	movs	r1, #2
 49c:	430b      	orrs	r3, r1
 49e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
 4a0:	2000      	movs	r0, #0
		break;
 4a2:	e028      	b.n	4f6 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 4a4:	4a15      	ldr	r2, [pc, #84]	; (4fc <system_clock_source_enable+0x84>)
 4a6:	8a13      	ldrh	r3, [r2, #16]
 4a8:	2102      	movs	r1, #2
 4aa:	430b      	orrs	r3, r1
 4ac:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
 4ae:	2000      	movs	r0, #0
		break;
 4b0:	e021      	b.n	4f6 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 4b2:	4a12      	ldr	r2, [pc, #72]	; (4fc <system_clock_source_enable+0x84>)
 4b4:	8a93      	ldrh	r3, [r2, #20]
 4b6:	2102      	movs	r1, #2
 4b8:	430b      	orrs	r3, r1
 4ba:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
 4bc:	2000      	movs	r0, #0
		break;
 4be:	e01a      	b.n	4f6 <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 4c0:	4b0f      	ldr	r3, [pc, #60]	; (500 <system_clock_source_enable+0x88>)
 4c2:	681a      	ldr	r2, [r3, #0]
 4c4:	2102      	movs	r1, #2
 4c6:	430a      	orrs	r2, r1
 4c8:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
 4ca:	681b      	ldr	r3, [r3, #0]
 4cc:	4a0d      	ldr	r2, [pc, #52]	; (504 <system_clock_source_enable+0x8c>)
 4ce:	4013      	ands	r3, r2
 4d0:	4a0a      	ldr	r2, [pc, #40]	; (4fc <system_clock_source_enable+0x84>)
 4d2:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 4d4:	0011      	movs	r1, r2
 4d6:	2210      	movs	r2, #16
 4d8:	68cb      	ldr	r3, [r1, #12]
 4da:	421a      	tst	r2, r3
 4dc:	d0fc      	beq.n	4d8 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 4de:	4a08      	ldr	r2, [pc, #32]	; (500 <system_clock_source_enable+0x88>)
 4e0:	6891      	ldr	r1, [r2, #8]
 4e2:	4b06      	ldr	r3, [pc, #24]	; (4fc <system_clock_source_enable+0x84>)
 4e4:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 4e6:	6851      	ldr	r1, [r2, #4]
 4e8:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 4ea:	6812      	ldr	r2, [r2, #0]
 4ec:	b292      	uxth	r2, r2
 4ee:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
 4f0:	2000      	movs	r0, #0
 4f2:	e000      	b.n	4f6 <system_clock_source_enable+0x7e>
		return STATUS_OK;
 4f4:	2000      	movs	r0, #0
}
 4f6:	4770      	bx	lr
 4f8:	00000c74 	.word	0x00000c74
 4fc:	40000800 	.word	0x40000800
 500:	20000030 	.word	0x20000030
 504:	0000ff7f 	.word	0x0000ff7f

00000508 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 508:	b530      	push	{r4, r5, lr}
 50a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 50c:	22c2      	movs	r2, #194	; 0xc2
 50e:	00d2      	lsls	r2, r2, #3
 510:	4b1a      	ldr	r3, [pc, #104]	; (57c <system_clock_init+0x74>)
 512:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 514:	4a1a      	ldr	r2, [pc, #104]	; (580 <system_clock_init+0x78>)
 516:	6853      	ldr	r3, [r2, #4]
 518:	211e      	movs	r1, #30
 51a:	438b      	bics	r3, r1
 51c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 51e:	2301      	movs	r3, #1
 520:	466a      	mov	r2, sp
 522:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 524:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 526:	4d17      	ldr	r5, [pc, #92]	; (584 <system_clock_init+0x7c>)
 528:	b2e0      	uxtb	r0, r4
 52a:	4669      	mov	r1, sp
 52c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 52e:	3401      	adds	r4, #1
 530:	2c1c      	cmp	r4, #28
 532:	d1f9      	bne.n	528 <system_clock_init+0x20>
	config->run_in_standby  = false;
 534:	a803      	add	r0, sp, #12
 536:	2400      	movs	r4, #0
 538:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 53a:	2501      	movs	r5, #1
 53c:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 53e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 540:	4b11      	ldr	r3, [pc, #68]	; (588 <system_clock_init+0x80>)
 542:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 544:	2006      	movs	r0, #6
 546:	4b11      	ldr	r3, [pc, #68]	; (58c <system_clock_init+0x84>)
 548:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 54a:	4b11      	ldr	r3, [pc, #68]	; (590 <system_clock_init+0x88>)
 54c:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
 54e:	4b11      	ldr	r3, [pc, #68]	; (594 <system_clock_init+0x8c>)
 550:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
 552:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
 554:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
 556:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
 558:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 55a:	466b      	mov	r3, sp
 55c:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
 55e:	2306      	movs	r3, #6
 560:	466a      	mov	r2, sp
 562:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
 564:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 566:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 568:	4669      	mov	r1, sp
 56a:	2000      	movs	r0, #0
 56c:	4b0a      	ldr	r3, [pc, #40]	; (598 <system_clock_init+0x90>)
 56e:	4798      	blx	r3
 570:	2000      	movs	r0, #0
 572:	4b0a      	ldr	r3, [pc, #40]	; (59c <system_clock_init+0x94>)
 574:	4798      	blx	r3
#endif
}
 576:	b005      	add	sp, #20
 578:	bd30      	pop	{r4, r5, pc}
 57a:	46c0      	nop			; (mov r8, r8)
 57c:	40000800 	.word	0x40000800
 580:	41004000 	.word	0x41004000
 584:	000007d9 	.word	0x000007d9
 588:	0000043d 	.word	0x0000043d
 58c:	00000479 	.word	0x00000479
 590:	000005a1 	.word	0x000005a1
 594:	40000400 	.word	0x40000400
 598:	000005c5 	.word	0x000005c5
 59c:	0000067d 	.word	0x0000067d

000005a0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
 5a0:	4a06      	ldr	r2, [pc, #24]	; (5bc <system_gclk_init+0x1c>)
 5a2:	6993      	ldr	r3, [r2, #24]
 5a4:	2108      	movs	r1, #8
 5a6:	430b      	orrs	r3, r1
 5a8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 5aa:	2201      	movs	r2, #1
 5ac:	4b04      	ldr	r3, [pc, #16]	; (5c0 <system_gclk_init+0x20>)
 5ae:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 5b0:	0019      	movs	r1, r3
 5b2:	780b      	ldrb	r3, [r1, #0]
 5b4:	4213      	tst	r3, r2
 5b6:	d1fc      	bne.n	5b2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 5b8:	4770      	bx	lr
 5ba:	46c0      	nop			; (mov r8, r8)
 5bc:	40000400 	.word	0x40000400
 5c0:	40000c00 	.word	0x40000c00

000005c4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 5c4:	b570      	push	{r4, r5, r6, lr}
 5c6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 5c8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 5ca:	780d      	ldrb	r5, [r1, #0]
 5cc:	022d      	lsls	r5, r5, #8
 5ce:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 5d0:	784b      	ldrb	r3, [r1, #1]
 5d2:	2b00      	cmp	r3, #0
 5d4:	d002      	beq.n	5dc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 5d6:	2380      	movs	r3, #128	; 0x80
 5d8:	02db      	lsls	r3, r3, #11
 5da:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 5dc:	7a4b      	ldrb	r3, [r1, #9]
 5de:	2b00      	cmp	r3, #0
 5e0:	d002      	beq.n	5e8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 5e2:	2380      	movs	r3, #128	; 0x80
 5e4:	031b      	lsls	r3, r3, #12
 5e6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 5e8:	6848      	ldr	r0, [r1, #4]
 5ea:	2801      	cmp	r0, #1
 5ec:	d910      	bls.n	610 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 5ee:	1e43      	subs	r3, r0, #1
 5f0:	4218      	tst	r0, r3
 5f2:	d134      	bne.n	65e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 5f4:	2802      	cmp	r0, #2
 5f6:	d930      	bls.n	65a <system_gclk_gen_set_config+0x96>
 5f8:	2302      	movs	r3, #2
 5fa:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 5fc:	3201      	adds	r2, #1
						mask <<= 1) {
 5fe:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 600:	4298      	cmp	r0, r3
 602:	d8fb      	bhi.n	5fc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 604:	0212      	lsls	r2, r2, #8
 606:	4332      	orrs	r2, r6
 608:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 60a:	2380      	movs	r3, #128	; 0x80
 60c:	035b      	lsls	r3, r3, #13
 60e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 610:	7a0b      	ldrb	r3, [r1, #8]
 612:	2b00      	cmp	r3, #0
 614:	d002      	beq.n	61c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 616:	2380      	movs	r3, #128	; 0x80
 618:	039b      	lsls	r3, r3, #14
 61a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 61c:	4a13      	ldr	r2, [pc, #76]	; (66c <system_gclk_gen_set_config+0xa8>)
 61e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
 620:	b25b      	sxtb	r3, r3
 622:	2b00      	cmp	r3, #0
 624:	dbfb      	blt.n	61e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
 626:	4b12      	ldr	r3, [pc, #72]	; (670 <system_gclk_gen_set_config+0xac>)
 628:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 62a:	4b12      	ldr	r3, [pc, #72]	; (674 <system_gclk_gen_set_config+0xb0>)
 62c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 62e:	4a0f      	ldr	r2, [pc, #60]	; (66c <system_gclk_gen_set_config+0xa8>)
 630:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 632:	b25b      	sxtb	r3, r3
 634:	2b00      	cmp	r3, #0
 636:	dbfb      	blt.n	630 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 638:	4b0c      	ldr	r3, [pc, #48]	; (66c <system_gclk_gen_set_config+0xa8>)
 63a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 63c:	001a      	movs	r2, r3
 63e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
 640:	b25b      	sxtb	r3, r3
 642:	2b00      	cmp	r3, #0
 644:	dbfb      	blt.n	63e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 646:	4a09      	ldr	r2, [pc, #36]	; (66c <system_gclk_gen_set_config+0xa8>)
 648:	6853      	ldr	r3, [r2, #4]
 64a:	2180      	movs	r1, #128	; 0x80
 64c:	0249      	lsls	r1, r1, #9
 64e:	400b      	ands	r3, r1
 650:	431d      	orrs	r5, r3
 652:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
 654:	4b08      	ldr	r3, [pc, #32]	; (678 <system_gclk_gen_set_config+0xb4>)
 656:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 658:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
 65a:	2200      	movs	r2, #0
 65c:	e7d2      	b.n	604 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 65e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
 660:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 662:	2380      	movs	r3, #128	; 0x80
 664:	029b      	lsls	r3, r3, #10
 666:	431d      	orrs	r5, r3
 668:	e7d2      	b.n	610 <system_gclk_gen_set_config+0x4c>
 66a:	46c0      	nop			; (mov r8, r8)
 66c:	40000c00 	.word	0x40000c00
 670:	00000351 	.word	0x00000351
 674:	40000c08 	.word	0x40000c08
 678:	00000391 	.word	0x00000391

0000067c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 67c:	b510      	push	{r4, lr}
 67e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 680:	4a0b      	ldr	r2, [pc, #44]	; (6b0 <system_gclk_gen_enable+0x34>)
 682:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 684:	b25b      	sxtb	r3, r3
 686:	2b00      	cmp	r3, #0
 688:	dbfb      	blt.n	682 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
 68a:	4b0a      	ldr	r3, [pc, #40]	; (6b4 <system_gclk_gen_enable+0x38>)
 68c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 68e:	4b0a      	ldr	r3, [pc, #40]	; (6b8 <system_gclk_gen_enable+0x3c>)
 690:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 692:	4a07      	ldr	r2, [pc, #28]	; (6b0 <system_gclk_gen_enable+0x34>)
 694:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 696:	b25b      	sxtb	r3, r3
 698:	2b00      	cmp	r3, #0
 69a:	dbfb      	blt.n	694 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 69c:	4a04      	ldr	r2, [pc, #16]	; (6b0 <system_gclk_gen_enable+0x34>)
 69e:	6851      	ldr	r1, [r2, #4]
 6a0:	2380      	movs	r3, #128	; 0x80
 6a2:	025b      	lsls	r3, r3, #9
 6a4:	430b      	orrs	r3, r1
 6a6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
 6a8:	4b04      	ldr	r3, [pc, #16]	; (6bc <system_gclk_gen_enable+0x40>)
 6aa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 6ac:	bd10      	pop	{r4, pc}
 6ae:	46c0      	nop			; (mov r8, r8)
 6b0:	40000c00 	.word	0x40000c00
 6b4:	00000351 	.word	0x00000351
 6b8:	40000c04 	.word	0x40000c04
 6bc:	00000391 	.word	0x00000391

000006c0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
 6c0:	b570      	push	{r4, r5, r6, lr}
 6c2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 6c4:	4a1a      	ldr	r2, [pc, #104]	; (730 <system_gclk_gen_get_hz+0x70>)
 6c6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 6c8:	b25b      	sxtb	r3, r3
 6ca:	2b00      	cmp	r3, #0
 6cc:	dbfb      	blt.n	6c6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
 6ce:	4b19      	ldr	r3, [pc, #100]	; (734 <system_gclk_gen_get_hz+0x74>)
 6d0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 6d2:	4b19      	ldr	r3, [pc, #100]	; (738 <system_gclk_gen_get_hz+0x78>)
 6d4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 6d6:	4a16      	ldr	r2, [pc, #88]	; (730 <system_gclk_gen_get_hz+0x70>)
 6d8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 6da:	b25b      	sxtb	r3, r3
 6dc:	2b00      	cmp	r3, #0
 6de:	dbfb      	blt.n	6d8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
 6e0:	4e13      	ldr	r6, [pc, #76]	; (730 <system_gclk_gen_get_hz+0x70>)
 6e2:	6870      	ldr	r0, [r6, #4]
 6e4:	04c0      	lsls	r0, r0, #19
 6e6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
 6e8:	4b14      	ldr	r3, [pc, #80]	; (73c <system_gclk_gen_get_hz+0x7c>)
 6ea:	4798      	blx	r3
 6ec:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 6ee:	4b12      	ldr	r3, [pc, #72]	; (738 <system_gclk_gen_get_hz+0x78>)
 6f0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
 6f2:	6876      	ldr	r6, [r6, #4]
 6f4:	02f6      	lsls	r6, r6, #11
 6f6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 6f8:	4b11      	ldr	r3, [pc, #68]	; (740 <system_gclk_gen_get_hz+0x80>)
 6fa:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 6fc:	4a0c      	ldr	r2, [pc, #48]	; (730 <system_gclk_gen_get_hz+0x70>)
 6fe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 700:	b25b      	sxtb	r3, r3
 702:	2b00      	cmp	r3, #0
 704:	dbfb      	blt.n	6fe <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
 706:	4b0a      	ldr	r3, [pc, #40]	; (730 <system_gclk_gen_get_hz+0x70>)
 708:	689c      	ldr	r4, [r3, #8]
 70a:	0224      	lsls	r4, r4, #8
 70c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
 70e:	4b0d      	ldr	r3, [pc, #52]	; (744 <system_gclk_gen_get_hz+0x84>)
 710:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
 712:	2e00      	cmp	r6, #0
 714:	d107      	bne.n	726 <system_gclk_gen_get_hz+0x66>
 716:	2c01      	cmp	r4, #1
 718:	d907      	bls.n	72a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
 71a:	0021      	movs	r1, r4
 71c:	0028      	movs	r0, r5
 71e:	4b0a      	ldr	r3, [pc, #40]	; (748 <system_gclk_gen_get_hz+0x88>)
 720:	4798      	blx	r3
 722:	0005      	movs	r5, r0
 724:	e001      	b.n	72a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
 726:	3401      	adds	r4, #1
 728:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
 72a:	0028      	movs	r0, r5
 72c:	bd70      	pop	{r4, r5, r6, pc}
 72e:	46c0      	nop			; (mov r8, r8)
 730:	40000c00 	.word	0x40000c00
 734:	00000351 	.word	0x00000351
 738:	40000c04 	.word	0x40000c04
 73c:	000003c1 	.word	0x000003c1
 740:	40000c08 	.word	0x40000c08
 744:	00000391 	.word	0x00000391
 748:	00000af5 	.word	0x00000af5

0000074c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
 74c:	b510      	push	{r4, lr}
 74e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 750:	4b06      	ldr	r3, [pc, #24]	; (76c <system_gclk_chan_enable+0x20>)
 752:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 754:	4b06      	ldr	r3, [pc, #24]	; (770 <system_gclk_chan_enable+0x24>)
 756:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
 758:	4a06      	ldr	r2, [pc, #24]	; (774 <system_gclk_chan_enable+0x28>)
 75a:	8853      	ldrh	r3, [r2, #2]
 75c:	2180      	movs	r1, #128	; 0x80
 75e:	01c9      	lsls	r1, r1, #7
 760:	430b      	orrs	r3, r1
 762:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
 764:	4b04      	ldr	r3, [pc, #16]	; (778 <system_gclk_chan_enable+0x2c>)
 766:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 768:	bd10      	pop	{r4, pc}
 76a:	46c0      	nop			; (mov r8, r8)
 76c:	00000351 	.word	0x00000351
 770:	40000c02 	.word	0x40000c02
 774:	40000c00 	.word	0x40000c00
 778:	00000391 	.word	0x00000391

0000077c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 77c:	b510      	push	{r4, lr}
 77e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 780:	4b0f      	ldr	r3, [pc, #60]	; (7c0 <system_gclk_chan_disable+0x44>)
 782:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 784:	4b0f      	ldr	r3, [pc, #60]	; (7c4 <system_gclk_chan_disable+0x48>)
 786:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 788:	4a0f      	ldr	r2, [pc, #60]	; (7c8 <system_gclk_chan_disable+0x4c>)
 78a:	8853      	ldrh	r3, [r2, #2]
 78c:	051b      	lsls	r3, r3, #20
 78e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 790:	8853      	ldrh	r3, [r2, #2]
 792:	490e      	ldr	r1, [pc, #56]	; (7cc <system_gclk_chan_disable+0x50>)
 794:	400b      	ands	r3, r1
 796:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 798:	8853      	ldrh	r3, [r2, #2]
 79a:	490d      	ldr	r1, [pc, #52]	; (7d0 <system_gclk_chan_disable+0x54>)
 79c:	400b      	ands	r3, r1
 79e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 7a0:	0011      	movs	r1, r2
 7a2:	2280      	movs	r2, #128	; 0x80
 7a4:	01d2      	lsls	r2, r2, #7
 7a6:	884b      	ldrh	r3, [r1, #2]
 7a8:	4213      	tst	r3, r2
 7aa:	d1fc      	bne.n	7a6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 7ac:	4906      	ldr	r1, [pc, #24]	; (7c8 <system_gclk_chan_disable+0x4c>)
 7ae:	884a      	ldrh	r2, [r1, #2]
 7b0:	0203      	lsls	r3, r0, #8
 7b2:	4806      	ldr	r0, [pc, #24]	; (7cc <system_gclk_chan_disable+0x50>)
 7b4:	4002      	ands	r2, r0
 7b6:	4313      	orrs	r3, r2
 7b8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
 7ba:	4b06      	ldr	r3, [pc, #24]	; (7d4 <system_gclk_chan_disable+0x58>)
 7bc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 7be:	bd10      	pop	{r4, pc}
 7c0:	00000351 	.word	0x00000351
 7c4:	40000c02 	.word	0x40000c02
 7c8:	40000c00 	.word	0x40000c00
 7cc:	fffff0ff 	.word	0xfffff0ff
 7d0:	ffffbfff 	.word	0xffffbfff
 7d4:	00000391 	.word	0x00000391

000007d8 <system_gclk_chan_set_config>:
{
 7d8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 7da:	780c      	ldrb	r4, [r1, #0]
 7dc:	0224      	lsls	r4, r4, #8
 7de:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
 7e0:	4b02      	ldr	r3, [pc, #8]	; (7ec <system_gclk_chan_set_config+0x14>)
 7e2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 7e4:	b2a4      	uxth	r4, r4
 7e6:	4b02      	ldr	r3, [pc, #8]	; (7f0 <system_gclk_chan_set_config+0x18>)
 7e8:	805c      	strh	r4, [r3, #2]
}
 7ea:	bd10      	pop	{r4, pc}
 7ec:	0000077d 	.word	0x0000077d
 7f0:	40000c00 	.word	0x40000c00

000007f4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
 7f4:	b510      	push	{r4, lr}
 7f6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 7f8:	4b06      	ldr	r3, [pc, #24]	; (814 <system_gclk_chan_get_hz+0x20>)
 7fa:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 7fc:	4b06      	ldr	r3, [pc, #24]	; (818 <system_gclk_chan_get_hz+0x24>)
 7fe:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
 800:	4b06      	ldr	r3, [pc, #24]	; (81c <system_gclk_chan_get_hz+0x28>)
 802:	885c      	ldrh	r4, [r3, #2]
 804:	0524      	lsls	r4, r4, #20
 806:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
 808:	4b05      	ldr	r3, [pc, #20]	; (820 <system_gclk_chan_get_hz+0x2c>)
 80a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
 80c:	0020      	movs	r0, r4
 80e:	4b05      	ldr	r3, [pc, #20]	; (824 <system_gclk_chan_get_hz+0x30>)
 810:	4798      	blx	r3
}
 812:	bd10      	pop	{r4, pc}
 814:	00000351 	.word	0x00000351
 818:	40000c02 	.word	0x40000c02
 81c:	40000c00 	.word	0x40000c00
 820:	00000391 	.word	0x00000391
 824:	000006c1 	.word	0x000006c1

00000828 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 828:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 82a:	78d3      	ldrb	r3, [r2, #3]
 82c:	2b00      	cmp	r3, #0
 82e:	d135      	bne.n	89c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 830:	7813      	ldrb	r3, [r2, #0]
 832:	2b80      	cmp	r3, #128	; 0x80
 834:	d029      	beq.n	88a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 836:	061b      	lsls	r3, r3, #24
 838:	2480      	movs	r4, #128	; 0x80
 83a:	0264      	lsls	r4, r4, #9
 83c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 83e:	7854      	ldrb	r4, [r2, #1]
 840:	2502      	movs	r5, #2
 842:	43ac      	bics	r4, r5
 844:	d106      	bne.n	854 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 846:	7894      	ldrb	r4, [r2, #2]
 848:	2c00      	cmp	r4, #0
 84a:	d120      	bne.n	88e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
 84c:	2480      	movs	r4, #128	; 0x80
 84e:	02a4      	lsls	r4, r4, #10
 850:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 852:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 854:	7854      	ldrb	r4, [r2, #1]
 856:	3c01      	subs	r4, #1
 858:	2c01      	cmp	r4, #1
 85a:	d91c      	bls.n	896 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 85c:	040d      	lsls	r5, r1, #16
 85e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 860:	24a0      	movs	r4, #160	; 0xa0
 862:	05e4      	lsls	r4, r4, #23
 864:	432c      	orrs	r4, r5
 866:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 868:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 86a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 86c:	24d0      	movs	r4, #208	; 0xd0
 86e:	0624      	lsls	r4, r4, #24
 870:	432c      	orrs	r4, r5
 872:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 874:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 876:	78d4      	ldrb	r4, [r2, #3]
 878:	2c00      	cmp	r4, #0
 87a:	d122      	bne.n	8c2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 87c:	035b      	lsls	r3, r3, #13
 87e:	d51c      	bpl.n	8ba <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 880:	7893      	ldrb	r3, [r2, #2]
 882:	2b01      	cmp	r3, #1
 884:	d01e      	beq.n	8c4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
 886:	6141      	str	r1, [r0, #20]
 888:	e017      	b.n	8ba <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
 88a:	2300      	movs	r3, #0
 88c:	e7d7      	b.n	83e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 88e:	24c0      	movs	r4, #192	; 0xc0
 890:	02e4      	lsls	r4, r4, #11
 892:	4323      	orrs	r3, r4
 894:	e7dd      	b.n	852 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 896:	4c0d      	ldr	r4, [pc, #52]	; (8cc <_system_pinmux_config+0xa4>)
 898:	4023      	ands	r3, r4
 89a:	e7df      	b.n	85c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
 89c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 89e:	040c      	lsls	r4, r1, #16
 8a0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 8a2:	23a0      	movs	r3, #160	; 0xa0
 8a4:	05db      	lsls	r3, r3, #23
 8a6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 8a8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 8aa:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 8ac:	23d0      	movs	r3, #208	; 0xd0
 8ae:	061b      	lsls	r3, r3, #24
 8b0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 8b2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
 8b4:	78d3      	ldrb	r3, [r2, #3]
 8b6:	2b00      	cmp	r3, #0
 8b8:	d103      	bne.n	8c2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 8ba:	7853      	ldrb	r3, [r2, #1]
 8bc:	3b01      	subs	r3, #1
 8be:	2b01      	cmp	r3, #1
 8c0:	d902      	bls.n	8c8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
 8c2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
 8c4:	6181      	str	r1, [r0, #24]
 8c6:	e7f8      	b.n	8ba <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
 8c8:	6081      	str	r1, [r0, #8]
}
 8ca:	e7fa      	b.n	8c2 <_system_pinmux_config+0x9a>
 8cc:	fffbffff 	.word	0xfffbffff

000008d0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 8d0:	b510      	push	{r4, lr}
 8d2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 8d4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 8d6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
 8d8:	2900      	cmp	r1, #0
 8da:	d104      	bne.n	8e6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
 8dc:	0943      	lsrs	r3, r0, #5
 8de:	01db      	lsls	r3, r3, #7
 8e0:	4905      	ldr	r1, [pc, #20]	; (8f8 <system_pinmux_pin_set_config+0x28>)
 8e2:	468c      	mov	ip, r1
 8e4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 8e6:	241f      	movs	r4, #31
 8e8:	4020      	ands	r0, r4
 8ea:	2101      	movs	r1, #1
 8ec:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
 8ee:	0018      	movs	r0, r3
 8f0:	4b02      	ldr	r3, [pc, #8]	; (8fc <system_pinmux_pin_set_config+0x2c>)
 8f2:	4798      	blx	r3
}
 8f4:	bd10      	pop	{r4, pc}
 8f6:	46c0      	nop			; (mov r8, r8)
 8f8:	41004400 	.word	0x41004400
 8fc:	00000829 	.word	0x00000829

00000900 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 900:	4770      	bx	lr
	...

00000904 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 904:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 906:	4b05      	ldr	r3, [pc, #20]	; (91c <system_init+0x18>)
 908:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 90a:	4b05      	ldr	r3, [pc, #20]	; (920 <system_init+0x1c>)
 90c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 90e:	4b05      	ldr	r3, [pc, #20]	; (924 <system_init+0x20>)
 910:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 912:	4b05      	ldr	r3, [pc, #20]	; (928 <system_init+0x24>)
 914:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 916:	4b05      	ldr	r3, [pc, #20]	; (92c <system_init+0x28>)
 918:	4798      	blx	r3
}
 91a:	bd10      	pop	{r4, pc}
 91c:	00000509 	.word	0x00000509
 920:	00000319 	.word	0x00000319
 924:	00000901 	.word	0x00000901
 928:	0000015d 	.word	0x0000015d
 92c:	00000901 	.word	0x00000901

00000930 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 930:	e7fe      	b.n	930 <Dummy_Handler>
	...

00000934 <Reset_Handler>:
{
 934:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 936:	4a1a      	ldr	r2, [pc, #104]	; (9a0 <Reset_Handler+0x6c>)
 938:	4b1a      	ldr	r3, [pc, #104]	; (9a4 <Reset_Handler+0x70>)
 93a:	429a      	cmp	r2, r3
 93c:	d011      	beq.n	962 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 93e:	001a      	movs	r2, r3
 940:	4b19      	ldr	r3, [pc, #100]	; (9a8 <Reset_Handler+0x74>)
 942:	429a      	cmp	r2, r3
 944:	d20d      	bcs.n	962 <Reset_Handler+0x2e>
 946:	4a19      	ldr	r2, [pc, #100]	; (9ac <Reset_Handler+0x78>)
 948:	3303      	adds	r3, #3
 94a:	1a9b      	subs	r3, r3, r2
 94c:	089b      	lsrs	r3, r3, #2
 94e:	3301      	adds	r3, #1
 950:	009b      	lsls	r3, r3, #2
 952:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 954:	4813      	ldr	r0, [pc, #76]	; (9a4 <Reset_Handler+0x70>)
 956:	4912      	ldr	r1, [pc, #72]	; (9a0 <Reset_Handler+0x6c>)
 958:	588c      	ldr	r4, [r1, r2]
 95a:	5084      	str	r4, [r0, r2]
 95c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 95e:	429a      	cmp	r2, r3
 960:	d1fa      	bne.n	958 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 962:	4a13      	ldr	r2, [pc, #76]	; (9b0 <Reset_Handler+0x7c>)
 964:	4b13      	ldr	r3, [pc, #76]	; (9b4 <Reset_Handler+0x80>)
 966:	429a      	cmp	r2, r3
 968:	d20a      	bcs.n	980 <Reset_Handler+0x4c>
 96a:	43d3      	mvns	r3, r2
 96c:	4911      	ldr	r1, [pc, #68]	; (9b4 <Reset_Handler+0x80>)
 96e:	185b      	adds	r3, r3, r1
 970:	2103      	movs	r1, #3
 972:	438b      	bics	r3, r1
 974:	3304      	adds	r3, #4
 976:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 978:	2100      	movs	r1, #0
 97a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 97c:	4293      	cmp	r3, r2
 97e:	d1fc      	bne.n	97a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 980:	4a0d      	ldr	r2, [pc, #52]	; (9b8 <Reset_Handler+0x84>)
 982:	21ff      	movs	r1, #255	; 0xff
 984:	4b0d      	ldr	r3, [pc, #52]	; (9bc <Reset_Handler+0x88>)
 986:	438b      	bics	r3, r1
 988:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
 98a:	4a0d      	ldr	r2, [pc, #52]	; (9c0 <Reset_Handler+0x8c>)
 98c:	6853      	ldr	r3, [r2, #4]
 98e:	397f      	subs	r1, #127	; 0x7f
 990:	430b      	orrs	r3, r1
 992:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 994:	4b0b      	ldr	r3, [pc, #44]	; (9c4 <Reset_Handler+0x90>)
 996:	4798      	blx	r3
        main();
 998:	4b0b      	ldr	r3, [pc, #44]	; (9c8 <Reset_Handler+0x94>)
 99a:	4798      	blx	r3
 99c:	e7fe      	b.n	99c <Reset_Handler+0x68>
 99e:	46c0      	nop			; (mov r8, r8)
 9a0:	00000cb4 	.word	0x00000cb4
 9a4:	20000000 	.word	0x20000000
 9a8:	2000000c 	.word	0x2000000c
 9ac:	20000004 	.word	0x20000004
 9b0:	2000000c 	.word	0x2000000c
 9b4:	20000088 	.word	0x20000088
 9b8:	e000ed00 	.word	0xe000ed00
 9bc:	00000000 	.word	0x00000000
 9c0:	41004000 	.word	0x41004000
 9c4:	00000c0d 	.word	0x00000c0d
 9c8:	00000ae1 	.word	0x00000ae1

000009cc <extint_detection_callback>:
	return (port_base->IN.reg & pin_mask);
 9cc:	4b06      	ldr	r3, [pc, #24]	; (9e8 <extint_detection_callback+0x1c>)
 9ce:	6a1b      	ldr	r3, [r3, #32]
	if (level) {
 9d0:	041b      	lsls	r3, r3, #16
 9d2:	d404      	bmi.n	9de <extint_detection_callback+0x12>
	} else {
		port_base->OUTCLR.reg = pin_mask;
 9d4:	2280      	movs	r2, #128	; 0x80
 9d6:	01d2      	lsls	r2, r2, #7
 9d8:	4b03      	ldr	r3, [pc, #12]	; (9e8 <extint_detection_callback+0x1c>)
 9da:	615a      	str	r2, [r3, #20]
 ******************************************************************************************************/
void extint_detection_callback(void)
{
	bool button_pin_state = port_pin_get_input_level(BUTTON_0_PIN);
	port_pin_set_output_level(LED_0_PIN, button_pin_state);
 }
 9dc:	4770      	bx	lr
		port_base->OUTSET.reg = pin_mask;
 9de:	2280      	movs	r2, #128	; 0x80
 9e0:	01d2      	lsls	r2, r2, #7
 9e2:	4b01      	ldr	r3, [pc, #4]	; (9e8 <extint_detection_callback+0x1c>)
 9e4:	619a      	str	r2, [r3, #24]
 9e6:	e7f9      	b.n	9dc <extint_detection_callback+0x10>
 9e8:	41004400 	.word	0x41004400

000009ec <config_led>:
 {
 9ec:	b500      	push	{lr}
 9ee:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
 9f0:	a901      	add	r1, sp, #4
 9f2:	2301      	movs	r3, #1
 9f4:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
 9f6:	2200      	movs	r2, #0
 9f8:	708a      	strb	r2, [r1, #2]
	 pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 9fa:	700b      	strb	r3, [r1, #0]
	 port_pin_set_config(LED_0_PIN, &pin_conf);
 9fc:	200e      	movs	r0, #14
 9fe:	4b04      	ldr	r3, [pc, #16]	; (a10 <config_led+0x24>)
 a00:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
 a02:	2280      	movs	r2, #128	; 0x80
 a04:	01d2      	lsls	r2, r2, #7
 a06:	4b03      	ldr	r3, [pc, #12]	; (a14 <config_led+0x28>)
 a08:	619a      	str	r2, [r3, #24]
 }
 a0a:	b003      	add	sp, #12
 a0c:	bd00      	pop	{pc}
 a0e:	46c0      	nop			; (mov r8, r8)
 a10:	00000255 	.word	0x00000255
 a14:	41004400 	.word	0x41004400

00000a18 <configure_extint_channel>:
{
 a18:	b510      	push	{r4, lr}
 a1a:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
 a1c:	ac01      	add	r4, sp, #4
 a1e:	0020      	movs	r0, r4
 a20:	4b07      	ldr	r3, [pc, #28]	; (a40 <configure_extint_channel+0x28>)
 a22:	4798      	blx	r3
	config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
 a24:	230f      	movs	r3, #15
 a26:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
 a28:	2300      	movs	r3, #0
 a2a:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
 a2c:	3301      	adds	r3, #1
 a2e:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
 a30:	3302      	adds	r3, #2
 a32:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
 a34:	0021      	movs	r1, r4
 a36:	200f      	movs	r0, #15
 a38:	4b02      	ldr	r3, [pc, #8]	; (a44 <configure_extint_channel+0x2c>)
 a3a:	4798      	blx	r3
}
 a3c:	b004      	add	sp, #16
 a3e:	bd10      	pop	{r4, pc}
 a40:	000001c9 	.word	0x000001c9
 a44:	000001dd 	.word	0x000001dd

00000a48 <configure_extint_callbacks>:
{
 a48:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
 a4a:	2200      	movs	r2, #0
 a4c:	210f      	movs	r1, #15
 a4e:	4804      	ldr	r0, [pc, #16]	; (a60 <configure_extint_callbacks+0x18>)
 a50:	4b04      	ldr	r3, [pc, #16]	; (a64 <configure_extint_callbacks+0x1c>)
 a52:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
 a54:	2100      	movs	r1, #0
 a56:	200f      	movs	r0, #15
 a58:	4b03      	ldr	r3, [pc, #12]	; (a68 <configure_extint_callbacks+0x20>)
 a5a:	4798      	blx	r3
}
 a5c:	bd10      	pop	{r4, pc}
 a5e:	46c0      	nop			; (mov r8, r8)
 a60:	000009cd 	.word	0x000009cd
 a64:	00000279 	.word	0x00000279
 a68:	000002a5 	.word	0x000002a5

00000a6c <SysTick_Handler>:
 * @note				- 
 ******************************************************************************************************/
void SysTick_Handler(void)
{
	// Your code goes here
}
 a6c:	4770      	bx	lr
	...

00000a70 <sys_config>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
void sys_config(void)
{
 a70:	b510      	push	{r4, lr}
 	/*Configure system tick to generate periodic interrupts */
 	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
 a72:	2000      	movs	r0, #0
 a74:	4b11      	ldr	r3, [pc, #68]	; (abc <sys_config+0x4c>)
 a76:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 a78:	3801      	subs	r0, #1
 a7a:	4b11      	ldr	r3, [pc, #68]	; (ac0 <sys_config+0x50>)
 a7c:	4298      	cmp	r0, r3
 a7e:	d80d      	bhi.n	a9c <sys_config+0x2c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 a80:	4a10      	ldr	r2, [pc, #64]	; (ac4 <sys_config+0x54>)
 a82:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 a84:	4810      	ldr	r0, [pc, #64]	; (ac8 <sys_config+0x58>)
 a86:	6a03      	ldr	r3, [r0, #32]
 a88:	021b      	lsls	r3, r3, #8
 a8a:	0a1b      	lsrs	r3, r3, #8
 a8c:	21c0      	movs	r1, #192	; 0xc0
 a8e:	0609      	lsls	r1, r1, #24
 a90:	430b      	orrs	r3, r1
 a92:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 a94:	2300      	movs	r3, #0
 a96:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 a98:	3307      	adds	r3, #7
 a9a:	6013      	str	r3, [r2, #0]
	delay_init();
 a9c:	4b0b      	ldr	r3, [pc, #44]	; (acc <sys_config+0x5c>)
 a9e:	4798      	blx	r3

	config_led();
 aa0:	4b0b      	ldr	r3, [pc, #44]	; (ad0 <sys_config+0x60>)
 aa2:	4798      	blx	r3

 	configure_extint_channel();
 aa4:	4b0b      	ldr	r3, [pc, #44]	; (ad4 <sys_config+0x64>)
 aa6:	4798      	blx	r3
 	configure_extint_callbacks();
 aa8:	4b0b      	ldr	r3, [pc, #44]	; (ad8 <sys_config+0x68>)
 aaa:	4798      	blx	r3
	cpu_irq_enable();
 aac:	2201      	movs	r2, #1
 aae:	4b0b      	ldr	r3, [pc, #44]	; (adc <sys_config+0x6c>)
 ab0:	701a      	strb	r2, [r3, #0]
 ab2:	f3bf 8f5f 	dmb	sy
 ab6:	b662      	cpsie	i
 	system_interrupt_enable_global();
 ab8:	bd10      	pop	{r4, pc}
 aba:	46c0      	nop			; (mov r8, r8)
 abc:	000006c1 	.word	0x000006c1
 ac0:	00ffffff 	.word	0x00ffffff
 ac4:	e000e010 	.word	0xe000e010
 ac8:	e000ed00 	.word	0xe000ed00
 acc:	00000105 	.word	0x00000105
 ad0:	000009ed 	.word	0x000009ed
 ad4:	00000a19 	.word	0x00000a19
 ad8:	00000a49 	.word	0x00000a49
 adc:	20000008 	.word	0x20000008

00000ae0 <main>:
 * @note				- MCU specific definitions in (src->common2->boards) -> user_board.h, init routines in init.c
 *	                    - Peripheral config in Peripherals.c (src)
 *						- EXTINT will fire callback asynchronously. (Button0 press -> interrupt callback -> LED0 toggle)
 ******************************************************************************************************/
int main (void)
{
 ae0:	b510      	push	{r4, lr}
	system_init();
 ae2:	4b02      	ldr	r3, [pc, #8]	; (aec <main+0xc>)
 ae4:	4798      	blx	r3
	sys_config();
 ae6:	4b02      	ldr	r3, [pc, #8]	; (af0 <main+0x10>)
 ae8:	4798      	blx	r3
 aea:	e7fe      	b.n	aea <main+0xa>
 aec:	00000905 	.word	0x00000905
 af0:	00000a71 	.word	0x00000a71

00000af4 <__udivsi3>:
 af4:	2200      	movs	r2, #0
 af6:	0843      	lsrs	r3, r0, #1
 af8:	428b      	cmp	r3, r1
 afa:	d374      	bcc.n	be6 <__udivsi3+0xf2>
 afc:	0903      	lsrs	r3, r0, #4
 afe:	428b      	cmp	r3, r1
 b00:	d35f      	bcc.n	bc2 <__udivsi3+0xce>
 b02:	0a03      	lsrs	r3, r0, #8
 b04:	428b      	cmp	r3, r1
 b06:	d344      	bcc.n	b92 <__udivsi3+0x9e>
 b08:	0b03      	lsrs	r3, r0, #12
 b0a:	428b      	cmp	r3, r1
 b0c:	d328      	bcc.n	b60 <__udivsi3+0x6c>
 b0e:	0c03      	lsrs	r3, r0, #16
 b10:	428b      	cmp	r3, r1
 b12:	d30d      	bcc.n	b30 <__udivsi3+0x3c>
 b14:	22ff      	movs	r2, #255	; 0xff
 b16:	0209      	lsls	r1, r1, #8
 b18:	ba12      	rev	r2, r2
 b1a:	0c03      	lsrs	r3, r0, #16
 b1c:	428b      	cmp	r3, r1
 b1e:	d302      	bcc.n	b26 <__udivsi3+0x32>
 b20:	1212      	asrs	r2, r2, #8
 b22:	0209      	lsls	r1, r1, #8
 b24:	d065      	beq.n	bf2 <__udivsi3+0xfe>
 b26:	0b03      	lsrs	r3, r0, #12
 b28:	428b      	cmp	r3, r1
 b2a:	d319      	bcc.n	b60 <__udivsi3+0x6c>
 b2c:	e000      	b.n	b30 <__udivsi3+0x3c>
 b2e:	0a09      	lsrs	r1, r1, #8
 b30:	0bc3      	lsrs	r3, r0, #15
 b32:	428b      	cmp	r3, r1
 b34:	d301      	bcc.n	b3a <__udivsi3+0x46>
 b36:	03cb      	lsls	r3, r1, #15
 b38:	1ac0      	subs	r0, r0, r3
 b3a:	4152      	adcs	r2, r2
 b3c:	0b83      	lsrs	r3, r0, #14
 b3e:	428b      	cmp	r3, r1
 b40:	d301      	bcc.n	b46 <__udivsi3+0x52>
 b42:	038b      	lsls	r3, r1, #14
 b44:	1ac0      	subs	r0, r0, r3
 b46:	4152      	adcs	r2, r2
 b48:	0b43      	lsrs	r3, r0, #13
 b4a:	428b      	cmp	r3, r1
 b4c:	d301      	bcc.n	b52 <__udivsi3+0x5e>
 b4e:	034b      	lsls	r3, r1, #13
 b50:	1ac0      	subs	r0, r0, r3
 b52:	4152      	adcs	r2, r2
 b54:	0b03      	lsrs	r3, r0, #12
 b56:	428b      	cmp	r3, r1
 b58:	d301      	bcc.n	b5e <__udivsi3+0x6a>
 b5a:	030b      	lsls	r3, r1, #12
 b5c:	1ac0      	subs	r0, r0, r3
 b5e:	4152      	adcs	r2, r2
 b60:	0ac3      	lsrs	r3, r0, #11
 b62:	428b      	cmp	r3, r1
 b64:	d301      	bcc.n	b6a <__udivsi3+0x76>
 b66:	02cb      	lsls	r3, r1, #11
 b68:	1ac0      	subs	r0, r0, r3
 b6a:	4152      	adcs	r2, r2
 b6c:	0a83      	lsrs	r3, r0, #10
 b6e:	428b      	cmp	r3, r1
 b70:	d301      	bcc.n	b76 <__udivsi3+0x82>
 b72:	028b      	lsls	r3, r1, #10
 b74:	1ac0      	subs	r0, r0, r3
 b76:	4152      	adcs	r2, r2
 b78:	0a43      	lsrs	r3, r0, #9
 b7a:	428b      	cmp	r3, r1
 b7c:	d301      	bcc.n	b82 <__udivsi3+0x8e>
 b7e:	024b      	lsls	r3, r1, #9
 b80:	1ac0      	subs	r0, r0, r3
 b82:	4152      	adcs	r2, r2
 b84:	0a03      	lsrs	r3, r0, #8
 b86:	428b      	cmp	r3, r1
 b88:	d301      	bcc.n	b8e <__udivsi3+0x9a>
 b8a:	020b      	lsls	r3, r1, #8
 b8c:	1ac0      	subs	r0, r0, r3
 b8e:	4152      	adcs	r2, r2
 b90:	d2cd      	bcs.n	b2e <__udivsi3+0x3a>
 b92:	09c3      	lsrs	r3, r0, #7
 b94:	428b      	cmp	r3, r1
 b96:	d301      	bcc.n	b9c <__udivsi3+0xa8>
 b98:	01cb      	lsls	r3, r1, #7
 b9a:	1ac0      	subs	r0, r0, r3
 b9c:	4152      	adcs	r2, r2
 b9e:	0983      	lsrs	r3, r0, #6
 ba0:	428b      	cmp	r3, r1
 ba2:	d301      	bcc.n	ba8 <__udivsi3+0xb4>
 ba4:	018b      	lsls	r3, r1, #6
 ba6:	1ac0      	subs	r0, r0, r3
 ba8:	4152      	adcs	r2, r2
 baa:	0943      	lsrs	r3, r0, #5
 bac:	428b      	cmp	r3, r1
 bae:	d301      	bcc.n	bb4 <__udivsi3+0xc0>
 bb0:	014b      	lsls	r3, r1, #5
 bb2:	1ac0      	subs	r0, r0, r3
 bb4:	4152      	adcs	r2, r2
 bb6:	0903      	lsrs	r3, r0, #4
 bb8:	428b      	cmp	r3, r1
 bba:	d301      	bcc.n	bc0 <__udivsi3+0xcc>
 bbc:	010b      	lsls	r3, r1, #4
 bbe:	1ac0      	subs	r0, r0, r3
 bc0:	4152      	adcs	r2, r2
 bc2:	08c3      	lsrs	r3, r0, #3
 bc4:	428b      	cmp	r3, r1
 bc6:	d301      	bcc.n	bcc <__udivsi3+0xd8>
 bc8:	00cb      	lsls	r3, r1, #3
 bca:	1ac0      	subs	r0, r0, r3
 bcc:	4152      	adcs	r2, r2
 bce:	0883      	lsrs	r3, r0, #2
 bd0:	428b      	cmp	r3, r1
 bd2:	d301      	bcc.n	bd8 <__udivsi3+0xe4>
 bd4:	008b      	lsls	r3, r1, #2
 bd6:	1ac0      	subs	r0, r0, r3
 bd8:	4152      	adcs	r2, r2
 bda:	0843      	lsrs	r3, r0, #1
 bdc:	428b      	cmp	r3, r1
 bde:	d301      	bcc.n	be4 <__udivsi3+0xf0>
 be0:	004b      	lsls	r3, r1, #1
 be2:	1ac0      	subs	r0, r0, r3
 be4:	4152      	adcs	r2, r2
 be6:	1a41      	subs	r1, r0, r1
 be8:	d200      	bcs.n	bec <__udivsi3+0xf8>
 bea:	4601      	mov	r1, r0
 bec:	4152      	adcs	r2, r2
 bee:	4610      	mov	r0, r2
 bf0:	4770      	bx	lr
 bf2:	e7ff      	b.n	bf4 <__udivsi3+0x100>
 bf4:	b501      	push	{r0, lr}
 bf6:	2000      	movs	r0, #0
 bf8:	f000 f806 	bl	c08 <__aeabi_idiv0>
 bfc:	bd02      	pop	{r1, pc}
 bfe:	46c0      	nop			; (mov r8, r8)

00000c00 <__aeabi_uidivmod>:
 c00:	2900      	cmp	r1, #0
 c02:	d0f7      	beq.n	bf4 <__udivsi3+0x100>
 c04:	e776      	b.n	af4 <__udivsi3>
 c06:	4770      	bx	lr

00000c08 <__aeabi_idiv0>:
 c08:	4770      	bx	lr
 c0a:	46c0      	nop			; (mov r8, r8)

00000c0c <__libc_init_array>:
 c0c:	b570      	push	{r4, r5, r6, lr}
 c0e:	2600      	movs	r6, #0
 c10:	4d0c      	ldr	r5, [pc, #48]	; (c44 <__libc_init_array+0x38>)
 c12:	4c0d      	ldr	r4, [pc, #52]	; (c48 <__libc_init_array+0x3c>)
 c14:	1b64      	subs	r4, r4, r5
 c16:	10a4      	asrs	r4, r4, #2
 c18:	42a6      	cmp	r6, r4
 c1a:	d109      	bne.n	c30 <__libc_init_array+0x24>
 c1c:	2600      	movs	r6, #0
 c1e:	f000 f839 	bl	c94 <_init>
 c22:	4d0a      	ldr	r5, [pc, #40]	; (c4c <__libc_init_array+0x40>)
 c24:	4c0a      	ldr	r4, [pc, #40]	; (c50 <__libc_init_array+0x44>)
 c26:	1b64      	subs	r4, r4, r5
 c28:	10a4      	asrs	r4, r4, #2
 c2a:	42a6      	cmp	r6, r4
 c2c:	d105      	bne.n	c3a <__libc_init_array+0x2e>
 c2e:	bd70      	pop	{r4, r5, r6, pc}
 c30:	00b3      	lsls	r3, r6, #2
 c32:	58eb      	ldr	r3, [r5, r3]
 c34:	4798      	blx	r3
 c36:	3601      	adds	r6, #1
 c38:	e7ee      	b.n	c18 <__libc_init_array+0xc>
 c3a:	00b3      	lsls	r3, r6, #2
 c3c:	58eb      	ldr	r3, [r5, r3]
 c3e:	4798      	blx	r3
 c40:	3601      	adds	r6, #1
 c42:	e7f2      	b.n	c2a <__libc_init_array+0x1e>
 c44:	00000ca0 	.word	0x00000ca0
 c48:	00000ca0 	.word	0x00000ca0
 c4c:	00000ca0 	.word	0x00000ca0
 c50:	00000ca4 	.word	0x00000ca4
 c54:	000003d2 	.word	0x000003d2
 c58:	000003ce 	.word	0x000003ce
 c5c:	000003ce 	.word	0x000003ce
 c60:	0000041e 	.word	0x0000041e
 c64:	0000041e 	.word	0x0000041e
 c68:	000003e6 	.word	0x000003e6
 c6c:	000003d8 	.word	0x000003d8
 c70:	000003ec 	.word	0x000003ec
 c74:	000004a4 	.word	0x000004a4
 c78:	00000484 	.word	0x00000484
 c7c:	00000484 	.word	0x00000484
 c80:	000004f4 	.word	0x000004f4
 c84:	00000496 	.word	0x00000496
 c88:	000004b2 	.word	0x000004b2
 c8c:	00000488 	.word	0x00000488
 c90:	000004c0 	.word	0x000004c0

00000c94 <_init>:
 c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c96:	46c0      	nop			; (mov r8, r8)
 c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c9a:	bc08      	pop	{r3}
 c9c:	469e      	mov	lr, r3
 c9e:	4770      	bx	lr

00000ca0 <__init_array_start>:
 ca0:	000000cd 	.word	0x000000cd

00000ca4 <_fini>:
 ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 ca6:	46c0      	nop			; (mov r8, r8)
 ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 caa:	bc08      	pop	{r3}
 cac:	469e      	mov	lr, r3
 cae:	4770      	bx	lr

00000cb0 <__fini_array_start>:
 cb0:	000000a5 	.word	0x000000a5
