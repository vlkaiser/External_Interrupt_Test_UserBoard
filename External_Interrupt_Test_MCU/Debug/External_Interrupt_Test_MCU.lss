
External_Interrupt_Test_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000978  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00000978  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007c  20000004  0000097c  00020004  2**2
                  ALLOC
  3 .stack        00002000  20000080  000009f8  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00010b1c  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022b2  00000000  00000000  00030ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000202c  00000000  00000000  00032e53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000002b8  00000000  00000000  00034e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000290  00000000  00000000  00035137  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000042b6  00000000  00000000  000353c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006d03  00000000  00000000  0003967d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00060322  00000000  00000000  00040380  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000005c8  00000000  00000000  000a06a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	80 20 00 20 b9 07 00 00 b5 07 00 00 b5 07 00 00     . . ............
	...
  2c:	b5 07 00 00 00 00 00 00 00 00 00 00 b5 07 00 00     ................
  3c:	b5 07 00 00 b5 07 00 00 b5 07 00 00 b5 07 00 00     ................
  4c:	b5 07 00 00 85 02 00 00 b5 07 00 00 b5 07 00 00     ................
  5c:	b5 07 00 00 b5 07 00 00 b5 07 00 00 b5 07 00 00     ................
  6c:	b5 07 00 00 b5 07 00 00 b5 07 00 00 b5 07 00 00     ................
  7c:	b5 07 00 00 b5 07 00 00 b5 07 00 00 b5 07 00 00     ................
  8c:	b5 07 00 00 b5 07 00 00 b5 07 00 00 b5 07 00 00     ................
  9c:	b5 07 00 00 b5 07 00 00                             ........

000000a4 <__do_global_dtors_aux>:
  a4:	b510      	push	{r4, lr}
  a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
  a8:	7823      	ldrb	r3, [r4, #0]
  aa:	2b00      	cmp	r3, #0
  ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
  ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
  b0:	2b00      	cmp	r3, #0
  b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
  b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
  b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
  b8:	bf00      	nop
  ba:	2301      	movs	r3, #1
  bc:	7023      	strb	r3, [r4, #0]
  be:	bd10      	pop	{r4, pc}
  c0:	20000004 	.word	0x20000004
  c4:	00000000 	.word	0x00000000
  c8:	00000978 	.word	0x00000978

000000cc <frame_dummy>:
  cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
  ce:	b510      	push	{r4, lr}
  d0:	2b00      	cmp	r3, #0
  d2:	d003      	beq.n	dc <frame_dummy+0x10>
  d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
  d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
  d8:	e000      	b.n	dc <frame_dummy+0x10>
  da:	bf00      	nop
  dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
  de:	6803      	ldr	r3, [r0, #0]
  e0:	2b00      	cmp	r3, #0
  e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
  e4:	bd10      	pop	{r4, pc}
  e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
  e8:	2b00      	cmp	r3, #0
  ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
  ec:	4798      	blx	r3
  ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
  f0:	00000000 	.word	0x00000000
  f4:	20000008 	.word	0x20000008
  f8:	00000978 	.word	0x00000978
  fc:	00000978 	.word	0x00000978
 100:	00000000 	.word	0x00000000

00000104 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
 104:	4a04      	ldr	r2, [pc, #16]	; (118 <_extint_enable+0x14>)
 106:	7813      	ldrb	r3, [r2, #0]
 108:	2102      	movs	r1, #2
 10a:	430b      	orrs	r3, r1
 10c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
 10e:	7853      	ldrb	r3, [r2, #1]
 110:	b25b      	sxtb	r3, r3
 112:	2b00      	cmp	r3, #0
 114:	dbfb      	blt.n	10e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
 116:	4770      	bx	lr
 118:	40001800 	.word	0x40001800

0000011c <_system_extint_init>:
{
 11c:	b500      	push	{lr}
 11e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
 120:	4a12      	ldr	r2, [pc, #72]	; (16c <_system_extint_init+0x50>)
 122:	6993      	ldr	r3, [r2, #24]
 124:	2140      	movs	r1, #64	; 0x40
 126:	430b      	orrs	r3, r1
 128:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
 12a:	a901      	add	r1, sp, #4
 12c:	2300      	movs	r3, #0
 12e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
 130:	2003      	movs	r0, #3
 132:	4b0f      	ldr	r3, [pc, #60]	; (170 <_system_extint_init+0x54>)
 134:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
 136:	2003      	movs	r0, #3
 138:	4b0e      	ldr	r3, [pc, #56]	; (174 <_system_extint_init+0x58>)
 13a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
 13c:	4a0e      	ldr	r2, [pc, #56]	; (178 <_system_extint_init+0x5c>)
 13e:	7813      	ldrb	r3, [r2, #0]
 140:	2101      	movs	r1, #1
 142:	430b      	orrs	r3, r1
 144:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
 146:	7853      	ldrb	r3, [r2, #1]
 148:	b25b      	sxtb	r3, r3
 14a:	2b00      	cmp	r3, #0
 14c:	dbfb      	blt.n	146 <_system_extint_init+0x2a>
 14e:	4b0b      	ldr	r3, [pc, #44]	; (17c <_system_extint_init+0x60>)
 150:	0019      	movs	r1, r3
 152:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
 154:	2200      	movs	r2, #0
 156:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
 158:	4299      	cmp	r1, r3
 15a:	d1fc      	bne.n	156 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
 15c:	2210      	movs	r2, #16
 15e:	4b08      	ldr	r3, [pc, #32]	; (180 <_system_extint_init+0x64>)
 160:	601a      	str	r2, [r3, #0]
	_extint_enable();
 162:	4b08      	ldr	r3, [pc, #32]	; (184 <_system_extint_init+0x68>)
 164:	4798      	blx	r3
}
 166:	b003      	add	sp, #12
 168:	bd00      	pop	{pc}
 16a:	46c0      	nop			; (mov r8, r8)
 16c:	40000400 	.word	0x40000400
 170:	00000691 	.word	0x00000691
 174:	00000605 	.word	0x00000605
 178:	40001800 	.word	0x40001800
 17c:	2000003c 	.word	0x2000003c
 180:	e000e100 	.word	0xe000e100
 184:	00000105 	.word	0x00000105

00000188 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
 188:	2300      	movs	r3, #0
 18a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
 18c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
 18e:	2201      	movs	r2, #1
 190:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
 192:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
 194:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
 196:	3302      	adds	r3, #2
 198:	72c3      	strb	r3, [r0, #11]
}
 19a:	4770      	bx	lr

0000019c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
 19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 19e:	b083      	sub	sp, #12
 1a0:	0005      	movs	r5, r0
 1a2:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
 1a4:	a901      	add	r1, sp, #4
 1a6:	2300      	movs	r3, #0
 1a8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
 1aa:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
 1ac:	7923      	ldrb	r3, [r4, #4]
 1ae:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
 1b0:	7a23      	ldrb	r3, [r4, #8]
 1b2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
 1b4:	7820      	ldrb	r0, [r4, #0]
 1b6:	4b15      	ldr	r3, [pc, #84]	; (20c <extint_chan_set_config+0x70>)
 1b8:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
 1ba:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
 1bc:	2d1f      	cmp	r5, #31
 1be:	d800      	bhi.n	1c2 <extint_chan_set_config+0x26>
		return eics[eic_index];
 1c0:	4813      	ldr	r0, [pc, #76]	; (210 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
 1c2:	2207      	movs	r2, #7
 1c4:	402a      	ands	r2, r5
 1c6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
 1c8:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
 1ca:	7aa3      	ldrb	r3, [r4, #10]
 1cc:	2b00      	cmp	r3, #0
 1ce:	d001      	beq.n	1d4 <extint_chan_set_config+0x38>
 1d0:	2308      	movs	r3, #8
 1d2:	431f      	orrs	r7, r3
 1d4:	08eb      	lsrs	r3, r5, #3
 1d6:	009b      	lsls	r3, r3, #2
 1d8:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
 1da:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
 1dc:	260f      	movs	r6, #15
 1de:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
 1e0:	43b1      	bics	r1, r6
			(new_config << config_pos);
 1e2:	4097      	lsls	r7, r2
 1e4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
 1e6:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
 1e8:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
 1ea:	7a63      	ldrb	r3, [r4, #9]
 1ec:	2b00      	cmp	r3, #0
 1ee:	d106      	bne.n	1fe <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
 1f0:	6943      	ldr	r3, [r0, #20]
 1f2:	2201      	movs	r2, #1
 1f4:	40aa      	lsls	r2, r5
 1f6:	4393      	bics	r3, r2
 1f8:	6143      	str	r3, [r0, #20]
	}
}
 1fa:	b003      	add	sp, #12
 1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
 1fe:	6942      	ldr	r2, [r0, #20]
 200:	2301      	movs	r3, #1
 202:	40ab      	lsls	r3, r5
 204:	4313      	orrs	r3, r2
 206:	6143      	str	r3, [r0, #20]
 208:	e7f7      	b.n	1fa <extint_chan_set_config+0x5e>
 20a:	46c0      	nop			; (mov r8, r8)
 20c:	00000755 	.word	0x00000755
 210:	40001800 	.word	0x40001800

00000214 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 214:	b500      	push	{lr}
 216:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
 218:	ab01      	add	r3, sp, #4
 21a:	2280      	movs	r2, #128	; 0x80
 21c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 21e:	780a      	ldrb	r2, [r1, #0]
 220:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 222:	784a      	ldrb	r2, [r1, #1]
 224:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 226:	788a      	ldrb	r2, [r1, #2]
 228:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 22a:	0019      	movs	r1, r3
 22c:	4b01      	ldr	r3, [pc, #4]	; (234 <port_pin_set_config+0x20>)
 22e:	4798      	blx	r3
}
 230:	b003      	add	sp, #12
 232:	bd00      	pop	{pc}
 234:	00000755 	.word	0x00000755

00000238 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 238:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
 23a:	2a00      	cmp	r2, #0
 23c:	d001      	beq.n	242 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
 23e:	0018      	movs	r0, r3
 240:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
 242:	008b      	lsls	r3, r1, #2
 244:	4a06      	ldr	r2, [pc, #24]	; (260 <extint_register_callback+0x28>)
 246:	589b      	ldr	r3, [r3, r2]
 248:	2b00      	cmp	r3, #0
 24a:	d003      	beq.n	254 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
 24c:	4283      	cmp	r3, r0
 24e:	d005      	beq.n	25c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
 250:	231d      	movs	r3, #29
 252:	e7f4      	b.n	23e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
 254:	0089      	lsls	r1, r1, #2
 256:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
 258:	2300      	movs	r3, #0
 25a:	e7f0      	b.n	23e <extint_register_callback+0x6>
		return STATUS_OK;
 25c:	2300      	movs	r3, #0
 25e:	e7ee      	b.n	23e <extint_register_callback+0x6>
 260:	2000003c 	.word	0x2000003c

00000264 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 264:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
 266:	2900      	cmp	r1, #0
 268:	d001      	beq.n	26e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
 26a:	0018      	movs	r0, r3
 26c:	4770      	bx	lr
		return NULL;
 26e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
 270:	281f      	cmp	r0, #31
 272:	d800      	bhi.n	276 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
 274:	4a02      	ldr	r2, [pc, #8]	; (280 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
 276:	2301      	movs	r3, #1
 278:	4083      	lsls	r3, r0
 27a:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
 27c:	2300      	movs	r3, #0
 27e:	e7f4      	b.n	26a <extint_chan_enable_callback+0x6>
 280:	40001800 	.word	0x40001800

00000284 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
 284:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
 286:	2200      	movs	r2, #0
 288:	4b10      	ldr	r3, [pc, #64]	; (2cc <EIC_Handler+0x48>)
 28a:	701a      	strb	r2, [r3, #0]
 28c:	2300      	movs	r3, #0
 28e:	4910      	ldr	r1, [pc, #64]	; (2d0 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
 290:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
 292:	4e10      	ldr	r6, [pc, #64]	; (2d4 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
 294:	4c0d      	ldr	r4, [pc, #52]	; (2cc <EIC_Handler+0x48>)
 296:	e00a      	b.n	2ae <EIC_Handler+0x2a>
		return eics[eic_index];
 298:	490d      	ldr	r1, [pc, #52]	; (2d0 <EIC_Handler+0x4c>)
 29a:	e008      	b.n	2ae <EIC_Handler+0x2a>
 29c:	7823      	ldrb	r3, [r4, #0]
 29e:	3301      	adds	r3, #1
 2a0:	b2db      	uxtb	r3, r3
 2a2:	7023      	strb	r3, [r4, #0]
 2a4:	2b0f      	cmp	r3, #15
 2a6:	d810      	bhi.n	2ca <EIC_Handler+0x46>
		return NULL;
 2a8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
 2aa:	2b1f      	cmp	r3, #31
 2ac:	d9f4      	bls.n	298 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
 2ae:	0028      	movs	r0, r5
 2b0:	4018      	ands	r0, r3
 2b2:	2201      	movs	r2, #1
 2b4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
 2b6:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
 2b8:	4210      	tst	r0, r2
 2ba:	d0ef      	beq.n	29c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
 2bc:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
 2be:	009b      	lsls	r3, r3, #2
 2c0:	599b      	ldr	r3, [r3, r6]
 2c2:	2b00      	cmp	r3, #0
 2c4:	d0ea      	beq.n	29c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
 2c6:	4798      	blx	r3
 2c8:	e7e8      	b.n	29c <EIC_Handler+0x18>
			}
		}
	}
}
 2ca:	bd70      	pop	{r4, r5, r6, pc}
 2cc:	2000007c 	.word	0x2000007c
 2d0:	40001800 	.word	0x40001800
 2d4:	2000003c 	.word	0x2000003c

000002d8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
 2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 2da:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 2dc:	ac01      	add	r4, sp, #4
 2de:	2501      	movs	r5, #1
 2e0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
 2e2:	2700      	movs	r7, #0
 2e4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 2e6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 2e8:	0021      	movs	r1, r4
 2ea:	200e      	movs	r0, #14
 2ec:	4e06      	ldr	r6, [pc, #24]	; (308 <system_board_init+0x30>)
 2ee:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 2f0:	2280      	movs	r2, #128	; 0x80
 2f2:	01d2      	lsls	r2, r2, #7
 2f4:	4b05      	ldr	r3, [pc, #20]	; (30c <system_board_init+0x34>)
 2f6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
 2f8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
 2fa:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 2fc:	0021      	movs	r1, r4
 2fe:	200f      	movs	r0, #15
 300:	47b0      	blx	r6

 302:	b003      	add	sp, #12
 304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 306:	46c0      	nop			; (mov r8, r8)
 308:	00000215 	.word	0x00000215
 30c:	41004400 	.word	0x41004400

00000310 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 310:	4b0c      	ldr	r3, [pc, #48]	; (344 <cpu_irq_enter_critical+0x34>)
 312:	681b      	ldr	r3, [r3, #0]
 314:	2b00      	cmp	r3, #0
 316:	d106      	bne.n	326 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 318:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 31c:	2b00      	cmp	r3, #0
 31e:	d007      	beq.n	330 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 320:	2200      	movs	r2, #0
 322:	4b09      	ldr	r3, [pc, #36]	; (348 <cpu_irq_enter_critical+0x38>)
 324:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 326:	4a07      	ldr	r2, [pc, #28]	; (344 <cpu_irq_enter_critical+0x34>)
 328:	6813      	ldr	r3, [r2, #0]
 32a:	3301      	adds	r3, #1
 32c:	6013      	str	r3, [r2, #0]
}
 32e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 330:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 332:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 336:	2200      	movs	r2, #0
 338:	4b04      	ldr	r3, [pc, #16]	; (34c <cpu_irq_enter_critical+0x3c>)
 33a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 33c:	3201      	adds	r2, #1
 33e:	4b02      	ldr	r3, [pc, #8]	; (348 <cpu_irq_enter_critical+0x38>)
 340:	701a      	strb	r2, [r3, #0]
 342:	e7f0      	b.n	326 <cpu_irq_enter_critical+0x16>
 344:	20000020 	.word	0x20000020
 348:	20000024 	.word	0x20000024
 34c:	20000000 	.word	0x20000000

00000350 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 350:	4b08      	ldr	r3, [pc, #32]	; (374 <cpu_irq_leave_critical+0x24>)
 352:	681a      	ldr	r2, [r3, #0]
 354:	3a01      	subs	r2, #1
 356:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 358:	681b      	ldr	r3, [r3, #0]
 35a:	2b00      	cmp	r3, #0
 35c:	d109      	bne.n	372 <cpu_irq_leave_critical+0x22>
 35e:	4b06      	ldr	r3, [pc, #24]	; (378 <cpu_irq_leave_critical+0x28>)
 360:	781b      	ldrb	r3, [r3, #0]
 362:	2b00      	cmp	r3, #0
 364:	d005      	beq.n	372 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 366:	2201      	movs	r2, #1
 368:	4b04      	ldr	r3, [pc, #16]	; (37c <cpu_irq_leave_critical+0x2c>)
 36a:	701a      	strb	r2, [r3, #0]
 36c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 370:	b662      	cpsie	i
	}
}
 372:	4770      	bx	lr
 374:	20000020 	.word	0x20000020
 378:	20000024 	.word	0x20000024
 37c:	20000000 	.word	0x20000000

00000380 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 380:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 382:	490c      	ldr	r1, [pc, #48]	; (3b4 <system_clock_source_osc8m_set_config+0x34>)
 384:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 386:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 388:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 38a:	7840      	ldrb	r0, [r0, #1]
 38c:	2201      	movs	r2, #1
 38e:	4010      	ands	r0, r2
 390:	0180      	lsls	r0, r0, #6
 392:	2640      	movs	r6, #64	; 0x40
 394:	43b3      	bics	r3, r6
 396:	4303      	orrs	r3, r0
 398:	402a      	ands	r2, r5
 39a:	01d2      	lsls	r2, r2, #7
 39c:	2080      	movs	r0, #128	; 0x80
 39e:	4383      	bics	r3, r0
 3a0:	4313      	orrs	r3, r2
 3a2:	2203      	movs	r2, #3
 3a4:	4022      	ands	r2, r4
 3a6:	0212      	lsls	r2, r2, #8
 3a8:	4803      	ldr	r0, [pc, #12]	; (3b8 <system_clock_source_osc8m_set_config+0x38>)
 3aa:	4003      	ands	r3, r0
 3ac:	4313      	orrs	r3, r2
 3ae:	620b      	str	r3, [r1, #32]
}
 3b0:	bd70      	pop	{r4, r5, r6, pc}
 3b2:	46c0      	nop			; (mov r8, r8)
 3b4:	40000800 	.word	0x40000800
 3b8:	fffffcff 	.word	0xfffffcff

000003bc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 3bc:	2807      	cmp	r0, #7
 3be:	d803      	bhi.n	3c8 <system_clock_source_enable+0xc>
 3c0:	0080      	lsls	r0, r0, #2
 3c2:	4b1e      	ldr	r3, [pc, #120]	; (43c <system_clock_source_enable+0x80>)
 3c4:	581b      	ldr	r3, [r3, r0]
 3c6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 3c8:	2017      	movs	r0, #23
 3ca:	e036      	b.n	43a <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 3cc:	4a1c      	ldr	r2, [pc, #112]	; (440 <system_clock_source_enable+0x84>)
 3ce:	6a13      	ldr	r3, [r2, #32]
 3d0:	2102      	movs	r1, #2
 3d2:	430b      	orrs	r3, r1
 3d4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 3d6:	2000      	movs	r0, #0
 3d8:	e02f      	b.n	43a <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 3da:	4a19      	ldr	r2, [pc, #100]	; (440 <system_clock_source_enable+0x84>)
 3dc:	6993      	ldr	r3, [r2, #24]
 3de:	2102      	movs	r1, #2
 3e0:	430b      	orrs	r3, r1
 3e2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
 3e4:	2000      	movs	r0, #0
		break;
 3e6:	e028      	b.n	43a <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 3e8:	4a15      	ldr	r2, [pc, #84]	; (440 <system_clock_source_enable+0x84>)
 3ea:	8a13      	ldrh	r3, [r2, #16]
 3ec:	2102      	movs	r1, #2
 3ee:	430b      	orrs	r3, r1
 3f0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
 3f2:	2000      	movs	r0, #0
		break;
 3f4:	e021      	b.n	43a <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 3f6:	4a12      	ldr	r2, [pc, #72]	; (440 <system_clock_source_enable+0x84>)
 3f8:	8a93      	ldrh	r3, [r2, #20]
 3fa:	2102      	movs	r1, #2
 3fc:	430b      	orrs	r3, r1
 3fe:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
 400:	2000      	movs	r0, #0
		break;
 402:	e01a      	b.n	43a <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 404:	4b0f      	ldr	r3, [pc, #60]	; (444 <system_clock_source_enable+0x88>)
 406:	681a      	ldr	r2, [r3, #0]
 408:	2102      	movs	r1, #2
 40a:	430a      	orrs	r2, r1
 40c:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
 40e:	681b      	ldr	r3, [r3, #0]
 410:	4a0d      	ldr	r2, [pc, #52]	; (448 <system_clock_source_enable+0x8c>)
 412:	4013      	ands	r3, r2
 414:	4a0a      	ldr	r2, [pc, #40]	; (440 <system_clock_source_enable+0x84>)
 416:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 418:	0011      	movs	r1, r2
 41a:	2210      	movs	r2, #16
 41c:	68cb      	ldr	r3, [r1, #12]
 41e:	421a      	tst	r2, r3
 420:	d0fc      	beq.n	41c <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 422:	4a08      	ldr	r2, [pc, #32]	; (444 <system_clock_source_enable+0x88>)
 424:	6891      	ldr	r1, [r2, #8]
 426:	4b06      	ldr	r3, [pc, #24]	; (440 <system_clock_source_enable+0x84>)
 428:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 42a:	6851      	ldr	r1, [r2, #4]
 42c:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 42e:	6812      	ldr	r2, [r2, #0]
 430:	b292      	uxth	r2, r2
 432:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
 434:	2000      	movs	r0, #0
 436:	e000      	b.n	43a <system_clock_source_enable+0x7e>
		return STATUS_OK;
 438:	2000      	movs	r0, #0
}
 43a:	4770      	bx	lr
 43c:	00000938 	.word	0x00000938
 440:	40000800 	.word	0x40000800
 444:	20000028 	.word	0x20000028
 448:	0000ff7f 	.word	0x0000ff7f

0000044c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 44c:	b530      	push	{r4, r5, lr}
 44e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 450:	22c2      	movs	r2, #194	; 0xc2
 452:	00d2      	lsls	r2, r2, #3
 454:	4b1a      	ldr	r3, [pc, #104]	; (4c0 <system_clock_init+0x74>)
 456:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 458:	4a1a      	ldr	r2, [pc, #104]	; (4c4 <system_clock_init+0x78>)
 45a:	6853      	ldr	r3, [r2, #4]
 45c:	211e      	movs	r1, #30
 45e:	438b      	bics	r3, r1
 460:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 462:	2301      	movs	r3, #1
 464:	466a      	mov	r2, sp
 466:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 468:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 46a:	4d17      	ldr	r5, [pc, #92]	; (4c8 <system_clock_init+0x7c>)
 46c:	b2e0      	uxtb	r0, r4
 46e:	4669      	mov	r1, sp
 470:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 472:	3401      	adds	r4, #1
 474:	2c1c      	cmp	r4, #28
 476:	d1f9      	bne.n	46c <system_clock_init+0x20>
	config->run_in_standby  = false;
 478:	a803      	add	r0, sp, #12
 47a:	2400      	movs	r4, #0
 47c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 47e:	2501      	movs	r5, #1
 480:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 482:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 484:	4b11      	ldr	r3, [pc, #68]	; (4cc <system_clock_init+0x80>)
 486:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 488:	2006      	movs	r0, #6
 48a:	4b11      	ldr	r3, [pc, #68]	; (4d0 <system_clock_init+0x84>)
 48c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 48e:	4b11      	ldr	r3, [pc, #68]	; (4d4 <system_clock_init+0x88>)
 490:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
 492:	4b11      	ldr	r3, [pc, #68]	; (4d8 <system_clock_init+0x8c>)
 494:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
 496:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
 498:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
 49a:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
 49c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 49e:	466b      	mov	r3, sp
 4a0:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
 4a2:	2306      	movs	r3, #6
 4a4:	466a      	mov	r2, sp
 4a6:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
 4a8:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 4aa:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 4ac:	4669      	mov	r1, sp
 4ae:	2000      	movs	r0, #0
 4b0:	4b0a      	ldr	r3, [pc, #40]	; (4dc <system_clock_init+0x90>)
 4b2:	4798      	blx	r3
 4b4:	2000      	movs	r0, #0
 4b6:	4b0a      	ldr	r3, [pc, #40]	; (4e0 <system_clock_init+0x94>)
 4b8:	4798      	blx	r3
#endif
}
 4ba:	b005      	add	sp, #20
 4bc:	bd30      	pop	{r4, r5, pc}
 4be:	46c0      	nop			; (mov r8, r8)
 4c0:	40000800 	.word	0x40000800
 4c4:	41004000 	.word	0x41004000
 4c8:	00000691 	.word	0x00000691
 4cc:	00000381 	.word	0x00000381
 4d0:	000003bd 	.word	0x000003bd
 4d4:	000004e5 	.word	0x000004e5
 4d8:	40000400 	.word	0x40000400
 4dc:	00000509 	.word	0x00000509
 4e0:	000005c1 	.word	0x000005c1

000004e4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
 4e4:	4a06      	ldr	r2, [pc, #24]	; (500 <system_gclk_init+0x1c>)
 4e6:	6993      	ldr	r3, [r2, #24]
 4e8:	2108      	movs	r1, #8
 4ea:	430b      	orrs	r3, r1
 4ec:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 4ee:	2201      	movs	r2, #1
 4f0:	4b04      	ldr	r3, [pc, #16]	; (504 <system_gclk_init+0x20>)
 4f2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 4f4:	0019      	movs	r1, r3
 4f6:	780b      	ldrb	r3, [r1, #0]
 4f8:	4213      	tst	r3, r2
 4fa:	d1fc      	bne.n	4f6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 4fc:	4770      	bx	lr
 4fe:	46c0      	nop			; (mov r8, r8)
 500:	40000400 	.word	0x40000400
 504:	40000c00 	.word	0x40000c00

00000508 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 508:	b570      	push	{r4, r5, r6, lr}
 50a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 50c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 50e:	780d      	ldrb	r5, [r1, #0]
 510:	022d      	lsls	r5, r5, #8
 512:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 514:	784b      	ldrb	r3, [r1, #1]
 516:	2b00      	cmp	r3, #0
 518:	d002      	beq.n	520 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 51a:	2380      	movs	r3, #128	; 0x80
 51c:	02db      	lsls	r3, r3, #11
 51e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 520:	7a4b      	ldrb	r3, [r1, #9]
 522:	2b00      	cmp	r3, #0
 524:	d002      	beq.n	52c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 526:	2380      	movs	r3, #128	; 0x80
 528:	031b      	lsls	r3, r3, #12
 52a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 52c:	6848      	ldr	r0, [r1, #4]
 52e:	2801      	cmp	r0, #1
 530:	d910      	bls.n	554 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 532:	1e43      	subs	r3, r0, #1
 534:	4218      	tst	r0, r3
 536:	d134      	bne.n	5a2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 538:	2802      	cmp	r0, #2
 53a:	d930      	bls.n	59e <system_gclk_gen_set_config+0x96>
 53c:	2302      	movs	r3, #2
 53e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 540:	3201      	adds	r2, #1
						mask <<= 1) {
 542:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 544:	4298      	cmp	r0, r3
 546:	d8fb      	bhi.n	540 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 548:	0212      	lsls	r2, r2, #8
 54a:	4332      	orrs	r2, r6
 54c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 54e:	2380      	movs	r3, #128	; 0x80
 550:	035b      	lsls	r3, r3, #13
 552:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 554:	7a0b      	ldrb	r3, [r1, #8]
 556:	2b00      	cmp	r3, #0
 558:	d002      	beq.n	560 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 55a:	2380      	movs	r3, #128	; 0x80
 55c:	039b      	lsls	r3, r3, #14
 55e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 560:	4a13      	ldr	r2, [pc, #76]	; (5b0 <system_gclk_gen_set_config+0xa8>)
 562:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
 564:	b25b      	sxtb	r3, r3
 566:	2b00      	cmp	r3, #0
 568:	dbfb      	blt.n	562 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
 56a:	4b12      	ldr	r3, [pc, #72]	; (5b4 <system_gclk_gen_set_config+0xac>)
 56c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 56e:	4b12      	ldr	r3, [pc, #72]	; (5b8 <system_gclk_gen_set_config+0xb0>)
 570:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 572:	4a0f      	ldr	r2, [pc, #60]	; (5b0 <system_gclk_gen_set_config+0xa8>)
 574:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 576:	b25b      	sxtb	r3, r3
 578:	2b00      	cmp	r3, #0
 57a:	dbfb      	blt.n	574 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 57c:	4b0c      	ldr	r3, [pc, #48]	; (5b0 <system_gclk_gen_set_config+0xa8>)
 57e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 580:	001a      	movs	r2, r3
 582:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
 584:	b25b      	sxtb	r3, r3
 586:	2b00      	cmp	r3, #0
 588:	dbfb      	blt.n	582 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 58a:	4a09      	ldr	r2, [pc, #36]	; (5b0 <system_gclk_gen_set_config+0xa8>)
 58c:	6853      	ldr	r3, [r2, #4]
 58e:	2180      	movs	r1, #128	; 0x80
 590:	0249      	lsls	r1, r1, #9
 592:	400b      	ands	r3, r1
 594:	431d      	orrs	r5, r3
 596:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
 598:	4b08      	ldr	r3, [pc, #32]	; (5bc <system_gclk_gen_set_config+0xb4>)
 59a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 59c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
 59e:	2200      	movs	r2, #0
 5a0:	e7d2      	b.n	548 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 5a2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
 5a4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 5a6:	2380      	movs	r3, #128	; 0x80
 5a8:	029b      	lsls	r3, r3, #10
 5aa:	431d      	orrs	r5, r3
 5ac:	e7d2      	b.n	554 <system_gclk_gen_set_config+0x4c>
 5ae:	46c0      	nop			; (mov r8, r8)
 5b0:	40000c00 	.word	0x40000c00
 5b4:	00000311 	.word	0x00000311
 5b8:	40000c08 	.word	0x40000c08
 5bc:	00000351 	.word	0x00000351

000005c0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 5c0:	b510      	push	{r4, lr}
 5c2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 5c4:	4a0b      	ldr	r2, [pc, #44]	; (5f4 <system_gclk_gen_enable+0x34>)
 5c6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 5c8:	b25b      	sxtb	r3, r3
 5ca:	2b00      	cmp	r3, #0
 5cc:	dbfb      	blt.n	5c6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
 5ce:	4b0a      	ldr	r3, [pc, #40]	; (5f8 <system_gclk_gen_enable+0x38>)
 5d0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 5d2:	4b0a      	ldr	r3, [pc, #40]	; (5fc <system_gclk_gen_enable+0x3c>)
 5d4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 5d6:	4a07      	ldr	r2, [pc, #28]	; (5f4 <system_gclk_gen_enable+0x34>)
 5d8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 5da:	b25b      	sxtb	r3, r3
 5dc:	2b00      	cmp	r3, #0
 5de:	dbfb      	blt.n	5d8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 5e0:	4a04      	ldr	r2, [pc, #16]	; (5f4 <system_gclk_gen_enable+0x34>)
 5e2:	6851      	ldr	r1, [r2, #4]
 5e4:	2380      	movs	r3, #128	; 0x80
 5e6:	025b      	lsls	r3, r3, #9
 5e8:	430b      	orrs	r3, r1
 5ea:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
 5ec:	4b04      	ldr	r3, [pc, #16]	; (600 <system_gclk_gen_enable+0x40>)
 5ee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 5f0:	bd10      	pop	{r4, pc}
 5f2:	46c0      	nop			; (mov r8, r8)
 5f4:	40000c00 	.word	0x40000c00
 5f8:	00000311 	.word	0x00000311
 5fc:	40000c04 	.word	0x40000c04
 600:	00000351 	.word	0x00000351

00000604 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
 604:	b510      	push	{r4, lr}
 606:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 608:	4b06      	ldr	r3, [pc, #24]	; (624 <system_gclk_chan_enable+0x20>)
 60a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 60c:	4b06      	ldr	r3, [pc, #24]	; (628 <system_gclk_chan_enable+0x24>)
 60e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
 610:	4a06      	ldr	r2, [pc, #24]	; (62c <system_gclk_chan_enable+0x28>)
 612:	8853      	ldrh	r3, [r2, #2]
 614:	2180      	movs	r1, #128	; 0x80
 616:	01c9      	lsls	r1, r1, #7
 618:	430b      	orrs	r3, r1
 61a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
 61c:	4b04      	ldr	r3, [pc, #16]	; (630 <system_gclk_chan_enable+0x2c>)
 61e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 620:	bd10      	pop	{r4, pc}
 622:	46c0      	nop			; (mov r8, r8)
 624:	00000311 	.word	0x00000311
 628:	40000c02 	.word	0x40000c02
 62c:	40000c00 	.word	0x40000c00
 630:	00000351 	.word	0x00000351

00000634 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 634:	b510      	push	{r4, lr}
 636:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 638:	4b0f      	ldr	r3, [pc, #60]	; (678 <system_gclk_chan_disable+0x44>)
 63a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 63c:	4b0f      	ldr	r3, [pc, #60]	; (67c <system_gclk_chan_disable+0x48>)
 63e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 640:	4a0f      	ldr	r2, [pc, #60]	; (680 <system_gclk_chan_disable+0x4c>)
 642:	8853      	ldrh	r3, [r2, #2]
 644:	051b      	lsls	r3, r3, #20
 646:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 648:	8853      	ldrh	r3, [r2, #2]
 64a:	490e      	ldr	r1, [pc, #56]	; (684 <system_gclk_chan_disable+0x50>)
 64c:	400b      	ands	r3, r1
 64e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 650:	8853      	ldrh	r3, [r2, #2]
 652:	490d      	ldr	r1, [pc, #52]	; (688 <system_gclk_chan_disable+0x54>)
 654:	400b      	ands	r3, r1
 656:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 658:	0011      	movs	r1, r2
 65a:	2280      	movs	r2, #128	; 0x80
 65c:	01d2      	lsls	r2, r2, #7
 65e:	884b      	ldrh	r3, [r1, #2]
 660:	4213      	tst	r3, r2
 662:	d1fc      	bne.n	65e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 664:	4906      	ldr	r1, [pc, #24]	; (680 <system_gclk_chan_disable+0x4c>)
 666:	884a      	ldrh	r2, [r1, #2]
 668:	0203      	lsls	r3, r0, #8
 66a:	4806      	ldr	r0, [pc, #24]	; (684 <system_gclk_chan_disable+0x50>)
 66c:	4002      	ands	r2, r0
 66e:	4313      	orrs	r3, r2
 670:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
 672:	4b06      	ldr	r3, [pc, #24]	; (68c <system_gclk_chan_disable+0x58>)
 674:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 676:	bd10      	pop	{r4, pc}
 678:	00000311 	.word	0x00000311
 67c:	40000c02 	.word	0x40000c02
 680:	40000c00 	.word	0x40000c00
 684:	fffff0ff 	.word	0xfffff0ff
 688:	ffffbfff 	.word	0xffffbfff
 68c:	00000351 	.word	0x00000351

00000690 <system_gclk_chan_set_config>:
{
 690:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 692:	780c      	ldrb	r4, [r1, #0]
 694:	0224      	lsls	r4, r4, #8
 696:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
 698:	4b02      	ldr	r3, [pc, #8]	; (6a4 <system_gclk_chan_set_config+0x14>)
 69a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 69c:	b2a4      	uxth	r4, r4
 69e:	4b02      	ldr	r3, [pc, #8]	; (6a8 <system_gclk_chan_set_config+0x18>)
 6a0:	805c      	strh	r4, [r3, #2]
}
 6a2:	bd10      	pop	{r4, pc}
 6a4:	00000635 	.word	0x00000635
 6a8:	40000c00 	.word	0x40000c00

000006ac <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 6ac:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 6ae:	78d3      	ldrb	r3, [r2, #3]
 6b0:	2b00      	cmp	r3, #0
 6b2:	d135      	bne.n	720 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 6b4:	7813      	ldrb	r3, [r2, #0]
 6b6:	2b80      	cmp	r3, #128	; 0x80
 6b8:	d029      	beq.n	70e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 6ba:	061b      	lsls	r3, r3, #24
 6bc:	2480      	movs	r4, #128	; 0x80
 6be:	0264      	lsls	r4, r4, #9
 6c0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 6c2:	7854      	ldrb	r4, [r2, #1]
 6c4:	2502      	movs	r5, #2
 6c6:	43ac      	bics	r4, r5
 6c8:	d106      	bne.n	6d8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 6ca:	7894      	ldrb	r4, [r2, #2]
 6cc:	2c00      	cmp	r4, #0
 6ce:	d120      	bne.n	712 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
 6d0:	2480      	movs	r4, #128	; 0x80
 6d2:	02a4      	lsls	r4, r4, #10
 6d4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 6d6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 6d8:	7854      	ldrb	r4, [r2, #1]
 6da:	3c01      	subs	r4, #1
 6dc:	2c01      	cmp	r4, #1
 6de:	d91c      	bls.n	71a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 6e0:	040d      	lsls	r5, r1, #16
 6e2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 6e4:	24a0      	movs	r4, #160	; 0xa0
 6e6:	05e4      	lsls	r4, r4, #23
 6e8:	432c      	orrs	r4, r5
 6ea:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 6ec:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 6ee:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 6f0:	24d0      	movs	r4, #208	; 0xd0
 6f2:	0624      	lsls	r4, r4, #24
 6f4:	432c      	orrs	r4, r5
 6f6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 6f8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 6fa:	78d4      	ldrb	r4, [r2, #3]
 6fc:	2c00      	cmp	r4, #0
 6fe:	d122      	bne.n	746 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 700:	035b      	lsls	r3, r3, #13
 702:	d51c      	bpl.n	73e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 704:	7893      	ldrb	r3, [r2, #2]
 706:	2b01      	cmp	r3, #1
 708:	d01e      	beq.n	748 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
 70a:	6141      	str	r1, [r0, #20]
 70c:	e017      	b.n	73e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
 70e:	2300      	movs	r3, #0
 710:	e7d7      	b.n	6c2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 712:	24c0      	movs	r4, #192	; 0xc0
 714:	02e4      	lsls	r4, r4, #11
 716:	4323      	orrs	r3, r4
 718:	e7dd      	b.n	6d6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 71a:	4c0d      	ldr	r4, [pc, #52]	; (750 <_system_pinmux_config+0xa4>)
 71c:	4023      	ands	r3, r4
 71e:	e7df      	b.n	6e0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
 720:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 722:	040c      	lsls	r4, r1, #16
 724:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 726:	23a0      	movs	r3, #160	; 0xa0
 728:	05db      	lsls	r3, r3, #23
 72a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 72c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 72e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 730:	23d0      	movs	r3, #208	; 0xd0
 732:	061b      	lsls	r3, r3, #24
 734:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 736:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
 738:	78d3      	ldrb	r3, [r2, #3]
 73a:	2b00      	cmp	r3, #0
 73c:	d103      	bne.n	746 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 73e:	7853      	ldrb	r3, [r2, #1]
 740:	3b01      	subs	r3, #1
 742:	2b01      	cmp	r3, #1
 744:	d902      	bls.n	74c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
 746:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
 748:	6181      	str	r1, [r0, #24]
 74a:	e7f8      	b.n	73e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
 74c:	6081      	str	r1, [r0, #8]
}
 74e:	e7fa      	b.n	746 <_system_pinmux_config+0x9a>
 750:	fffbffff 	.word	0xfffbffff

00000754 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 754:	b510      	push	{r4, lr}
 756:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 758:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 75a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
 75c:	2900      	cmp	r1, #0
 75e:	d104      	bne.n	76a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
 760:	0943      	lsrs	r3, r0, #5
 762:	01db      	lsls	r3, r3, #7
 764:	4905      	ldr	r1, [pc, #20]	; (77c <system_pinmux_pin_set_config+0x28>)
 766:	468c      	mov	ip, r1
 768:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 76a:	241f      	movs	r4, #31
 76c:	4020      	ands	r0, r4
 76e:	2101      	movs	r1, #1
 770:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
 772:	0018      	movs	r0, r3
 774:	4b02      	ldr	r3, [pc, #8]	; (780 <system_pinmux_pin_set_config+0x2c>)
 776:	4798      	blx	r3
}
 778:	bd10      	pop	{r4, pc}
 77a:	46c0      	nop			; (mov r8, r8)
 77c:	41004400 	.word	0x41004400
 780:	000006ad 	.word	0x000006ad

00000784 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 784:	4770      	bx	lr
	...

00000788 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 788:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 78a:	4b05      	ldr	r3, [pc, #20]	; (7a0 <system_init+0x18>)
 78c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 78e:	4b05      	ldr	r3, [pc, #20]	; (7a4 <system_init+0x1c>)
 790:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 792:	4b05      	ldr	r3, [pc, #20]	; (7a8 <system_init+0x20>)
 794:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 796:	4b05      	ldr	r3, [pc, #20]	; (7ac <system_init+0x24>)
 798:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 79a:	4b05      	ldr	r3, [pc, #20]	; (7b0 <system_init+0x28>)
 79c:	4798      	blx	r3
}
 79e:	bd10      	pop	{r4, pc}
 7a0:	0000044d 	.word	0x0000044d
 7a4:	000002d9 	.word	0x000002d9
 7a8:	00000785 	.word	0x00000785
 7ac:	0000011d 	.word	0x0000011d
 7b0:	00000785 	.word	0x00000785

000007b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 7b4:	e7fe      	b.n	7b4 <Dummy_Handler>
	...

000007b8 <Reset_Handler>:
{
 7b8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 7ba:	4a1a      	ldr	r2, [pc, #104]	; (824 <Reset_Handler+0x6c>)
 7bc:	4b1a      	ldr	r3, [pc, #104]	; (828 <Reset_Handler+0x70>)
 7be:	429a      	cmp	r2, r3
 7c0:	d011      	beq.n	7e6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 7c2:	001a      	movs	r2, r3
 7c4:	4b19      	ldr	r3, [pc, #100]	; (82c <Reset_Handler+0x74>)
 7c6:	429a      	cmp	r2, r3
 7c8:	d20d      	bcs.n	7e6 <Reset_Handler+0x2e>
 7ca:	4a19      	ldr	r2, [pc, #100]	; (830 <Reset_Handler+0x78>)
 7cc:	3303      	adds	r3, #3
 7ce:	1a9b      	subs	r3, r3, r2
 7d0:	089b      	lsrs	r3, r3, #2
 7d2:	3301      	adds	r3, #1
 7d4:	009b      	lsls	r3, r3, #2
 7d6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 7d8:	4813      	ldr	r0, [pc, #76]	; (828 <Reset_Handler+0x70>)
 7da:	4912      	ldr	r1, [pc, #72]	; (824 <Reset_Handler+0x6c>)
 7dc:	588c      	ldr	r4, [r1, r2]
 7de:	5084      	str	r4, [r0, r2]
 7e0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 7e2:	429a      	cmp	r2, r3
 7e4:	d1fa      	bne.n	7dc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 7e6:	4a13      	ldr	r2, [pc, #76]	; (834 <Reset_Handler+0x7c>)
 7e8:	4b13      	ldr	r3, [pc, #76]	; (838 <Reset_Handler+0x80>)
 7ea:	429a      	cmp	r2, r3
 7ec:	d20a      	bcs.n	804 <Reset_Handler+0x4c>
 7ee:	43d3      	mvns	r3, r2
 7f0:	4911      	ldr	r1, [pc, #68]	; (838 <Reset_Handler+0x80>)
 7f2:	185b      	adds	r3, r3, r1
 7f4:	2103      	movs	r1, #3
 7f6:	438b      	bics	r3, r1
 7f8:	3304      	adds	r3, #4
 7fa:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 7fc:	2100      	movs	r1, #0
 7fe:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 800:	4293      	cmp	r3, r2
 802:	d1fc      	bne.n	7fe <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 804:	4a0d      	ldr	r2, [pc, #52]	; (83c <Reset_Handler+0x84>)
 806:	21ff      	movs	r1, #255	; 0xff
 808:	4b0d      	ldr	r3, [pc, #52]	; (840 <Reset_Handler+0x88>)
 80a:	438b      	bics	r3, r1
 80c:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
 80e:	4a0d      	ldr	r2, [pc, #52]	; (844 <Reset_Handler+0x8c>)
 810:	6853      	ldr	r3, [r2, #4]
 812:	397f      	subs	r1, #127	; 0x7f
 814:	430b      	orrs	r3, r1
 816:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 818:	4b0b      	ldr	r3, [pc, #44]	; (848 <Reset_Handler+0x90>)
 81a:	4798      	blx	r3
        main();
 81c:	4b0b      	ldr	r3, [pc, #44]	; (84c <Reset_Handler+0x94>)
 81e:	4798      	blx	r3
 820:	e7fe      	b.n	820 <Reset_Handler+0x68>
 822:	46c0      	nop			; (mov r8, r8)
 824:	00000978 	.word	0x00000978
 828:	20000000 	.word	0x20000000
 82c:	20000004 	.word	0x20000004
 830:	20000004 	.word	0x20000004
 834:	20000004 	.word	0x20000004
 838:	20000080 	.word	0x20000080
 83c:	e000ed00 	.word	0xe000ed00
 840:	00000000 	.word	0x00000000
 844:	41004000 	.word	0x41004000
 848:	000008f1 	.word	0x000008f1
 84c:	000008c5 	.word	0x000008c5

00000850 <extint_detection_callback>:
	return (port_base->IN.reg & pin_mask);
 850:	4b06      	ldr	r3, [pc, #24]	; (86c <extint_detection_callback+0x1c>)
 852:	6a1b      	ldr	r3, [r3, #32]
	if (level) {
 854:	041b      	lsls	r3, r3, #16
 856:	d404      	bmi.n	862 <extint_detection_callback+0x12>
	} else {
		port_base->OUTCLR.reg = pin_mask;
 858:	2280      	movs	r2, #128	; 0x80
 85a:	01d2      	lsls	r2, r2, #7
 85c:	4b03      	ldr	r3, [pc, #12]	; (86c <extint_detection_callback+0x1c>)
 85e:	615a      	str	r2, [r3, #20]

void extint_detection_callback(void)
{
	bool button_pin_state = port_pin_get_input_level(BUTTON_0_PIN);
	port_pin_set_output_level(LED_0_PIN, button_pin_state);
 }
 860:	4770      	bx	lr
		port_base->OUTSET.reg = pin_mask;
 862:	2280      	movs	r2, #128	; 0x80
 864:	01d2      	lsls	r2, r2, #7
 866:	4b01      	ldr	r3, [pc, #4]	; (86c <extint_detection_callback+0x1c>)
 868:	619a      	str	r2, [r3, #24]
 86a:	e7f9      	b.n	860 <extint_detection_callback+0x10>
 86c:	41004400 	.word	0x41004400

00000870 <configure_extint_channel>:
{
 870:	b510      	push	{r4, lr}
 872:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
 874:	ac01      	add	r4, sp, #4
 876:	0020      	movs	r0, r4
 878:	4b07      	ldr	r3, [pc, #28]	; (898 <configure_extint_channel+0x28>)
 87a:	4798      	blx	r3
	config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
 87c:	230f      	movs	r3, #15
 87e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
 880:	2300      	movs	r3, #0
 882:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
 884:	3301      	adds	r3, #1
 886:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
 888:	3302      	adds	r3, #2
 88a:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
 88c:	0021      	movs	r1, r4
 88e:	200f      	movs	r0, #15
 890:	4b02      	ldr	r3, [pc, #8]	; (89c <configure_extint_channel+0x2c>)
 892:	4798      	blx	r3
}
 894:	b004      	add	sp, #16
 896:	bd10      	pop	{r4, pc}
 898:	00000189 	.word	0x00000189
 89c:	0000019d 	.word	0x0000019d

000008a0 <configure_extint_callbacks>:
{
 8a0:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
 8a2:	2200      	movs	r2, #0
 8a4:	210f      	movs	r1, #15
 8a6:	4804      	ldr	r0, [pc, #16]	; (8b8 <configure_extint_callbacks+0x18>)
 8a8:	4b04      	ldr	r3, [pc, #16]	; (8bc <configure_extint_callbacks+0x1c>)
 8aa:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
 8ac:	2100      	movs	r1, #0
 8ae:	200f      	movs	r0, #15
 8b0:	4b03      	ldr	r3, [pc, #12]	; (8c0 <configure_extint_callbacks+0x20>)
 8b2:	4798      	blx	r3
}
 8b4:	bd10      	pop	{r4, pc}
 8b6:	46c0      	nop			; (mov r8, r8)
 8b8:	00000851 	.word	0x00000851
 8bc:	00000239 	.word	0x00000239
 8c0:	00000265 	.word	0x00000265

000008c4 <main>:


int main (void)
{
 8c4:	b510      	push	{r4, lr}
	system_init();
 8c6:	4b06      	ldr	r3, [pc, #24]	; (8e0 <main+0x1c>)
 8c8:	4798      	blx	r3
	configure_extint_channel();
 8ca:	4b06      	ldr	r3, [pc, #24]	; (8e4 <main+0x20>)
 8cc:	4798      	blx	r3
	configure_extint_callbacks();
 8ce:	4b06      	ldr	r3, [pc, #24]	; (8e8 <main+0x24>)
 8d0:	4798      	blx	r3
	cpu_irq_enable();
 8d2:	2201      	movs	r2, #1
 8d4:	4b05      	ldr	r3, [pc, #20]	; (8ec <main+0x28>)
 8d6:	701a      	strb	r2, [r3, #0]
 8d8:	f3bf 8f5f 	dmb	sy
 8dc:	b662      	cpsie	i
 8de:	e7fe      	b.n	8de <main+0x1a>
 8e0:	00000789 	.word	0x00000789
 8e4:	00000871 	.word	0x00000871
 8e8:	000008a1 	.word	0x000008a1
 8ec:	20000000 	.word	0x20000000

000008f0 <__libc_init_array>:
 8f0:	b570      	push	{r4, r5, r6, lr}
 8f2:	2600      	movs	r6, #0
 8f4:	4d0c      	ldr	r5, [pc, #48]	; (928 <__libc_init_array+0x38>)
 8f6:	4c0d      	ldr	r4, [pc, #52]	; (92c <__libc_init_array+0x3c>)
 8f8:	1b64      	subs	r4, r4, r5
 8fa:	10a4      	asrs	r4, r4, #2
 8fc:	42a6      	cmp	r6, r4
 8fe:	d109      	bne.n	914 <__libc_init_array+0x24>
 900:	2600      	movs	r6, #0
 902:	f000 f829 	bl	958 <_init>
 906:	4d0a      	ldr	r5, [pc, #40]	; (930 <__libc_init_array+0x40>)
 908:	4c0a      	ldr	r4, [pc, #40]	; (934 <__libc_init_array+0x44>)
 90a:	1b64      	subs	r4, r4, r5
 90c:	10a4      	asrs	r4, r4, #2
 90e:	42a6      	cmp	r6, r4
 910:	d105      	bne.n	91e <__libc_init_array+0x2e>
 912:	bd70      	pop	{r4, r5, r6, pc}
 914:	00b3      	lsls	r3, r6, #2
 916:	58eb      	ldr	r3, [r5, r3]
 918:	4798      	blx	r3
 91a:	3601      	adds	r6, #1
 91c:	e7ee      	b.n	8fc <__libc_init_array+0xc>
 91e:	00b3      	lsls	r3, r6, #2
 920:	58eb      	ldr	r3, [r5, r3]
 922:	4798      	blx	r3
 924:	3601      	adds	r6, #1
 926:	e7f2      	b.n	90e <__libc_init_array+0x1e>
 928:	00000964 	.word	0x00000964
 92c:	00000964 	.word	0x00000964
 930:	00000964 	.word	0x00000964
 934:	00000968 	.word	0x00000968
 938:	000003e8 	.word	0x000003e8
 93c:	000003c8 	.word	0x000003c8
 940:	000003c8 	.word	0x000003c8
 944:	00000438 	.word	0x00000438
 948:	000003da 	.word	0x000003da
 94c:	000003f6 	.word	0x000003f6
 950:	000003cc 	.word	0x000003cc
 954:	00000404 	.word	0x00000404

00000958 <_init>:
 958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 95a:	46c0      	nop			; (mov r8, r8)
 95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 95e:	bc08      	pop	{r3}
 960:	469e      	mov	lr, r3
 962:	4770      	bx	lr

00000964 <__init_array_start>:
 964:	000000cd 	.word	0x000000cd

00000968 <_fini>:
 968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 96a:	46c0      	nop			; (mov r8, r8)
 96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 96e:	bc08      	pop	{r3}
 970:	469e      	mov	lr, r3
 972:	4770      	bx	lr

00000974 <__fini_array_start>:
 974:	000000a5 	.word	0x000000a5
