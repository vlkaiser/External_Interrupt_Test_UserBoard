
External_Interrupt_Test_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018e4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  000018e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000023c  2000000c  000018f0  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000248  00001b2c  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   000263d8  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cbe  00000000  00000000  00046465  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004e98  00000000  00000000  0004a123  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000568  00000000  00000000  0004efbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000578  00000000  00000000  0004f523  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013e3f  00000000  00000000  0004fa9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c520  00000000  00000000  000638da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000602e3  00000000  00000000  0006fdfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000d20  00000000  00000000  000d00e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 22 00 20 09 13 00 00 05 13 00 00 05 13 00 00     H". ............
	...
      2c:	05 13 00 00 00 00 00 00 00 00 00 00 05 13 00 00     ................
      3c:	cd 14 00 00 05 13 00 00 05 13 00 00 05 13 00 00     ................
      4c:	05 13 00 00 2d 0c 00 00 05 13 00 00 05 13 00 00     ....-...........
      5c:	d5 08 00 00 e5 08 00 00 f5 08 00 00 05 09 00 00     ................
      6c:	15 09 00 00 25 09 00 00 05 13 00 00 05 13 00 00     ....%...........
      7c:	05 13 00 00 05 13 00 00 05 13 00 00 05 13 00 00     ................
      8c:	05 13 00 00 05 13 00 00 05 13 00 00 05 13 00 00     ................
      9c:	05 13 00 00 05 13 00 00                             ........

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	2000000c 	.word	0x2000000c
      c4:	00000000 	.word	0x00000000
      c8:	000018e4 	.word	0x000018e4

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000010 	.word	0x20000010
      f8:	000018e4 	.word	0x000018e4
      fc:	000018e4 	.word	0x000018e4
     100:	00000000 	.word	0x00000000

00000104 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     104:	6802      	ldr	r2, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     106:	8a13      	ldrh	r3, [r2, #16]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     108:	b21b      	sxth	r3, r3
     10a:	2b00      	cmp	r3, #0
     10c:	dbfb      	blt.n	106 <_i2c_master_wait_for_sync+0x2>
		/* Wait for I2C module to sync. */
	}
}
     10e:	4770      	bx	lr

00000110 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     110:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     112:	7b9a      	ldrb	r2, [r3, #14]
     114:	0792      	lsls	r2, r2, #30
     116:	d507      	bpl.n	128 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     118:	2202      	movs	r2, #2
     11a:	739a      	strb	r2, [r3, #14]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     11c:	8a1b      	ldrh	r3, [r3, #16]
     11e:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     120:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     122:	17db      	asrs	r3, r3, #31
     124:	4018      	ands	r0, r3
}
     126:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     128:	8a1a      	ldrh	r2, [r3, #16]
     12a:	0752      	lsls	r2, r2, #29
     12c:	d506      	bpl.n	13c <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     12e:	6859      	ldr	r1, [r3, #4]
     130:	22c0      	movs	r2, #192	; 0xc0
     132:	0292      	lsls	r2, r2, #10
     134:	430a      	orrs	r2, r1
     136:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     138:	2018      	movs	r0, #24
     13a:	e7f4      	b.n	126 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     13c:	2000      	movs	r0, #0
     13e:	e7f2      	b.n	126 <_i2c_master_address_response+0x16>

00000140 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
static enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     140:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     142:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     144:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     146:	2401      	movs	r4, #1
     148:	2502      	movs	r5, #2
     14a:	7b91      	ldrb	r1, [r2, #14]
     14c:	4221      	tst	r1, r4
     14e:	d10b      	bne.n	168 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     150:	7b91      	ldrb	r1, [r2, #14]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     152:	4229      	tst	r1, r5
     154:	d106      	bne.n	164 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     156:	3301      	adds	r3, #1
     158:	b29b      	uxth	r3, r3
     15a:	8901      	ldrh	r1, [r0, #8]
     15c:	4299      	cmp	r1, r3
     15e:	d8f4      	bhi.n	14a <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     160:	2012      	movs	r0, #18
     162:	e002      	b.n	16a <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     164:	2000      	movs	r0, #0
     166:	e000      	b.n	16a <_i2c_master_wait_for_bus+0x2a>
     168:	2000      	movs	r0, #0
}
     16a:	bd30      	pop	{r4, r5, pc}

0000016c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     16c:	b5f0      	push	{r4, r5, r6, r7, lr}
     16e:	46de      	mov	lr, fp
     170:	4657      	mov	r7, sl
     172:	464e      	mov	r6, r9
     174:	4645      	mov	r5, r8
     176:	b5e0      	push	{r5, r6, r7, lr}
     178:	b083      	sub	sp, #12
     17a:	0006      	movs	r6, r0
     17c:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     17e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     180:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     182:	4b24      	ldr	r3, [pc, #144]	; (214 <_i2c_master_write_packet+0xa8>)
     184:	4798      	blx	r3

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE;
     186:	883b      	ldrh	r3, [r7, #0]
     188:	005b      	lsls	r3, r3, #1
     18a:	b2db      	uxtb	r3, r3
     18c:	752b      	strb	r3, [r5, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     18e:	0030      	movs	r0, r6
     190:	4b21      	ldr	r3, [pc, #132]	; (218 <_i2c_master_write_packet+0xac>)
     192:	4798      	blx	r3
     194:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     196:	2800      	cmp	r0, #0
     198:	d007      	beq.n	1aa <_i2c_master_write_packet+0x3e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     19a:	9801      	ldr	r0, [sp, #4]
     19c:	b003      	add	sp, #12
     19e:	bc3c      	pop	{r2, r3, r4, r5}
     1a0:	4690      	mov	r8, r2
     1a2:	4699      	mov	r9, r3
     1a4:	46a2      	mov	sl, r4
     1a6:	46ab      	mov	fp, r5
     1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp_status = _i2c_master_address_response(module);
     1aa:	0030      	movs	r0, r6
     1ac:	4b1b      	ldr	r3, [pc, #108]	; (21c <_i2c_master_write_packet+0xb0>)
     1ae:	4798      	blx	r3
     1b0:	1e03      	subs	r3, r0, #0
     1b2:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     1b4:	d1f1      	bne.n	19a <_i2c_master_write_packet+0x2e>
     1b6:	46a0      	mov	r8, r4
     1b8:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     1ba:	3320      	adds	r3, #32
     1bc:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     1be:	4b15      	ldr	r3, [pc, #84]	; (214 <_i2c_master_write_packet+0xa8>)
     1c0:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     1c2:	4b15      	ldr	r3, [pc, #84]	; (218 <_i2c_master_write_packet+0xac>)
     1c4:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     1c6:	4544      	cmp	r4, r8
     1c8:	d014      	beq.n	1f4 <_i2c_master_write_packet+0x88>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     1ca:	8a2b      	ldrh	r3, [r5, #16]
     1cc:	464a      	mov	r2, r9
     1ce:	4213      	tst	r3, r2
     1d0:	d01c      	beq.n	20c <_i2c_master_write_packet+0xa0>
			_i2c_master_wait_for_sync(module);
     1d2:	0030      	movs	r0, r6
     1d4:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     1d6:	687b      	ldr	r3, [r7, #4]
     1d8:	5d1b      	ldrb	r3, [r3, r4]
     1da:	762b      	strb	r3, [r5, #24]
			tmp_status = _i2c_master_wait_for_bus(module);
     1dc:	0030      	movs	r0, r6
     1de:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     1e0:	2800      	cmp	r0, #0
     1e2:	d106      	bne.n	1f2 <_i2c_master_write_packet+0x86>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     1e4:	8a2b      	ldrh	r3, [r5, #16]
     1e6:	3401      	adds	r4, #1
     1e8:	075b      	lsls	r3, r3, #29
     1ea:	d5ec      	bpl.n	1c6 <_i2c_master_write_packet+0x5a>
				tmp_status = STATUS_ERR_OVERFLOW;
     1ec:	231e      	movs	r3, #30
     1ee:	9301      	str	r3, [sp, #4]
     1f0:	e000      	b.n	1f4 <_i2c_master_write_packet+0x88>
			tmp_status = _i2c_master_wait_for_bus(module);
     1f2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     1f4:	7ab3      	ldrb	r3, [r6, #10]
     1f6:	2b00      	cmp	r3, #0
     1f8:	d0cf      	beq.n	19a <_i2c_master_write_packet+0x2e>
			_i2c_master_wait_for_sync(module);
     1fa:	0030      	movs	r0, r6
     1fc:	4b05      	ldr	r3, [pc, #20]	; (214 <_i2c_master_write_packet+0xa8>)
     1fe:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     200:	686a      	ldr	r2, [r5, #4]
     202:	23c0      	movs	r3, #192	; 0xc0
     204:	029b      	lsls	r3, r3, #10
     206:	4313      	orrs	r3, r2
     208:	606b      	str	r3, [r5, #4]
     20a:	e7c6      	b.n	19a <_i2c_master_write_packet+0x2e>
				return STATUS_ERR_PACKET_COLLISION;
     20c:	2341      	movs	r3, #65	; 0x41
     20e:	9301      	str	r3, [sp, #4]
     210:	e7c3      	b.n	19a <_i2c_master_write_packet+0x2e>
     212:	46c0      	nop			; (mov r8, r8)
     214:	00000105 	.word	0x00000105
     218:	00000141 	.word	0x00000141
     21c:	00000111 	.word	0x00000111

00000220 <i2c_master_init>:
{
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	46ce      	mov	lr, r9
     224:	4647      	mov	r7, r8
     226:	b580      	push	{r7, lr}
     228:	b083      	sub	sp, #12
     22a:	0007      	movs	r7, r0
     22c:	000d      	movs	r5, r1
     22e:	0016      	movs	r6, r2
	module->hw = hw;
     230:	6039      	str	r1, [r7, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     232:	0008      	movs	r0, r1
     234:	4b52      	ldr	r3, [pc, #328]	; (380 <i2c_master_init+0x160>)
     236:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     238:	4a52      	ldr	r2, [pc, #328]	; (384 <i2c_master_init+0x164>)
     23a:	6a11      	ldr	r1, [r2, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     23c:	1c84      	adds	r4, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     23e:	2301      	movs	r3, #1
     240:	40a3      	lsls	r3, r4
     242:	430b      	orrs	r3, r1
     244:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     246:	a901      	add	r1, sp, #4
     248:	7933      	ldrb	r3, [r6, #4]
     24a:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     24c:	300d      	adds	r0, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     24e:	b2c4      	uxtb	r4, r0
     250:	0020      	movs	r0, r4
     252:	4b4d      	ldr	r3, [pc, #308]	; (388 <i2c_master_init+0x168>)
     254:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     256:	0020      	movs	r0, r4
     258:	4b4c      	ldr	r3, [pc, #304]	; (38c <i2c_master_init+0x16c>)
     25a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     25c:	7930      	ldrb	r0, [r6, #4]
     25e:	2100      	movs	r1, #0
     260:	4b4b      	ldr	r3, [pc, #300]	; (390 <i2c_master_init+0x170>)
     262:	4798      	blx	r3
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     264:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
     266:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     268:	079b      	lsls	r3, r3, #30
     26a:	d504      	bpl.n	276 <i2c_master_init+0x56>
}
     26c:	b003      	add	sp, #12
     26e:	bc0c      	pop	{r2, r3}
     270:	4690      	mov	r8, r2
     272:	4699      	mov	r9, r3
     274:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     276:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
     278:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     27a:	07db      	lsls	r3, r3, #31
     27c:	d4f6      	bmi.n	26c <i2c_master_init+0x4c>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     27e:	6838      	ldr	r0, [r7, #0]
     280:	4b3f      	ldr	r3, [pc, #252]	; (380 <i2c_master_init+0x160>)
     282:	4698      	mov	r8, r3
     284:	4798      	blx	r3
     286:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     288:	4942      	ldr	r1, [pc, #264]	; (394 <i2c_master_init+0x174>)
     28a:	4b43      	ldr	r3, [pc, #268]	; (398 <i2c_master_init+0x178>)
     28c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     28e:	00a4      	lsls	r4, r4, #2
     290:	4b42      	ldr	r3, [pc, #264]	; (39c <i2c_master_init+0x17c>)
     292:	50e7      	str	r7, [r4, r3]
	module->registered_callback = 0;
     294:	2300      	movs	r3, #0
     296:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
     298:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
     29a:	2200      	movs	r2, #0
     29c:	4691      	mov	r9, r2
     29e:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
     2a0:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
     2a2:	2225      	movs	r2, #37	; 0x25
     2a4:	4649      	mov	r1, r9
     2a6:	54b9      	strb	r1, [r7, r2]
	module->buffer = NULL;
     2a8:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
     2aa:	3314      	adds	r3, #20
     2ac:	602b      	str	r3, [r5, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     2ae:	683c      	ldr	r4, [r7, #0]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     2b0:	0020      	movs	r0, r4
     2b2:	47c0      	blx	r8
     2b4:	4680      	mov	r8, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     2b6:	2380      	movs	r3, #128	; 0x80
     2b8:	466a      	mov	r2, sp
     2ba:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2bc:	466b      	mov	r3, sp
     2be:	464a      	mov	r2, r9
     2c0:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2c2:	2301      	movs	r3, #1
     2c4:	466a      	mov	r2, sp
     2c6:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     2c8:	466b      	mov	r3, sp
     2ca:	464a      	mov	r2, r9
     2cc:	70da      	strb	r2, [r3, #3]
	uint32_t pad0 = config->pinmux_pad0;
     2ce:	6970      	ldr	r0, [r6, #20]
	uint32_t pad1 = config->pinmux_pad1;
     2d0:	69b5      	ldr	r5, [r6, #24]
	if (pad0 == PINMUX_DEFAULT) {
     2d2:	2800      	cmp	r0, #0
     2d4:	d048      	beq.n	368 <i2c_master_init+0x148>
	pin_conf.mux_position = pad0 & 0xFFFF;
     2d6:	466b      	mov	r3, sp
     2d8:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     2da:	2302      	movs	r3, #2
     2dc:	466a      	mov	r2, sp
     2de:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     2e0:	0c00      	lsrs	r0, r0, #16
     2e2:	b2c0      	uxtb	r0, r0
     2e4:	4669      	mov	r1, sp
     2e6:	4b2e      	ldr	r3, [pc, #184]	; (3a0 <i2c_master_init+0x180>)
     2e8:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     2ea:	2d00      	cmp	r5, #0
     2ec:	d041      	beq.n	372 <i2c_master_init+0x152>
	pin_conf.mux_position = pad1 & 0xFFFF;
     2ee:	466b      	mov	r3, sp
     2f0:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     2f2:	2302      	movs	r3, #2
     2f4:	466a      	mov	r2, sp
     2f6:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     2f8:	0c28      	lsrs	r0, r5, #16
     2fa:	b2c0      	uxtb	r0, r0
     2fc:	4669      	mov	r1, sp
     2fe:	4b28      	ldr	r3, [pc, #160]	; (3a0 <i2c_master_init+0x180>)
     300:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     302:	89b3      	ldrh	r3, [r6, #12]
     304:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     306:	89f3      	ldrh	r3, [r6, #14]
     308:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     30a:	7c32      	ldrb	r2, [r6, #16]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     30c:	2380      	movs	r3, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     30e:	2a00      	cmp	r2, #0
     310:	d104      	bne.n	31c <i2c_master_init+0xfc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     312:	4b24      	ldr	r3, [pc, #144]	; (3a4 <i2c_master_init+0x184>)
     314:	789b      	ldrb	r3, [r3, #2]
     316:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     318:	0fdb      	lsrs	r3, r3, #31
     31a:	01db      	lsls	r3, r3, #7
		tmp_ctrla |= config->start_hold_time;
     31c:	68b2      	ldr	r2, [r6, #8]
     31e:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     320:	7f32      	ldrb	r2, [r6, #28]
     322:	2a00      	cmp	r2, #0
     324:	d002      	beq.n	32c <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUT;
     326:	2280      	movs	r2, #128	; 0x80
     328:	05d2      	lsls	r2, r2, #23
     32a:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     32c:	6822      	ldr	r2, [r4, #0]
     32e:	6a31      	ldr	r1, [r6, #32]
     330:	430a      	orrs	r2, r1
     332:	4313      	orrs	r3, r2
     334:	6023      	str	r3, [r4, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     336:	2380      	movs	r3, #128	; 0x80
     338:	005b      	lsls	r3, r3, #1
     33a:	6063      	str	r3, [r4, #4]
	tmp_baud = (int32_t)(div_ceil(
     33c:	4645      	mov	r5, r8
     33e:	350d      	adds	r5, #13
     340:	b2e8      	uxtb	r0, r5
     342:	4b19      	ldr	r3, [pc, #100]	; (3a8 <i2c_master_init+0x188>)
     344:	4798      	blx	r3
     346:	6833      	ldr	r3, [r6, #0]
     348:	21fa      	movs	r1, #250	; 0xfa
     34a:	00c9      	lsls	r1, r1, #3
     34c:	4359      	muls	r1, r3
     34e:	1e4b      	subs	r3, r1, #1
     350:	1818      	adds	r0, r3, r0
     352:	4b16      	ldr	r3, [pc, #88]	; (3ac <i2c_master_init+0x18c>)
     354:	4798      	blx	r3
				(2000*(config->baud_rate))) - 5);
     356:	1f43      	subs	r3, r0, #5
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
     358:	2040      	movs	r0, #64	; 0x40
	if (tmp_baud > 255 || tmp_baud < 0) {
     35a:	2bff      	cmp	r3, #255	; 0xff
     35c:	d900      	bls.n	360 <i2c_master_init+0x140>
     35e:	e785      	b.n	26c <i2c_master_init+0x4c>
		i2c_module->BAUD.reg = (uint8_t)tmp_baud;
     360:	b2db      	uxtb	r3, r3
     362:	8163      	strh	r3, [r4, #10]
	enum status_code tmp_status_code = STATUS_OK;
     364:	2000      	movs	r0, #0
     366:	e781      	b.n	26c <i2c_master_init+0x4c>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     368:	2100      	movs	r1, #0
     36a:	0020      	movs	r0, r4
     36c:	4b10      	ldr	r3, [pc, #64]	; (3b0 <i2c_master_init+0x190>)
     36e:	4798      	blx	r3
     370:	e7b1      	b.n	2d6 <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     372:	2101      	movs	r1, #1
     374:	0020      	movs	r0, r4
     376:	4b0e      	ldr	r3, [pc, #56]	; (3b0 <i2c_master_init+0x190>)
     378:	4798      	blx	r3
     37a:	0005      	movs	r5, r0
     37c:	e7b7      	b.n	2ee <i2c_master_init+0xce>
     37e:	46c0      	nop			; (mov r8, r8)
     380:	0000082d 	.word	0x0000082d
     384:	40000400 	.word	0x40000400
     388:	000011ad 	.word	0x000011ad
     38c:	00001121 	.word	0x00001121
     390:	00000669 	.word	0x00000669
     394:	00000499 	.word	0x00000499
     398:	00000869 	.word	0x00000869
     39c:	20000064 	.word	0x20000064
     3a0:	000012a5 	.word	0x000012a5
     3a4:	41002000 	.word	0x41002000
     3a8:	000011c9 	.word	0x000011c9
     3ac:	0000170d 	.word	0x0000170d
     3b0:	000006b5 	.word	0x000006b5

000003b4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     3b4:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     3b6:	8b83      	ldrh	r3, [r0, #28]
     3b8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     3ba:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     3bc:	2b00      	cmp	r3, #0
     3be:	d001      	beq.n	3c4 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;
	
	return _i2c_master_write_packet(module, packet);
}
     3c0:	0010      	movs	r0, r2
     3c2:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     3c4:	3301      	adds	r3, #1
     3c6:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     3c8:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     3ca:	4b02      	ldr	r3, [pc, #8]	; (3d4 <i2c_master_write_packet_wait+0x20>)
     3cc:	4798      	blx	r3
     3ce:	0002      	movs	r2, r0
     3d0:	e7f6      	b.n	3c0 <i2c_master_write_packet_wait+0xc>
     3d2:	46c0      	nop			; (mov r8, r8)
     3d4:	0000016d 	.word	0x0000016d

000003d8 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     3d8:	6802      	ldr	r2, [r0, #0]
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     3da:	8a13      	ldrh	r3, [r2, #16]
	while (i2c_master_is_syncing(module)) {
     3dc:	b21b      	sxth	r3, r3
     3de:	2b00      	cmp	r3, #0
     3e0:	dbfb      	blt.n	3da <_i2c_master_wait_for_sync+0x2>
}
     3e2:	4770      	bx	lr

000003e4 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     3e4:	b570      	push	{r4, r5, r6, lr}
     3e6:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3e8:	6806      	ldr	r6, [r0, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
     3ea:	8b45      	ldrh	r5, [r0, #26]
     3ec:	8b83      	ldrh	r3, [r0, #28]
     3ee:	1aed      	subs	r5, r5, r3
     3f0:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     3f2:	8b83      	ldrh	r3, [r0, #28]
     3f4:	3b01      	subs	r3, #1
     3f6:	b29b      	uxth	r3, r3
     3f8:	8383      	strh	r3, [r0, #28]

	if (!module->buffer_remaining) {
     3fa:	8b83      	ldrh	r3, [r0, #28]
     3fc:	b29b      	uxth	r3, r3
     3fe:	2b00      	cmp	r3, #0
     400:	d11c      	bne.n	43c <_i2c_master_read+0x58>
		/* Send nack */
	  	if (module->send_nack)
     402:	7ac3      	ldrb	r3, [r0, #11]
     404:	2b00      	cmp	r3, #0
     406:	d004      	beq.n	412 <_i2c_master_read+0x2e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     408:	6872      	ldr	r2, [r6, #4]
     40a:	2380      	movs	r3, #128	; 0x80
     40c:	02db      	lsls	r3, r3, #11
     40e:	4313      	orrs	r3, r2
     410:	6073      	str	r3, [r6, #4]
		if (module->send_stop) {
     412:	7aa3      	ldrb	r3, [r4, #10]
     414:	2b00      	cmp	r3, #0
     416:	d008      	beq.n	42a <_i2c_master_read+0x46>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     418:	0020      	movs	r0, r4
     41a:	4b0f      	ldr	r3, [pc, #60]	; (458 <_i2c_master_read+0x74>)
     41c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     41e:	6872      	ldr	r2, [r6, #4]
     420:	23c0      	movs	r3, #192	; 0xc0
     422:	029b      	lsls	r3, r3, #10
     424:	4313      	orrs	r3, r2
     426:	6073      	str	r3, [r6, #4]
     428:	e00c      	b.n	444 <_i2c_master_read+0x60>
		} else {
		  	_i2c_master_wait_for_sync(module);
     42a:	0020      	movs	r0, r4
     42c:	4b0a      	ldr	r3, [pc, #40]	; (458 <_i2c_master_read+0x74>)
     42e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(1);
     430:	6872      	ldr	r2, [r6, #4]
     432:	2380      	movs	r3, #128	; 0x80
     434:	025b      	lsls	r3, r3, #9
     436:	4313      	orrs	r3, r2
     438:	6073      	str	r3, [r6, #4]
     43a:	e003      	b.n	444 <_i2c_master_read+0x60>
		}
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     43c:	6873      	ldr	r3, [r6, #4]
     43e:	4a07      	ldr	r2, [pc, #28]	; (45c <_i2c_master_read+0x78>)
     440:	4013      	ands	r3, r2
     442:	6073      	str	r3, [r6, #4]
	}

	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     444:	0020      	movs	r0, r4
     446:	4b04      	ldr	r3, [pc, #16]	; (458 <_i2c_master_read+0x74>)
     448:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     44a:	6a23      	ldr	r3, [r4, #32]
     44c:	195d      	adds	r5, r3, r5
     44e:	7e33      	ldrb	r3, [r6, #24]
     450:	b2db      	uxtb	r3, r3
     452:	702b      	strb	r3, [r5, #0]
}
     454:	bd70      	pop	{r4, r5, r6, pc}
     456:	46c0      	nop			; (mov r8, r8)
     458:	000003d9 	.word	0x000003d9
     45c:	fffbffff 	.word	0xfffbffff

00000460 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     460:	b570      	push	{r4, r5, r6, lr}
     462:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     464:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     466:	8a2b      	ldrh	r3, [r5, #16]
     468:	075b      	lsls	r3, r3, #29
     46a:	d503      	bpl.n	474 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     46c:	221e      	movs	r2, #30
     46e:	2325      	movs	r3, #37	; 0x25
     470:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     472:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
     474:	8b46      	ldrh	r6, [r0, #26]
     476:	8b83      	ldrh	r3, [r0, #28]
     478:	1af6      	subs	r6, r6, r3
     47a:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     47c:	8b83      	ldrh	r3, [r0, #28]
     47e:	3b01      	subs	r3, #1
     480:	b29b      	uxth	r3, r3
     482:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     484:	4b03      	ldr	r3, [pc, #12]	; (494 <_i2c_master_write+0x34>)
     486:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     488:	6a23      	ldr	r3, [r4, #32]
     48a:	199e      	adds	r6, r3, r6
     48c:	7833      	ldrb	r3, [r6, #0]
     48e:	b2db      	uxtb	r3, r3
     490:	762b      	strb	r3, [r5, #24]
     492:	e7ee      	b.n	472 <_i2c_master_write+0x12>
     494:	000003d9 	.word	0x000003d9

00000498 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     498:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     49a:	0080      	lsls	r0, r0, #2
     49c:	4b6e      	ldr	r3, [pc, #440]	; (658 <_i2c_master_interrupt_handler+0x1c0>)
     49e:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4a0:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
     4a2:	7e63      	ldrb	r3, [r4, #25]
			module->registered_callback;
     4a4:	7e25      	ldrb	r5, [r4, #24]
	uint8_t callback_mask = module->enabled_callback &
     4a6:	401d      	ands	r5, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     4a8:	8b63      	ldrh	r3, [r4, #26]
     4aa:	b29b      	uxth	r3, r3
     4ac:	2b00      	cmp	r3, #0
     4ae:	d103      	bne.n	4b8 <_i2c_master_interrupt_handler+0x20>
     4b0:	8ba3      	ldrh	r3, [r4, #28]
     4b2:	b29b      	uxth	r3, r3
     4b4:	2b00      	cmp	r3, #0
     4b6:	d141      	bne.n	53c <_i2c_master_interrupt_handler+0xa4>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     4b8:	8b63      	ldrh	r3, [r4, #26]
     4ba:	b29b      	uxth	r3, r3
     4bc:	2b00      	cmp	r3, #0
     4be:	d008      	beq.n	4d2 <_i2c_master_interrupt_handler+0x3a>
     4c0:	8ba3      	ldrh	r3, [r4, #28]
     4c2:	b29b      	uxth	r3, r3
     4c4:	2b00      	cmp	r3, #0
     4c6:	d104      	bne.n	4d2 <_i2c_master_interrupt_handler+0x3a>
			(module->status == STATUS_BUSY) &&
     4c8:	3325      	adds	r3, #37	; 0x25
     4ca:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     4cc:	2b05      	cmp	r3, #5
     4ce:	d100      	bne.n	4d2 <_i2c_master_interrupt_handler+0x3a>
     4d0:	e066      	b.n	5a0 <_i2c_master_interrupt_handler+0x108>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     4d2:	8b63      	ldrh	r3, [r4, #26]
     4d4:	b29b      	uxth	r3, r3
     4d6:	2b00      	cmp	r3, #0
     4d8:	d00a      	beq.n	4f0 <_i2c_master_interrupt_handler+0x58>
     4da:	8ba3      	ldrh	r3, [r4, #28]
     4dc:	b29b      	uxth	r3, r3
     4de:	2b00      	cmp	r3, #0
     4e0:	d006      	beq.n	4f0 <_i2c_master_interrupt_handler+0x58>
		/* Check that bus ownership is not lost */
		if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     4e2:	8a33      	ldrh	r3, [r6, #16]
     4e4:	069b      	lsls	r3, r3, #26
     4e6:	d500      	bpl.n	4ea <_i2c_master_interrupt_handler+0x52>
     4e8:	e07b      	b.n	5e2 <_i2c_master_interrupt_handler+0x14a>
			module->status = STATUS_ERR_PACKET_COLLISION;
     4ea:	2241      	movs	r2, #65	; 0x41
     4ec:	2325      	movs	r3, #37	; 0x25
     4ee:	54e2      	strb	r2, [r4, r3]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     4f0:	8b63      	ldrh	r3, [r4, #26]
     4f2:	b29b      	uxth	r3, r3
     4f4:	2b00      	cmp	r3, #0
     4f6:	d008      	beq.n	50a <_i2c_master_interrupt_handler+0x72>
     4f8:	8ba3      	ldrh	r3, [r4, #28]
     4fa:	b29b      	uxth	r3, r3
     4fc:	2b00      	cmp	r3, #0
     4fe:	d104      	bne.n	50a <_i2c_master_interrupt_handler+0x72>
			(module->status == STATUS_BUSY) &&
     500:	3325      	adds	r3, #37	; 0x25
     502:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     504:	2b05      	cmp	r3, #5
     506:	d100      	bne.n	50a <_i2c_master_interrupt_handler+0x72>
     508:	e077      	b.n	5fa <_i2c_master_interrupt_handler+0x162>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     50a:	2325      	movs	r3, #37	; 0x25
     50c:	5ce3      	ldrb	r3, [r4, r3]
     50e:	2b05      	cmp	r3, #5
     510:	d013      	beq.n	53a <_i2c_master_interrupt_handler+0xa2>
     512:	2325      	movs	r3, #37	; 0x25
     514:	5ce3      	ldrb	r3, [r4, r3]
     516:	2b00      	cmp	r3, #0
     518:	d00f      	beq.n	53a <_i2c_master_interrupt_handler+0xa2>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     51a:	2303      	movs	r3, #3
     51c:	7333      	strb	r3, [r6, #12]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     51e:	2300      	movs	r3, #0
     520:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     522:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     524:	3325      	adds	r3, #37	; 0x25
     526:	5ce3      	ldrb	r3, [r4, r3]
     528:	2b41      	cmp	r3, #65	; 0x41
     52a:	d003      	beq.n	534 <_i2c_master_interrupt_handler+0x9c>
     52c:	7aa3      	ldrb	r3, [r4, #10]
     52e:	2b00      	cmp	r3, #0
     530:	d000      	beq.n	534 <_i2c_master_interrupt_handler+0x9c>
     532:	e084      	b.n	63e <_i2c_master_interrupt_handler+0x1a6>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     534:	076b      	lsls	r3, r5, #29
     536:	d500      	bpl.n	53a <_i2c_master_interrupt_handler+0xa2>
     538:	e08a      	b.n	650 <_i2c_master_interrupt_handler+0x1b8>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     53a:	bd70      	pop	{r4, r5, r6, pc}
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     53c:	7bb3      	ldrb	r3, [r6, #14]
     53e:	07db      	lsls	r3, r3, #31
     540:	d507      	bpl.n	552 <_i2c_master_interrupt_handler+0xba>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     542:	2301      	movs	r3, #1
     544:	73b3      	strb	r3, [r6, #14]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     546:	8a33      	ldrh	r3, [r6, #16]
     548:	079b      	lsls	r3, r3, #30
     54a:	d502      	bpl.n	552 <_i2c_master_interrupt_handler+0xba>
			module->status = STATUS_ERR_PACKET_COLLISION;
     54c:	2241      	movs	r2, #65	; 0x41
     54e:	2325      	movs	r3, #37	; 0x25
     550:	54e2      	strb	r2, [r4, r3]
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     552:	8a33      	ldrh	r3, [r6, #16]
     554:	075b      	lsls	r3, r3, #29
     556:	d507      	bpl.n	568 <_i2c_master_interrupt_handler+0xd0>
		module->status           = STATUS_ERR_BAD_ADDRESS;
     558:	2218      	movs	r2, #24
     55a:	2325      	movs	r3, #37	; 0x25
     55c:	54e2      	strb	r2, [r4, r3]
		module->buffer_remaining = 0;
     55e:	2300      	movs	r3, #0
     560:	83a3      	strh	r3, [r4, #28]
		if (module->send_stop) {
     562:	7aa3      	ldrb	r3, [r4, #10]
     564:	2b00      	cmp	r3, #0
     566:	d10e      	bne.n	586 <_i2c_master_interrupt_handler+0xee>
	module->buffer_length = module->buffer_remaining;
     568:	8ba3      	ldrh	r3, [r4, #28]
     56a:	b29b      	uxth	r3, r3
     56c:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     56e:	2325      	movs	r3, #37	; 0x25
     570:	5ce3      	ldrb	r3, [r4, r3]
     572:	2b05      	cmp	r3, #5
     574:	d1bc      	bne.n	4f0 <_i2c_master_interrupt_handler+0x58>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     576:	331f      	adds	r3, #31
     578:	5ce3      	ldrb	r3, [r4, r3]
     57a:	2b00      	cmp	r3, #0
     57c:	d00c      	beq.n	598 <_i2c_master_interrupt_handler+0x100>
			_i2c_master_read(module);
     57e:	0020      	movs	r0, r4
     580:	4b36      	ldr	r3, [pc, #216]	; (65c <_i2c_master_interrupt_handler+0x1c4>)
     582:	4798      	blx	r3
     584:	e7b4      	b.n	4f0 <_i2c_master_interrupt_handler+0x58>
			_i2c_master_wait_for_sync(module);
     586:	0020      	movs	r0, r4
     588:	4b35      	ldr	r3, [pc, #212]	; (660 <_i2c_master_interrupt_handler+0x1c8>)
     58a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     58c:	6872      	ldr	r2, [r6, #4]
     58e:	23c0      	movs	r3, #192	; 0xc0
     590:	029b      	lsls	r3, r3, #10
     592:	4313      	orrs	r3, r2
     594:	6073      	str	r3, [r6, #4]
     596:	e7e7      	b.n	568 <_i2c_master_interrupt_handler+0xd0>
			_i2c_master_write(module);
     598:	0020      	movs	r0, r4
     59a:	4b32      	ldr	r3, [pc, #200]	; (664 <_i2c_master_interrupt_handler+0x1cc>)
     59c:	4798      	blx	r3
     59e:	e7a7      	b.n	4f0 <_i2c_master_interrupt_handler+0x58>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     5a0:	331f      	adds	r3, #31
     5a2:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     5a4:	2b00      	cmp	r3, #0
     5a6:	d000      	beq.n	5aa <_i2c_master_interrupt_handler+0x112>
     5a8:	e793      	b.n	4d2 <_i2c_master_interrupt_handler+0x3a>
		i2c_module->INTENCLR.reg =
     5aa:	3303      	adds	r3, #3
     5ac:	7333      	strb	r3, [r6, #12]
		module->buffer_length = 0;
     5ae:	2300      	movs	r3, #0
     5b0:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     5b2:	3325      	adds	r3, #37	; 0x25
     5b4:	2200      	movs	r2, #0
     5b6:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     5b8:	7aa3      	ldrb	r3, [r4, #10]
     5ba:	2b00      	cmp	r3, #0
     5bc:	d108      	bne.n	5d0 <_i2c_master_interrupt_handler+0x138>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     5be:	2301      	movs	r3, #1
     5c0:	73b3      	strb	r3, [r6, #14]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     5c2:	07eb      	lsls	r3, r5, #31
     5c4:	d400      	bmi.n	5c8 <_i2c_master_interrupt_handler+0x130>
     5c6:	e793      	b.n	4f0 <_i2c_master_interrupt_handler+0x58>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     5c8:	68e3      	ldr	r3, [r4, #12]
     5ca:	0020      	movs	r0, r4
     5cc:	4798      	blx	r3
     5ce:	e78f      	b.n	4f0 <_i2c_master_interrupt_handler+0x58>
			_i2c_master_wait_for_sync(module);
     5d0:	0020      	movs	r0, r4
     5d2:	4b23      	ldr	r3, [pc, #140]	; (660 <_i2c_master_interrupt_handler+0x1c8>)
     5d4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     5d6:	6872      	ldr	r2, [r6, #4]
     5d8:	23c0      	movs	r3, #192	; 0xc0
     5da:	029b      	lsls	r3, r3, #10
     5dc:	4313      	orrs	r3, r2
     5de:	6073      	str	r3, [r6, #4]
     5e0:	e7ef      	b.n	5c2 <_i2c_master_interrupt_handler+0x12a>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     5e2:	2324      	movs	r3, #36	; 0x24
     5e4:	5ce3      	ldrb	r3, [r4, r3]
     5e6:	2b00      	cmp	r3, #0
     5e8:	d103      	bne.n	5f2 <_i2c_master_interrupt_handler+0x15a>
			_i2c_master_write(module);
     5ea:	0020      	movs	r0, r4
     5ec:	4b1d      	ldr	r3, [pc, #116]	; (664 <_i2c_master_interrupt_handler+0x1cc>)
     5ee:	4798      	blx	r3
     5f0:	e77e      	b.n	4f0 <_i2c_master_interrupt_handler+0x58>
			_i2c_master_read(module);
     5f2:	0020      	movs	r0, r4
     5f4:	4b19      	ldr	r3, [pc, #100]	; (65c <_i2c_master_interrupt_handler+0x1c4>)
     5f6:	4798      	blx	r3
     5f8:	e77a      	b.n	4f0 <_i2c_master_interrupt_handler+0x58>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     5fa:	331f      	adds	r3, #31
     5fc:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     5fe:	2b01      	cmp	r3, #1
     600:	d000      	beq.n	604 <_i2c_master_interrupt_handler+0x16c>
     602:	e782      	b.n	50a <_i2c_master_interrupt_handler+0x72>
		i2c_module->INTENCLR.reg =
     604:	3302      	adds	r3, #2
     606:	7333      	strb	r3, [r6, #12]
		module->buffer_length = 0;
     608:	2300      	movs	r3, #0
     60a:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     60c:	3325      	adds	r3, #37	; 0x25
     60e:	2200      	movs	r2, #0
     610:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     612:	07ab      	lsls	r3, r5, #30
     614:	d503      	bpl.n	61e <_i2c_master_interrupt_handler+0x186>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     616:	2324      	movs	r3, #36	; 0x24
     618:	5ce3      	ldrb	r3, [r4, r3]
     61a:	2b01      	cmp	r3, #1
     61c:	d00b      	beq.n	636 <_i2c_master_interrupt_handler+0x19e>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     61e:	07eb      	lsls	r3, r5, #31
     620:	d400      	bmi.n	624 <_i2c_master_interrupt_handler+0x18c>
     622:	e772      	b.n	50a <_i2c_master_interrupt_handler+0x72>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     624:	2324      	movs	r3, #36	; 0x24
     626:	5ce3      	ldrb	r3, [r4, r3]
     628:	2b00      	cmp	r3, #0
     62a:	d000      	beq.n	62e <_i2c_master_interrupt_handler+0x196>
     62c:	e76d      	b.n	50a <_i2c_master_interrupt_handler+0x72>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     62e:	68e3      	ldr	r3, [r4, #12]
     630:	0020      	movs	r0, r4
     632:	4798      	blx	r3
     634:	e769      	b.n	50a <_i2c_master_interrupt_handler+0x72>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     636:	6923      	ldr	r3, [r4, #16]
     638:	0020      	movs	r0, r4
     63a:	4798      	blx	r3
     63c:	e765      	b.n	50a <_i2c_master_interrupt_handler+0x72>
			_i2c_master_wait_for_sync(module);
     63e:	0020      	movs	r0, r4
     640:	4b07      	ldr	r3, [pc, #28]	; (660 <_i2c_master_interrupt_handler+0x1c8>)
     642:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     644:	6872      	ldr	r2, [r6, #4]
     646:	23e0      	movs	r3, #224	; 0xe0
     648:	02db      	lsls	r3, r3, #11
     64a:	4313      	orrs	r3, r2
     64c:	6073      	str	r3, [r6, #4]
     64e:	e771      	b.n	534 <_i2c_master_interrupt_handler+0x9c>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     650:	6963      	ldr	r3, [r4, #20]
     652:	0020      	movs	r0, r4
     654:	4798      	blx	r3
}
     656:	e770      	b.n	53a <_i2c_master_interrupt_handler+0xa2>
     658:	20000064 	.word	0x20000064
     65c:	000003e5 	.word	0x000003e5
     660:	000003d9 	.word	0x000003d9
     664:	00000461 	.word	0x00000461

00000668 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     668:	b510      	push	{r4, lr}
     66a:	b082      	sub	sp, #8
     66c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     66e:	4b0e      	ldr	r3, [pc, #56]	; (6a8 <sercom_set_gclk_generator+0x40>)
     670:	781b      	ldrb	r3, [r3, #0]
     672:	2b00      	cmp	r3, #0
     674:	d007      	beq.n	686 <sercom_set_gclk_generator+0x1e>
     676:	2900      	cmp	r1, #0
     678:	d105      	bne.n	686 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     67a:	4b0b      	ldr	r3, [pc, #44]	; (6a8 <sercom_set_gclk_generator+0x40>)
     67c:	785b      	ldrb	r3, [r3, #1]
     67e:	4283      	cmp	r3, r0
     680:	d010      	beq.n	6a4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     682:	201d      	movs	r0, #29
     684:	e00c      	b.n	6a0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     686:	a901      	add	r1, sp, #4
     688:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     68a:	200c      	movs	r0, #12
     68c:	4b07      	ldr	r3, [pc, #28]	; (6ac <sercom_set_gclk_generator+0x44>)
     68e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     690:	200c      	movs	r0, #12
     692:	4b07      	ldr	r3, [pc, #28]	; (6b0 <sercom_set_gclk_generator+0x48>)
     694:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     696:	4b04      	ldr	r3, [pc, #16]	; (6a8 <sercom_set_gclk_generator+0x40>)
     698:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     69a:	2201      	movs	r2, #1
     69c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     69e:	2000      	movs	r0, #0
}
     6a0:	b002      	add	sp, #8
     6a2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     6a4:	2000      	movs	r0, #0
     6a6:	e7fb      	b.n	6a0 <sercom_set_gclk_generator+0x38>
     6a8:	20000028 	.word	0x20000028
     6ac:	000011ad 	.word	0x000011ad
     6b0:	00001121 	.word	0x00001121

000006b4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     6b4:	4b40      	ldr	r3, [pc, #256]	; (7b8 <_sercom_get_default_pad+0x104>)
     6b6:	4298      	cmp	r0, r3
     6b8:	d031      	beq.n	71e <_sercom_get_default_pad+0x6a>
     6ba:	d90a      	bls.n	6d2 <_sercom_get_default_pad+0x1e>
     6bc:	4b3f      	ldr	r3, [pc, #252]	; (7bc <_sercom_get_default_pad+0x108>)
     6be:	4298      	cmp	r0, r3
     6c0:	d04d      	beq.n	75e <_sercom_get_default_pad+0xaa>
     6c2:	4b3f      	ldr	r3, [pc, #252]	; (7c0 <_sercom_get_default_pad+0x10c>)
     6c4:	4298      	cmp	r0, r3
     6c6:	d05a      	beq.n	77e <_sercom_get_default_pad+0xca>
     6c8:	4b3e      	ldr	r3, [pc, #248]	; (7c4 <_sercom_get_default_pad+0x110>)
     6ca:	4298      	cmp	r0, r3
     6cc:	d037      	beq.n	73e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     6ce:	2000      	movs	r0, #0
}
     6d0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     6d2:	4b3d      	ldr	r3, [pc, #244]	; (7c8 <_sercom_get_default_pad+0x114>)
     6d4:	4298      	cmp	r0, r3
     6d6:	d00c      	beq.n	6f2 <_sercom_get_default_pad+0x3e>
     6d8:	4b3c      	ldr	r3, [pc, #240]	; (7cc <_sercom_get_default_pad+0x118>)
     6da:	4298      	cmp	r0, r3
     6dc:	d1f7      	bne.n	6ce <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6de:	2901      	cmp	r1, #1
     6e0:	d017      	beq.n	712 <_sercom_get_default_pad+0x5e>
     6e2:	2900      	cmp	r1, #0
     6e4:	d05d      	beq.n	7a2 <_sercom_get_default_pad+0xee>
     6e6:	2902      	cmp	r1, #2
     6e8:	d015      	beq.n	716 <_sercom_get_default_pad+0x62>
     6ea:	2903      	cmp	r1, #3
     6ec:	d015      	beq.n	71a <_sercom_get_default_pad+0x66>
	return 0;
     6ee:	2000      	movs	r0, #0
     6f0:	e7ee      	b.n	6d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6f2:	2901      	cmp	r1, #1
     6f4:	d007      	beq.n	706 <_sercom_get_default_pad+0x52>
     6f6:	2900      	cmp	r1, #0
     6f8:	d051      	beq.n	79e <_sercom_get_default_pad+0xea>
     6fa:	2902      	cmp	r1, #2
     6fc:	d005      	beq.n	70a <_sercom_get_default_pad+0x56>
     6fe:	2903      	cmp	r1, #3
     700:	d005      	beq.n	70e <_sercom_get_default_pad+0x5a>
	return 0;
     702:	2000      	movs	r0, #0
     704:	e7e4      	b.n	6d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     706:	4832      	ldr	r0, [pc, #200]	; (7d0 <_sercom_get_default_pad+0x11c>)
     708:	e7e2      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     70a:	4832      	ldr	r0, [pc, #200]	; (7d4 <_sercom_get_default_pad+0x120>)
     70c:	e7e0      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     70e:	4832      	ldr	r0, [pc, #200]	; (7d8 <_sercom_get_default_pad+0x124>)
     710:	e7de      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     712:	4832      	ldr	r0, [pc, #200]	; (7dc <_sercom_get_default_pad+0x128>)
     714:	e7dc      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     716:	4832      	ldr	r0, [pc, #200]	; (7e0 <_sercom_get_default_pad+0x12c>)
     718:	e7da      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     71a:	4832      	ldr	r0, [pc, #200]	; (7e4 <_sercom_get_default_pad+0x130>)
     71c:	e7d8      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     71e:	2901      	cmp	r1, #1
     720:	d007      	beq.n	732 <_sercom_get_default_pad+0x7e>
     722:	2900      	cmp	r1, #0
     724:	d03f      	beq.n	7a6 <_sercom_get_default_pad+0xf2>
     726:	2902      	cmp	r1, #2
     728:	d005      	beq.n	736 <_sercom_get_default_pad+0x82>
     72a:	2903      	cmp	r1, #3
     72c:	d005      	beq.n	73a <_sercom_get_default_pad+0x86>
	return 0;
     72e:	2000      	movs	r0, #0
     730:	e7ce      	b.n	6d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     732:	482d      	ldr	r0, [pc, #180]	; (7e8 <_sercom_get_default_pad+0x134>)
     734:	e7cc      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     736:	482d      	ldr	r0, [pc, #180]	; (7ec <_sercom_get_default_pad+0x138>)
     738:	e7ca      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     73a:	482d      	ldr	r0, [pc, #180]	; (7f0 <_sercom_get_default_pad+0x13c>)
     73c:	e7c8      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     73e:	2901      	cmp	r1, #1
     740:	d007      	beq.n	752 <_sercom_get_default_pad+0x9e>
     742:	2900      	cmp	r1, #0
     744:	d031      	beq.n	7aa <_sercom_get_default_pad+0xf6>
     746:	2902      	cmp	r1, #2
     748:	d005      	beq.n	756 <_sercom_get_default_pad+0xa2>
     74a:	2903      	cmp	r1, #3
     74c:	d005      	beq.n	75a <_sercom_get_default_pad+0xa6>
	return 0;
     74e:	2000      	movs	r0, #0
     750:	e7be      	b.n	6d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     752:	4828      	ldr	r0, [pc, #160]	; (7f4 <_sercom_get_default_pad+0x140>)
     754:	e7bc      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     756:	4828      	ldr	r0, [pc, #160]	; (7f8 <_sercom_get_default_pad+0x144>)
     758:	e7ba      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     75a:	4828      	ldr	r0, [pc, #160]	; (7fc <_sercom_get_default_pad+0x148>)
     75c:	e7b8      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     75e:	2901      	cmp	r1, #1
     760:	d007      	beq.n	772 <_sercom_get_default_pad+0xbe>
     762:	2900      	cmp	r1, #0
     764:	d023      	beq.n	7ae <_sercom_get_default_pad+0xfa>
     766:	2902      	cmp	r1, #2
     768:	d005      	beq.n	776 <_sercom_get_default_pad+0xc2>
     76a:	2903      	cmp	r1, #3
     76c:	d005      	beq.n	77a <_sercom_get_default_pad+0xc6>
	return 0;
     76e:	2000      	movs	r0, #0
     770:	e7ae      	b.n	6d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     772:	4823      	ldr	r0, [pc, #140]	; (800 <_sercom_get_default_pad+0x14c>)
     774:	e7ac      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     776:	4823      	ldr	r0, [pc, #140]	; (804 <_sercom_get_default_pad+0x150>)
     778:	e7aa      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     77a:	4823      	ldr	r0, [pc, #140]	; (808 <_sercom_get_default_pad+0x154>)
     77c:	e7a8      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     77e:	2901      	cmp	r1, #1
     780:	d007      	beq.n	792 <_sercom_get_default_pad+0xde>
     782:	2900      	cmp	r1, #0
     784:	d015      	beq.n	7b2 <_sercom_get_default_pad+0xfe>
     786:	2902      	cmp	r1, #2
     788:	d005      	beq.n	796 <_sercom_get_default_pad+0xe2>
     78a:	2903      	cmp	r1, #3
     78c:	d005      	beq.n	79a <_sercom_get_default_pad+0xe6>
	return 0;
     78e:	2000      	movs	r0, #0
     790:	e79e      	b.n	6d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     792:	481e      	ldr	r0, [pc, #120]	; (80c <_sercom_get_default_pad+0x158>)
     794:	e79c      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     796:	481e      	ldr	r0, [pc, #120]	; (810 <_sercom_get_default_pad+0x15c>)
     798:	e79a      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     79a:	481e      	ldr	r0, [pc, #120]	; (814 <_sercom_get_default_pad+0x160>)
     79c:	e798      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     79e:	481e      	ldr	r0, [pc, #120]	; (818 <_sercom_get_default_pad+0x164>)
     7a0:	e796      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     7a2:	2003      	movs	r0, #3
     7a4:	e794      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     7a6:	481d      	ldr	r0, [pc, #116]	; (81c <_sercom_get_default_pad+0x168>)
     7a8:	e792      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     7aa:	481d      	ldr	r0, [pc, #116]	; (820 <_sercom_get_default_pad+0x16c>)
     7ac:	e790      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     7ae:	481d      	ldr	r0, [pc, #116]	; (824 <_sercom_get_default_pad+0x170>)
     7b0:	e78e      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     7b2:	481d      	ldr	r0, [pc, #116]	; (828 <_sercom_get_default_pad+0x174>)
     7b4:	e78c      	b.n	6d0 <_sercom_get_default_pad+0x1c>
     7b6:	46c0      	nop			; (mov r8, r8)
     7b8:	42001000 	.word	0x42001000
     7bc:	42001800 	.word	0x42001800
     7c0:	42001c00 	.word	0x42001c00
     7c4:	42001400 	.word	0x42001400
     7c8:	42000800 	.word	0x42000800
     7cc:	42000c00 	.word	0x42000c00
     7d0:	00050003 	.word	0x00050003
     7d4:	00060003 	.word	0x00060003
     7d8:	00070003 	.word	0x00070003
     7dc:	00010003 	.word	0x00010003
     7e0:	001e0003 	.word	0x001e0003
     7e4:	001f0003 	.word	0x001f0003
     7e8:	00090003 	.word	0x00090003
     7ec:	000a0003 	.word	0x000a0003
     7f0:	000b0003 	.word	0x000b0003
     7f4:	00110003 	.word	0x00110003
     7f8:	00120003 	.word	0x00120003
     7fc:	00130003 	.word	0x00130003
     800:	000d0003 	.word	0x000d0003
     804:	000e0003 	.word	0x000e0003
     808:	000f0003 	.word	0x000f0003
     80c:	00170003 	.word	0x00170003
     810:	00180003 	.word	0x00180003
     814:	00190003 	.word	0x00190003
     818:	00040003 	.word	0x00040003
     81c:	00080003 	.word	0x00080003
     820:	00100003 	.word	0x00100003
     824:	000c0003 	.word	0x000c0003
     828:	00160003 	.word	0x00160003

0000082c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     82c:	b530      	push	{r4, r5, lr}
     82e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     830:	4b0b      	ldr	r3, [pc, #44]	; (860 <_sercom_get_sercom_inst_index+0x34>)
     832:	466a      	mov	r2, sp
     834:	cb32      	ldmia	r3!, {r1, r4, r5}
     836:	c232      	stmia	r2!, {r1, r4, r5}
     838:	cb32      	ldmia	r3!, {r1, r4, r5}
     83a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     83c:	9b00      	ldr	r3, [sp, #0]
     83e:	4283      	cmp	r3, r0
     840:	d00b      	beq.n	85a <_sercom_get_sercom_inst_index+0x2e>
     842:	2301      	movs	r3, #1
     844:	009a      	lsls	r2, r3, #2
     846:	4669      	mov	r1, sp
     848:	5852      	ldr	r2, [r2, r1]
     84a:	4282      	cmp	r2, r0
     84c:	d006      	beq.n	85c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     84e:	3301      	adds	r3, #1
     850:	2b06      	cmp	r3, #6
     852:	d1f7      	bne.n	844 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     854:	2000      	movs	r0, #0
}
     856:	b007      	add	sp, #28
     858:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     85a:	2300      	movs	r3, #0
			return i;
     85c:	b2d8      	uxtb	r0, r3
     85e:	e7fa      	b.n	856 <_sercom_get_sercom_inst_index+0x2a>
     860:	0000186c 	.word	0x0000186c

00000864 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     864:	4770      	bx	lr
	...

00000868 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     868:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     86a:	4b0a      	ldr	r3, [pc, #40]	; (894 <_sercom_set_handler+0x2c>)
     86c:	781b      	ldrb	r3, [r3, #0]
     86e:	2b00      	cmp	r3, #0
     870:	d10c      	bne.n	88c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     872:	4f09      	ldr	r7, [pc, #36]	; (898 <_sercom_set_handler+0x30>)
     874:	4e09      	ldr	r6, [pc, #36]	; (89c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     876:	4d0a      	ldr	r5, [pc, #40]	; (8a0 <_sercom_set_handler+0x38>)
     878:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     87a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     87c:	195a      	adds	r2, r3, r5
     87e:	6014      	str	r4, [r2, #0]
     880:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     882:	2b18      	cmp	r3, #24
     884:	d1f9      	bne.n	87a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     886:	2201      	movs	r2, #1
     888:	4b02      	ldr	r3, [pc, #8]	; (894 <_sercom_set_handler+0x2c>)
     88a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     88c:	0080      	lsls	r0, r0, #2
     88e:	4b02      	ldr	r3, [pc, #8]	; (898 <_sercom_set_handler+0x30>)
     890:	50c1      	str	r1, [r0, r3]
}
     892:	bdf0      	pop	{r4, r5, r6, r7, pc}
     894:	2000002a 	.word	0x2000002a
     898:	2000002c 	.word	0x2000002c
     89c:	00000865 	.word	0x00000865
     8a0:	20000064 	.word	0x20000064

000008a4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     8a4:	b500      	push	{lr}
     8a6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     8a8:	2307      	movs	r3, #7
     8aa:	466a      	mov	r2, sp
     8ac:	7013      	strb	r3, [r2, #0]
     8ae:	3301      	adds	r3, #1
     8b0:	7053      	strb	r3, [r2, #1]
     8b2:	3301      	adds	r3, #1
     8b4:	7093      	strb	r3, [r2, #2]
     8b6:	3301      	adds	r3, #1
     8b8:	70d3      	strb	r3, [r2, #3]
     8ba:	3301      	adds	r3, #1
     8bc:	7113      	strb	r3, [r2, #4]
     8be:	3301      	adds	r3, #1
     8c0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     8c2:	4b03      	ldr	r3, [pc, #12]	; (8d0 <_sercom_get_interrupt_vector+0x2c>)
     8c4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     8c6:	466b      	mov	r3, sp
     8c8:	5618      	ldrsb	r0, [r3, r0]
}
     8ca:	b003      	add	sp, #12
     8cc:	bd00      	pop	{pc}
     8ce:	46c0      	nop			; (mov r8, r8)
     8d0:	0000082d 	.word	0x0000082d

000008d4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     8d4:	b510      	push	{r4, lr}
     8d6:	4b02      	ldr	r3, [pc, #8]	; (8e0 <SERCOM0_Handler+0xc>)
     8d8:	681b      	ldr	r3, [r3, #0]
     8da:	2000      	movs	r0, #0
     8dc:	4798      	blx	r3
     8de:	bd10      	pop	{r4, pc}
     8e0:	2000002c 	.word	0x2000002c

000008e4 <SERCOM1_Handler>:
     8e4:	b510      	push	{r4, lr}
     8e6:	4b02      	ldr	r3, [pc, #8]	; (8f0 <SERCOM1_Handler+0xc>)
     8e8:	685b      	ldr	r3, [r3, #4]
     8ea:	2001      	movs	r0, #1
     8ec:	4798      	blx	r3
     8ee:	bd10      	pop	{r4, pc}
     8f0:	2000002c 	.word	0x2000002c

000008f4 <SERCOM2_Handler>:
     8f4:	b510      	push	{r4, lr}
     8f6:	4b02      	ldr	r3, [pc, #8]	; (900 <SERCOM2_Handler+0xc>)
     8f8:	689b      	ldr	r3, [r3, #8]
     8fa:	2002      	movs	r0, #2
     8fc:	4798      	blx	r3
     8fe:	bd10      	pop	{r4, pc}
     900:	2000002c 	.word	0x2000002c

00000904 <SERCOM3_Handler>:
     904:	b510      	push	{r4, lr}
     906:	4b02      	ldr	r3, [pc, #8]	; (910 <SERCOM3_Handler+0xc>)
     908:	68db      	ldr	r3, [r3, #12]
     90a:	2003      	movs	r0, #3
     90c:	4798      	blx	r3
     90e:	bd10      	pop	{r4, pc}
     910:	2000002c 	.word	0x2000002c

00000914 <SERCOM4_Handler>:
     914:	b510      	push	{r4, lr}
     916:	4b02      	ldr	r3, [pc, #8]	; (920 <SERCOM4_Handler+0xc>)
     918:	691b      	ldr	r3, [r3, #16]
     91a:	2004      	movs	r0, #4
     91c:	4798      	blx	r3
     91e:	bd10      	pop	{r4, pc}
     920:	2000002c 	.word	0x2000002c

00000924 <SERCOM5_Handler>:
     924:	b510      	push	{r4, lr}
     926:	4b02      	ldr	r3, [pc, #8]	; (930 <SERCOM5_Handler+0xc>)
     928:	695b      	ldr	r3, [r3, #20]
     92a:	2005      	movs	r0, #5
     92c:	4798      	blx	r3
     92e:	bd10      	pop	{r4, pc}
     930:	2000002c 	.word	0x2000002c

00000934 <configure_i2c_master>:
 * @return				- void
 * 
 * @note				- Initialization - see main.h for details
 **********************************************************************/
  void configure_i2c_master(void)
  {
     934:	b570      	push	{r4, r5, r6, lr}
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     936:	4a1d      	ldr	r2, [pc, #116]	; (9ac <configure_i2c_master+0x78>)
     938:	2364      	movs	r3, #100	; 0x64
     93a:	6013      	str	r3, [r2, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
     93c:	2300      	movs	r3, #0
     93e:	7113      	strb	r3, [r2, #4]
	config->run_in_standby   = false;
     940:	7413      	strb	r3, [r2, #16]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     942:	2180      	movs	r1, #128	; 0x80
     944:	0389      	lsls	r1, r1, #14
     946:	6091      	str	r1, [r2, #8]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
     948:	2101      	movs	r1, #1
     94a:	4249      	negs	r1, r1
     94c:	8191      	strh	r1, [r2, #12]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     94e:	7713      	strb	r3, [r2, #28]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     950:	6213      	str	r3, [r2, #32]
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
	config->master_scl_low_extend_timeout  = false;
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     952:	33d7      	adds	r3, #215	; 0xd7
     954:	8493      	strh	r3, [r2, #36]	; 0x24
	  /* Initialize config structure and software module. */
	  i2c_master_get_config_defaults(&config_i2c_master);

	  /* Change buffer timeout to something longer. */
	  config_i2c_master.buffer_timeout = 10000;
     956:	4b16      	ldr	r3, [pc, #88]	; (9b0 <configure_i2c_master+0x7c>)
     958:	81d3      	strh	r3, [r2, #14]

	  /* Initialize and enable device with config. See Main.h for details*/
	  // SERCOM0 PAD[0] PA08 - SDA
	  // SERCOM0 PAD[1] PA09 - SCL
	  config_i2c_master.pinmux_pad0    = PINMUX_PA08D_SERCOM2_PAD0;	//ALT:SERCOM
     95a:	4b16      	ldr	r3, [pc, #88]	; (9b4 <configure_i2c_master+0x80>)
     95c:	6153      	str	r3, [r2, #20]
	  config_i2c_master.pinmux_pad1    = PINMUX_PA09D_SERCOM2_PAD1;	//ALT:SERCOM
     95e:	4b16      	ldr	r3, [pc, #88]	; (9b8 <configure_i2c_master+0x84>)
     960:	6193      	str	r3, [r2, #24]
	  
	  i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
     962:	4c16      	ldr	r4, [pc, #88]	; (9bc <configure_i2c_master+0x88>)
     964:	4916      	ldr	r1, [pc, #88]	; (9c0 <configure_i2c_master+0x8c>)
     966:	0020      	movs	r0, r4
     968:	4b16      	ldr	r3, [pc, #88]	; (9c4 <configure_i2c_master+0x90>)
     96a:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     96c:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     96e:	8a23      	ldrh	r3, [r4, #16]
	while (i2c_master_is_syncing(module)) {
     970:	b21b      	sxth	r3, r3
     972:	2b00      	cmp	r3, #0
     974:	dbfb      	blt.n	96e <configure_i2c_master+0x3a>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     976:	6823      	ldr	r3, [r4, #0]
     978:	2202      	movs	r2, #2
     97a:	4313      	orrs	r3, r2
     97c:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     97e:	4d0f      	ldr	r5, [pc, #60]	; (9bc <configure_i2c_master+0x88>)
     980:	6828      	ldr	r0, [r5, #0]
     982:	4b11      	ldr	r3, [pc, #68]	; (9c8 <configure_i2c_master+0x94>)
     984:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     986:	231f      	movs	r3, #31
     988:	4018      	ands	r0, r3
     98a:	3b1e      	subs	r3, #30
     98c:	4083      	lsls	r3, r0
     98e:	4a0f      	ldr	r2, [pc, #60]	; (9cc <configure_i2c_master+0x98>)
     990:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     992:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
     994:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     996:	2110      	movs	r1, #16
     998:	8a22      	ldrh	r2, [r4, #16]
     99a:	420a      	tst	r2, r1
     99c:	d104      	bne.n	9a8 <configure_i2c_master+0x74>
		timeout_counter++;
     99e:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     9a0:	4283      	cmp	r3, r0
     9a2:	d3f9      	bcc.n	998 <configure_i2c_master+0x64>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     9a4:	2310      	movs	r3, #16
     9a6:	8223      	strh	r3, [r4, #16]
	  i2c_master_enable(&i2c_master_instance);

  }// configure_i2c_master
     9a8:	bd70      	pop	{r4, r5, r6, pc}
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	200001bc 	.word	0x200001bc
     9b0:	00002710 	.word	0x00002710
     9b4:	00080003 	.word	0x00080003
     9b8:	00090003 	.word	0x00090003
     9bc:	20000194 	.word	0x20000194
     9c0:	42001000 	.word	0x42001000
     9c4:	00000221 	.word	0x00000221
     9c8:	000008a5 	.word	0x000008a5
     9cc:	e000e100 	.word	0xe000e100

000009d0 <i2c_slWriteA>:
 * @return				- 0
 *
 * @note				- I2C A 
 **********************************************************************/
int8_t i2c_slWriteA(uint8_t i2c_addr, uint8_t *write_buffer, uint8_t len)
 {
     9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9d2:	af00      	add	r7, sp, #0

	// Merge Device Register and data to TX
	uint8_t merged_packet[len + 1];
     9d4:	0013      	movs	r3, r2
     9d6:	3308      	adds	r3, #8
     9d8:	08db      	lsrs	r3, r3, #3
     9da:	00db      	lsls	r3, r3, #3
     9dc:	466c      	mov	r4, sp
     9de:	1ae3      	subs	r3, r4, r3
     9e0:	469d      	mov	sp, r3
     9e2:	466d      	mov	r5, sp
 	
 	for(uint16_t i = 0; i < len; i++)
     9e4:	b292      	uxth	r2, r2
     9e6:	2a00      	cmp	r2, #0
     9e8:	d006      	beq.n	9f8 <i2c_slWriteA+0x28>
     9ea:	2300      	movs	r3, #0
	merged_packet[i] = write_buffer[i];
     9ec:	5ccc      	ldrb	r4, [r1, r3]
     9ee:	54ec      	strb	r4, [r5, r3]
     9f0:	3301      	adds	r3, #1
 	for(uint16_t i = 0; i < len; i++)
     9f2:	b29c      	uxth	r4, r3
     9f4:	4294      	cmp	r4, r2
     9f6:	d3f9      	bcc.n	9ec <i2c_slWriteA+0x1c>

	write_packet.address = i2c_addr;
     9f8:	4b0c      	ldr	r3, [pc, #48]	; (a2c <i2c_slWriteA+0x5c>)
     9fa:	8018      	strh	r0, [r3, #0]
	write_packet.data = merged_packet;
     9fc:	605d      	str	r5, [r3, #4]
	write_packet.data_length = len;
     9fe:	805a      	strh	r2, [r3, #2]
	read_packet.ten_bit_address = FALSE;
     a00:	4b0b      	ldr	r3, [pc, #44]	; (a30 <i2c_slWriteA+0x60>)
     a02:	2200      	movs	r2, #0
     a04:	721a      	strb	r2, [r3, #8]
	read_packet.high_speed = FALSE;
     a06:	725a      	strb	r2, [r3, #9]

	while (i2c_master_write_packet_wait(&i2c_master_instance, &write_packet) != STATUS_OK) 
     a08:	4d08      	ldr	r5, [pc, #32]	; (a2c <i2c_slWriteA+0x5c>)
     a0a:	4c0a      	ldr	r4, [pc, #40]	; (a34 <i2c_slWriteA+0x64>)
     a0c:	4e0a      	ldr	r6, [pc, #40]	; (a38 <i2c_slWriteA+0x68>)
     a0e:	0029      	movs	r1, r5
     a10:	0020      	movs	r0, r4
     a12:	47b0      	blx	r6
     a14:	2800      	cmp	r0, #0
     a16:	d007      	beq.n	a28 <i2c_slWriteA+0x58>
	{
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == I2C_TIMEOUT) {
     a18:	4a08      	ldr	r2, [pc, #32]	; (a3c <i2c_slWriteA+0x6c>)
     a1a:	8813      	ldrh	r3, [r2, #0]
     a1c:	1c59      	adds	r1, r3, #1
     a1e:	8011      	strh	r1, [r2, #0]
     a20:	2b0a      	cmp	r3, #10
     a22:	d1f4      	bne.n	a0e <i2c_slWriteA+0x3e>
		return -1;
     a24:	2001      	movs	r0, #1
     a26:	4240      	negs	r0, r0
			break;
		}
	}

	return 0;
 } //i2c_Write
     a28:	46bd      	mov	sp, r7
     a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a2c:	2000007c 	.word	0x2000007c
     a30:	20000088 	.word	0x20000088
     a34:	20000194 	.word	0x20000194
     a38:	000003b5 	.word	0x000003b5
     a3c:	20000044 	.word	0x20000044

00000a40 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     a40:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     a42:	2000      	movs	r0, #0
     a44:	4b08      	ldr	r3, [pc, #32]	; (a68 <delay_init+0x28>)
     a46:	4798      	blx	r3
     a48:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     a4a:	4c08      	ldr	r4, [pc, #32]	; (a6c <delay_init+0x2c>)
     a4c:	21fa      	movs	r1, #250	; 0xfa
     a4e:	0089      	lsls	r1, r1, #2
     a50:	47a0      	blx	r4
     a52:	4b07      	ldr	r3, [pc, #28]	; (a70 <delay_init+0x30>)
     a54:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     a56:	4907      	ldr	r1, [pc, #28]	; (a74 <delay_init+0x34>)
     a58:	0028      	movs	r0, r5
     a5a:	47a0      	blx	r4
     a5c:	4b06      	ldr	r3, [pc, #24]	; (a78 <delay_init+0x38>)
     a5e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     a60:	2205      	movs	r2, #5
     a62:	4b06      	ldr	r3, [pc, #24]	; (a7c <delay_init+0x3c>)
     a64:	601a      	str	r2, [r3, #0]
}
     a66:	bd70      	pop	{r4, r5, r6, pc}
     a68:	00001095 	.word	0x00001095
     a6c:	0000170d 	.word	0x0000170d
     a70:	20000000 	.word	0x20000000
     a74:	000f4240 	.word	0x000f4240
     a78:	20000004 	.word	0x20000004
     a7c:	e000e010 	.word	0xe000e010

00000a80 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     a80:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     a82:	4b08      	ldr	r3, [pc, #32]	; (aa4 <delay_cycles_ms+0x24>)
     a84:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     a86:	4a08      	ldr	r2, [pc, #32]	; (aa8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     a88:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     a8a:	2180      	movs	r1, #128	; 0x80
     a8c:	0249      	lsls	r1, r1, #9
	while (n--) {
     a8e:	3801      	subs	r0, #1
     a90:	d307      	bcc.n	aa2 <delay_cycles_ms+0x22>
	if (n > 0) {
     a92:	2c00      	cmp	r4, #0
     a94:	d0fb      	beq.n	a8e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     a96:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     a98:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     a9a:	6813      	ldr	r3, [r2, #0]
     a9c:	420b      	tst	r3, r1
     a9e:	d0fc      	beq.n	a9a <delay_cycles_ms+0x1a>
     aa0:	e7f5      	b.n	a8e <delay_cycles_ms+0xe>
	}
}
     aa2:	bd30      	pop	{r4, r5, pc}
     aa4:	20000000 	.word	0x20000000
     aa8:	e000e010 	.word	0xe000e010

00000aac <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     aac:	4a04      	ldr	r2, [pc, #16]	; (ac0 <_extint_enable+0x14>)
     aae:	7813      	ldrb	r3, [r2, #0]
     ab0:	2102      	movs	r1, #2
     ab2:	430b      	orrs	r3, r1
     ab4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     ab6:	7853      	ldrb	r3, [r2, #1]
     ab8:	b25b      	sxtb	r3, r3
     aba:	2b00      	cmp	r3, #0
     abc:	dbfb      	blt.n	ab6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     abe:	4770      	bx	lr
     ac0:	40001800 	.word	0x40001800

00000ac4 <_system_extint_init>:
{
     ac4:	b500      	push	{lr}
     ac6:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     ac8:	4a12      	ldr	r2, [pc, #72]	; (b14 <_system_extint_init+0x50>)
     aca:	6993      	ldr	r3, [r2, #24]
     acc:	2140      	movs	r1, #64	; 0x40
     ace:	430b      	orrs	r3, r1
     ad0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     ad2:	a901      	add	r1, sp, #4
     ad4:	2300      	movs	r3, #0
     ad6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     ad8:	2003      	movs	r0, #3
     ada:	4b0f      	ldr	r3, [pc, #60]	; (b18 <_system_extint_init+0x54>)
     adc:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     ade:	2003      	movs	r0, #3
     ae0:	4b0e      	ldr	r3, [pc, #56]	; (b1c <_system_extint_init+0x58>)
     ae2:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     ae4:	4a0e      	ldr	r2, [pc, #56]	; (b20 <_system_extint_init+0x5c>)
     ae6:	7813      	ldrb	r3, [r2, #0]
     ae8:	2101      	movs	r1, #1
     aea:	430b      	orrs	r3, r1
     aec:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     aee:	7853      	ldrb	r3, [r2, #1]
     af0:	b25b      	sxtb	r3, r3
     af2:	2b00      	cmp	r3, #0
     af4:	dbfb      	blt.n	aee <_system_extint_init+0x2a>
     af6:	4b0b      	ldr	r3, [pc, #44]	; (b24 <_system_extint_init+0x60>)
     af8:	0019      	movs	r1, r3
     afa:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     afc:	2200      	movs	r2, #0
     afe:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     b00:	4299      	cmp	r1, r3
     b02:	d1fc      	bne.n	afe <_system_extint_init+0x3a>
     b04:	2210      	movs	r2, #16
     b06:	4b08      	ldr	r3, [pc, #32]	; (b28 <_system_extint_init+0x64>)
     b08:	601a      	str	r2, [r3, #0]
	_extint_enable();
     b0a:	4b08      	ldr	r3, [pc, #32]	; (b2c <_system_extint_init+0x68>)
     b0c:	4798      	blx	r3
}
     b0e:	b003      	add	sp, #12
     b10:	bd00      	pop	{pc}
     b12:	46c0      	nop			; (mov r8, r8)
     b14:	40000400 	.word	0x40000400
     b18:	000011ad 	.word	0x000011ad
     b1c:	00001121 	.word	0x00001121
     b20:	40001800 	.word	0x40001800
     b24:	200001e4 	.word	0x200001e4
     b28:	e000e100 	.word	0xe000e100
     b2c:	00000aad 	.word	0x00000aad

00000b30 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     b30:	2300      	movs	r3, #0
     b32:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     b34:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     b36:	2201      	movs	r2, #1
     b38:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     b3a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     b3c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     b3e:	3302      	adds	r3, #2
     b40:	72c3      	strb	r3, [r0, #11]
}
     b42:	4770      	bx	lr

00000b44 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     b44:	b5f0      	push	{r4, r5, r6, r7, lr}
     b46:	b083      	sub	sp, #12
     b48:	0005      	movs	r5, r0
     b4a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b4c:	a901      	add	r1, sp, #4
     b4e:	2300      	movs	r3, #0
     b50:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     b52:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     b54:	7923      	ldrb	r3, [r4, #4]
     b56:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     b58:	7a23      	ldrb	r3, [r4, #8]
     b5a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     b5c:	7820      	ldrb	r0, [r4, #0]
     b5e:	4b15      	ldr	r3, [pc, #84]	; (bb4 <extint_chan_set_config+0x70>)
     b60:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     b62:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     b64:	2d1f      	cmp	r5, #31
     b66:	d800      	bhi.n	b6a <extint_chan_set_config+0x26>
		return eics[eic_index];
     b68:	4813      	ldr	r0, [pc, #76]	; (bb8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     b6a:	2207      	movs	r2, #7
     b6c:	402a      	ands	r2, r5
     b6e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     b70:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     b72:	7aa3      	ldrb	r3, [r4, #10]
     b74:	2b00      	cmp	r3, #0
     b76:	d001      	beq.n	b7c <extint_chan_set_config+0x38>
     b78:	2308      	movs	r3, #8
     b7a:	431f      	orrs	r7, r3
     b7c:	08eb      	lsrs	r3, r5, #3
     b7e:	009b      	lsls	r3, r3, #2
     b80:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     b82:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     b84:	260f      	movs	r6, #15
     b86:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     b88:	43b1      	bics	r1, r6
			(new_config << config_pos);
     b8a:	4097      	lsls	r7, r2
     b8c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     b8e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     b90:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     b92:	7a63      	ldrb	r3, [r4, #9]
     b94:	2b00      	cmp	r3, #0
     b96:	d106      	bne.n	ba6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     b98:	6943      	ldr	r3, [r0, #20]
     b9a:	2201      	movs	r2, #1
     b9c:	40aa      	lsls	r2, r5
     b9e:	4393      	bics	r3, r2
     ba0:	6143      	str	r3, [r0, #20]
	}
}
     ba2:	b003      	add	sp, #12
     ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     ba6:	6942      	ldr	r2, [r0, #20]
     ba8:	2301      	movs	r3, #1
     baa:	40ab      	lsls	r3, r5
     bac:	4313      	orrs	r3, r2
     bae:	6143      	str	r3, [r0, #20]
     bb0:	e7f7      	b.n	ba2 <extint_chan_set_config+0x5e>
     bb2:	46c0      	nop			; (mov r8, r8)
     bb4:	000012a5 	.word	0x000012a5
     bb8:	40001800 	.word	0x40001800

00000bbc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     bbc:	b500      	push	{lr}
     bbe:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     bc0:	ab01      	add	r3, sp, #4
     bc2:	2280      	movs	r2, #128	; 0x80
     bc4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     bc6:	780a      	ldrb	r2, [r1, #0]
     bc8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     bca:	784a      	ldrb	r2, [r1, #1]
     bcc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     bce:	788a      	ldrb	r2, [r1, #2]
     bd0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     bd2:	0019      	movs	r1, r3
     bd4:	4b01      	ldr	r3, [pc, #4]	; (bdc <port_pin_set_config+0x20>)
     bd6:	4798      	blx	r3
}
     bd8:	b003      	add	sp, #12
     bda:	bd00      	pop	{pc}
     bdc:	000012a5 	.word	0x000012a5

00000be0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     be0:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     be2:	2a00      	cmp	r2, #0
     be4:	d001      	beq.n	bea <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     be6:	0018      	movs	r0, r3
     be8:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     bea:	008b      	lsls	r3, r1, #2
     bec:	4a06      	ldr	r2, [pc, #24]	; (c08 <extint_register_callback+0x28>)
     bee:	589b      	ldr	r3, [r3, r2]
     bf0:	2b00      	cmp	r3, #0
     bf2:	d003      	beq.n	bfc <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     bf4:	4283      	cmp	r3, r0
     bf6:	d005      	beq.n	c04 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     bf8:	231d      	movs	r3, #29
     bfa:	e7f4      	b.n	be6 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     bfc:	0089      	lsls	r1, r1, #2
     bfe:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     c00:	2300      	movs	r3, #0
     c02:	e7f0      	b.n	be6 <extint_register_callback+0x6>
		return STATUS_OK;
     c04:	2300      	movs	r3, #0
     c06:	e7ee      	b.n	be6 <extint_register_callback+0x6>
     c08:	200001e4 	.word	0x200001e4

00000c0c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c0c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     c0e:	2900      	cmp	r1, #0
     c10:	d001      	beq.n	c16 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     c12:	0018      	movs	r0, r3
     c14:	4770      	bx	lr
		return NULL;
     c16:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     c18:	281f      	cmp	r0, #31
     c1a:	d800      	bhi.n	c1e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     c1c:	4a02      	ldr	r2, [pc, #8]	; (c28 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     c1e:	2301      	movs	r3, #1
     c20:	4083      	lsls	r3, r0
     c22:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     c24:	2300      	movs	r3, #0
     c26:	e7f4      	b.n	c12 <extint_chan_enable_callback+0x6>
     c28:	40001800 	.word	0x40001800

00000c2c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     c2c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     c2e:	2200      	movs	r2, #0
     c30:	4b10      	ldr	r3, [pc, #64]	; (c74 <EIC_Handler+0x48>)
     c32:	701a      	strb	r2, [r3, #0]
     c34:	2300      	movs	r3, #0
     c36:	4910      	ldr	r1, [pc, #64]	; (c78 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     c38:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     c3a:	4e10      	ldr	r6, [pc, #64]	; (c7c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     c3c:	4c0d      	ldr	r4, [pc, #52]	; (c74 <EIC_Handler+0x48>)
     c3e:	e00a      	b.n	c56 <EIC_Handler+0x2a>
		return eics[eic_index];
     c40:	490d      	ldr	r1, [pc, #52]	; (c78 <EIC_Handler+0x4c>)
     c42:	e008      	b.n	c56 <EIC_Handler+0x2a>
     c44:	7823      	ldrb	r3, [r4, #0]
     c46:	3301      	adds	r3, #1
     c48:	b2db      	uxtb	r3, r3
     c4a:	7023      	strb	r3, [r4, #0]
     c4c:	2b0f      	cmp	r3, #15
     c4e:	d810      	bhi.n	c72 <EIC_Handler+0x46>
		return NULL;
     c50:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     c52:	2b1f      	cmp	r3, #31
     c54:	d9f4      	bls.n	c40 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     c56:	0028      	movs	r0, r5
     c58:	4018      	ands	r0, r3
     c5a:	2201      	movs	r2, #1
     c5c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     c5e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     c60:	4210      	tst	r0, r2
     c62:	d0ef      	beq.n	c44 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     c64:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     c66:	009b      	lsls	r3, r3, #2
     c68:	599b      	ldr	r3, [r3, r6]
     c6a:	2b00      	cmp	r3, #0
     c6c:	d0ea      	beq.n	c44 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     c6e:	4798      	blx	r3
     c70:	e7e8      	b.n	c44 <EIC_Handler+0x18>
			}
		}
	}
}
     c72:	bd70      	pop	{r4, r5, r6, pc}
     c74:	20000224 	.word	0x20000224
     c78:	40001800 	.word	0x40001800
     c7c:	200001e4 	.word	0x200001e4

00000c80 <config_led>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
 void config_led(void)
 {
     c80:	b500      	push	{lr}
     c82:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     c84:	a901      	add	r1, sp, #4
     c86:	2301      	movs	r3, #1
     c88:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
     c8a:	2200      	movs	r2, #0
     c8c:	708a      	strb	r2, [r1, #2]
	 struct port_config pin_conf;
	 port_get_config_defaults(&pin_conf);

	 pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     c8e:	700b      	strb	r3, [r1, #0]
	 port_pin_set_config(LED_0_PIN, &pin_conf);
     c90:	200e      	movs	r0, #14
     c92:	4b04      	ldr	r3, [pc, #16]	; (ca4 <config_led+0x24>)
     c94:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     c96:	2280      	movs	r2, #128	; 0x80
     c98:	01d2      	lsls	r2, r2, #7
     c9a:	4b03      	ldr	r3, [pc, #12]	; (ca8 <config_led+0x28>)
     c9c:	619a      	str	r2, [r3, #24]
	 port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
 }
     c9e:	b003      	add	sp, #12
     ca0:	bd00      	pop	{pc}
     ca2:	46c0      	nop			; (mov r8, r8)
     ca4:	00000bbd 	.word	0x00000bbd
     ca8:	41004400 	.word	0x41004400

00000cac <config_btn>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
 void config_btn(void)
 {
     cac:	b500      	push	{lr}
     cae:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
     cb0:	a901      	add	r1, sp, #4
     cb2:	2300      	movs	r3, #0
     cb4:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     cb6:	2201      	movs	r2, #1
     cb8:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     cba:	708b      	strb	r3, [r1, #2]
	 port_get_config_defaults(&pin_conf);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     cbc:	200f      	movs	r0, #15
     cbe:	4b02      	ldr	r3, [pc, #8]	; (cc8 <config_btn+0x1c>)
     cc0:	4798      	blx	r3
 }
     cc2:	b003      	add	sp, #12
     cc4:	bd00      	pop	{pc}
     cc6:	46c0      	nop			; (mov r8, r8)
     cc8:	00000bbd 	.word	0x00000bbd

00000ccc <system_board_init>:

void system_board_init(void)
{
     ccc:	b510      	push	{r4, lr}
 	/*Configure system tick to generate periodic interrupts */
 	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
     cce:	2000      	movs	r0, #0
     cd0:	4b0d      	ldr	r3, [pc, #52]	; (d08 <system_board_init+0x3c>)
     cd2:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
     cd4:	3801      	subs	r0, #1
     cd6:	4b0d      	ldr	r3, [pc, #52]	; (d0c <system_board_init+0x40>)
     cd8:	4298      	cmp	r0, r3
     cda:	d80d      	bhi.n	cf8 <system_board_init+0x2c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
     cdc:	4a0c      	ldr	r2, [pc, #48]	; (d10 <system_board_init+0x44>)
     cde:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     ce0:	480c      	ldr	r0, [pc, #48]	; (d14 <system_board_init+0x48>)
     ce2:	6a03      	ldr	r3, [r0, #32]
     ce4:	021b      	lsls	r3, r3, #8
     ce6:	0a1b      	lsrs	r3, r3, #8
     ce8:	21c0      	movs	r1, #192	; 0xc0
     cea:	0609      	lsls	r1, r1, #24
     cec:	430b      	orrs	r3, r1
     cee:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
     cf0:	2300      	movs	r3, #0
     cf2:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     cf4:	3307      	adds	r3, #7
     cf6:	6013      	str	r3, [r2, #0]
 	delay_init();
     cf8:	4b07      	ldr	r3, [pc, #28]	; (d18 <system_board_init+0x4c>)
     cfa:	4798      	blx	r3

	config_led();
     cfc:	4b07      	ldr	r3, [pc, #28]	; (d1c <system_board_init+0x50>)
     cfe:	4798      	blx	r3
	config_btn();
     d00:	4b07      	ldr	r3, [pc, #28]	; (d20 <system_board_init+0x54>)
     d02:	4798      	blx	r3

}
     d04:	bd10      	pop	{r4, pc}
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	00001095 	.word	0x00001095
     d0c:	00ffffff 	.word	0x00ffffff
     d10:	e000e010 	.word	0xe000e010
     d14:	e000ed00 	.word	0xe000ed00
     d18:	00000a41 	.word	0x00000a41
     d1c:	00000c81 	.word	0x00000c81
     d20:	00000cad 	.word	0x00000cad

00000d24 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     d24:	4b0c      	ldr	r3, [pc, #48]	; (d58 <cpu_irq_enter_critical+0x34>)
     d26:	681b      	ldr	r3, [r3, #0]
     d28:	2b00      	cmp	r3, #0
     d2a:	d106      	bne.n	d3a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     d2c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     d30:	2b00      	cmp	r3, #0
     d32:	d007      	beq.n	d44 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     d34:	2200      	movs	r2, #0
     d36:	4b09      	ldr	r3, [pc, #36]	; (d5c <cpu_irq_enter_critical+0x38>)
     d38:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     d3a:	4a07      	ldr	r2, [pc, #28]	; (d58 <cpu_irq_enter_critical+0x34>)
     d3c:	6813      	ldr	r3, [r2, #0]
     d3e:	3301      	adds	r3, #1
     d40:	6013      	str	r3, [r2, #0]
}
     d42:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     d44:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     d46:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     d4a:	2200      	movs	r2, #0
     d4c:	4b04      	ldr	r3, [pc, #16]	; (d60 <cpu_irq_enter_critical+0x3c>)
     d4e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     d50:	3201      	adds	r2, #1
     d52:	4b02      	ldr	r3, [pc, #8]	; (d5c <cpu_irq_enter_critical+0x38>)
     d54:	701a      	strb	r2, [r3, #0]
     d56:	e7f0      	b.n	d3a <cpu_irq_enter_critical+0x16>
     d58:	20000048 	.word	0x20000048
     d5c:	2000004c 	.word	0x2000004c
     d60:	20000008 	.word	0x20000008

00000d64 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     d64:	4b08      	ldr	r3, [pc, #32]	; (d88 <cpu_irq_leave_critical+0x24>)
     d66:	681a      	ldr	r2, [r3, #0]
     d68:	3a01      	subs	r2, #1
     d6a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     d6c:	681b      	ldr	r3, [r3, #0]
     d6e:	2b00      	cmp	r3, #0
     d70:	d109      	bne.n	d86 <cpu_irq_leave_critical+0x22>
     d72:	4b06      	ldr	r3, [pc, #24]	; (d8c <cpu_irq_leave_critical+0x28>)
     d74:	781b      	ldrb	r3, [r3, #0]
     d76:	2b00      	cmp	r3, #0
     d78:	d005      	beq.n	d86 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     d7a:	2201      	movs	r2, #1
     d7c:	4b04      	ldr	r3, [pc, #16]	; (d90 <cpu_irq_leave_critical+0x2c>)
     d7e:	701a      	strb	r2, [r3, #0]
     d80:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     d84:	b662      	cpsie	i
	}
}
     d86:	4770      	bx	lr
     d88:	20000048 	.word	0x20000048
     d8c:	2000004c 	.word	0x2000004c
     d90:	20000008 	.word	0x20000008

00000d94 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     d94:	b510      	push	{r4, lr}
	switch (clock_source) {
     d96:	2807      	cmp	r0, #7
     d98:	d803      	bhi.n	da2 <system_clock_source_get_hz+0xe>
     d9a:	0080      	lsls	r0, r0, #2
     d9c:	4b16      	ldr	r3, [pc, #88]	; (df8 <system_clock_source_get_hz+0x64>)
     d9e:	581b      	ldr	r3, [r3, r0]
     da0:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
     da2:	2000      	movs	r0, #0
     da4:	e027      	b.n	df6 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
     da6:	4b15      	ldr	r3, [pc, #84]	; (dfc <system_clock_source_get_hz+0x68>)
     da8:	68d8      	ldr	r0, [r3, #12]
     daa:	e024      	b.n	df6 <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     dac:	4b14      	ldr	r3, [pc, #80]	; (e00 <system_clock_source_get_hz+0x6c>)
     dae:	6a1b      	ldr	r3, [r3, #32]
     db0:	059b      	lsls	r3, r3, #22
     db2:	0f9b      	lsrs	r3, r3, #30
     db4:	4813      	ldr	r0, [pc, #76]	; (e04 <system_clock_source_get_hz+0x70>)
     db6:	40d8      	lsrs	r0, r3
     db8:	e01d      	b.n	df6 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
     dba:	4b10      	ldr	r3, [pc, #64]	; (dfc <system_clock_source_get_hz+0x68>)
     dbc:	6918      	ldr	r0, [r3, #16]
     dbe:	e01a      	b.n	df6 <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     dc0:	4b0e      	ldr	r3, [pc, #56]	; (dfc <system_clock_source_get_hz+0x68>)
     dc2:	681b      	ldr	r3, [r3, #0]
			return 0;
     dc4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     dc6:	079b      	lsls	r3, r3, #30
     dc8:	d515      	bpl.n	df6 <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     dca:	490d      	ldr	r1, [pc, #52]	; (e00 <system_clock_source_get_hz+0x6c>)
     dcc:	2210      	movs	r2, #16
     dce:	68cb      	ldr	r3, [r1, #12]
     dd0:	421a      	tst	r2, r3
     dd2:	d0fc      	beq.n	dce <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     dd4:	4b09      	ldr	r3, [pc, #36]	; (dfc <system_clock_source_get_hz+0x68>)
     dd6:	681b      	ldr	r3, [r3, #0]
     dd8:	075b      	lsls	r3, r3, #29
     dda:	d401      	bmi.n	de0 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     ddc:	480a      	ldr	r0, [pc, #40]	; (e08 <system_clock_source_get_hz+0x74>)
     dde:	e00a      	b.n	df6 <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     de0:	2000      	movs	r0, #0
     de2:	4b0a      	ldr	r3, [pc, #40]	; (e0c <system_clock_source_get_hz+0x78>)
     de4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     de6:	4b05      	ldr	r3, [pc, #20]	; (dfc <system_clock_source_get_hz+0x68>)
     de8:	689b      	ldr	r3, [r3, #8]
     dea:	041b      	lsls	r3, r3, #16
     dec:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     dee:	4358      	muls	r0, r3
     df0:	e001      	b.n	df6 <system_clock_source_get_hz+0x62>
		return 32768UL;
     df2:	2080      	movs	r0, #128	; 0x80
     df4:	0200      	lsls	r0, r0, #8
	}
}
     df6:	bd10      	pop	{r4, pc}
     df8:	00001884 	.word	0x00001884
     dfc:	20000050 	.word	0x20000050
     e00:	40000800 	.word	0x40000800
     e04:	007a1200 	.word	0x007a1200
     e08:	02dc6c00 	.word	0x02dc6c00
     e0c:	000011c9 	.word	0x000011c9

00000e10 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     e10:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     e12:	490c      	ldr	r1, [pc, #48]	; (e44 <system_clock_source_osc8m_set_config+0x34>)
     e14:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     e16:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     e18:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     e1a:	7840      	ldrb	r0, [r0, #1]
     e1c:	2201      	movs	r2, #1
     e1e:	4010      	ands	r0, r2
     e20:	0180      	lsls	r0, r0, #6
     e22:	2640      	movs	r6, #64	; 0x40
     e24:	43b3      	bics	r3, r6
     e26:	4303      	orrs	r3, r0
     e28:	402a      	ands	r2, r5
     e2a:	01d2      	lsls	r2, r2, #7
     e2c:	2080      	movs	r0, #128	; 0x80
     e2e:	4383      	bics	r3, r0
     e30:	4313      	orrs	r3, r2
     e32:	2203      	movs	r2, #3
     e34:	4022      	ands	r2, r4
     e36:	0212      	lsls	r2, r2, #8
     e38:	4803      	ldr	r0, [pc, #12]	; (e48 <system_clock_source_osc8m_set_config+0x38>)
     e3a:	4003      	ands	r3, r0
     e3c:	4313      	orrs	r3, r2
     e3e:	620b      	str	r3, [r1, #32]
}
     e40:	bd70      	pop	{r4, r5, r6, pc}
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	40000800 	.word	0x40000800
     e48:	fffffcff 	.word	0xfffffcff

00000e4c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     e4c:	2807      	cmp	r0, #7
     e4e:	d803      	bhi.n	e58 <system_clock_source_enable+0xc>
     e50:	0080      	lsls	r0, r0, #2
     e52:	4b1e      	ldr	r3, [pc, #120]	; (ecc <system_clock_source_enable+0x80>)
     e54:	581b      	ldr	r3, [r3, r0]
     e56:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     e58:	2017      	movs	r0, #23
     e5a:	e036      	b.n	eca <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     e5c:	4a1c      	ldr	r2, [pc, #112]	; (ed0 <system_clock_source_enable+0x84>)
     e5e:	6a13      	ldr	r3, [r2, #32]
     e60:	2102      	movs	r1, #2
     e62:	430b      	orrs	r3, r1
     e64:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     e66:	2000      	movs	r0, #0
     e68:	e02f      	b.n	eca <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     e6a:	4a19      	ldr	r2, [pc, #100]	; (ed0 <system_clock_source_enable+0x84>)
     e6c:	6993      	ldr	r3, [r2, #24]
     e6e:	2102      	movs	r1, #2
     e70:	430b      	orrs	r3, r1
     e72:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     e74:	2000      	movs	r0, #0
		break;
     e76:	e028      	b.n	eca <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     e78:	4a15      	ldr	r2, [pc, #84]	; (ed0 <system_clock_source_enable+0x84>)
     e7a:	8a13      	ldrh	r3, [r2, #16]
     e7c:	2102      	movs	r1, #2
     e7e:	430b      	orrs	r3, r1
     e80:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     e82:	2000      	movs	r0, #0
		break;
     e84:	e021      	b.n	eca <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     e86:	4a12      	ldr	r2, [pc, #72]	; (ed0 <system_clock_source_enable+0x84>)
     e88:	8a93      	ldrh	r3, [r2, #20]
     e8a:	2102      	movs	r1, #2
     e8c:	430b      	orrs	r3, r1
     e8e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     e90:	2000      	movs	r0, #0
		break;
     e92:	e01a      	b.n	eca <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     e94:	4b0f      	ldr	r3, [pc, #60]	; (ed4 <system_clock_source_enable+0x88>)
     e96:	681a      	ldr	r2, [r3, #0]
     e98:	2102      	movs	r1, #2
     e9a:	430a      	orrs	r2, r1
     e9c:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     e9e:	681b      	ldr	r3, [r3, #0]
     ea0:	4a0d      	ldr	r2, [pc, #52]	; (ed8 <system_clock_source_enable+0x8c>)
     ea2:	4013      	ands	r3, r2
     ea4:	4a0a      	ldr	r2, [pc, #40]	; (ed0 <system_clock_source_enable+0x84>)
     ea6:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     ea8:	0011      	movs	r1, r2
     eaa:	2210      	movs	r2, #16
     eac:	68cb      	ldr	r3, [r1, #12]
     eae:	421a      	tst	r2, r3
     eb0:	d0fc      	beq.n	eac <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     eb2:	4a08      	ldr	r2, [pc, #32]	; (ed4 <system_clock_source_enable+0x88>)
     eb4:	6891      	ldr	r1, [r2, #8]
     eb6:	4b06      	ldr	r3, [pc, #24]	; (ed0 <system_clock_source_enable+0x84>)
     eb8:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     eba:	6851      	ldr	r1, [r2, #4]
     ebc:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     ebe:	6812      	ldr	r2, [r2, #0]
     ec0:	b292      	uxth	r2, r2
     ec2:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
     ec4:	2000      	movs	r0, #0
     ec6:	e000      	b.n	eca <system_clock_source_enable+0x7e>
		return STATUS_OK;
     ec8:	2000      	movs	r0, #0
}
     eca:	4770      	bx	lr
     ecc:	000018a4 	.word	0x000018a4
     ed0:	40000800 	.word	0x40000800
     ed4:	20000050 	.word	0x20000050
     ed8:	0000ff7f 	.word	0x0000ff7f

00000edc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     edc:	b530      	push	{r4, r5, lr}
     ede:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     ee0:	22c2      	movs	r2, #194	; 0xc2
     ee2:	00d2      	lsls	r2, r2, #3
     ee4:	4b1a      	ldr	r3, [pc, #104]	; (f50 <system_clock_init+0x74>)
     ee6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     ee8:	4a1a      	ldr	r2, [pc, #104]	; (f54 <system_clock_init+0x78>)
     eea:	6853      	ldr	r3, [r2, #4]
     eec:	211e      	movs	r1, #30
     eee:	438b      	bics	r3, r1
     ef0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     ef2:	2301      	movs	r3, #1
     ef4:	466a      	mov	r2, sp
     ef6:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     ef8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     efa:	4d17      	ldr	r5, [pc, #92]	; (f58 <system_clock_init+0x7c>)
     efc:	b2e0      	uxtb	r0, r4
     efe:	4669      	mov	r1, sp
     f00:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     f02:	3401      	adds	r4, #1
     f04:	2c1c      	cmp	r4, #28
     f06:	d1f9      	bne.n	efc <system_clock_init+0x20>
	config->run_in_standby  = false;
     f08:	a803      	add	r0, sp, #12
     f0a:	2400      	movs	r4, #0
     f0c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     f0e:	2501      	movs	r5, #1
     f10:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     f12:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     f14:	4b11      	ldr	r3, [pc, #68]	; (f5c <system_clock_init+0x80>)
     f16:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     f18:	2006      	movs	r0, #6
     f1a:	4b11      	ldr	r3, [pc, #68]	; (f60 <system_clock_init+0x84>)
     f1c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     f1e:	4b11      	ldr	r3, [pc, #68]	; (f64 <system_clock_init+0x88>)
     f20:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     f22:	4b11      	ldr	r3, [pc, #68]	; (f68 <system_clock_init+0x8c>)
     f24:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     f26:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     f28:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     f2a:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
     f2c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     f2e:	466b      	mov	r3, sp
     f30:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     f32:	2306      	movs	r3, #6
     f34:	466a      	mov	r2, sp
     f36:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
     f38:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     f3a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     f3c:	4669      	mov	r1, sp
     f3e:	2000      	movs	r0, #0
     f40:	4b0a      	ldr	r3, [pc, #40]	; (f6c <system_clock_init+0x90>)
     f42:	4798      	blx	r3
     f44:	2000      	movs	r0, #0
     f46:	4b0a      	ldr	r3, [pc, #40]	; (f70 <system_clock_init+0x94>)
     f48:	4798      	blx	r3
#endif
}
     f4a:	b005      	add	sp, #20
     f4c:	bd30      	pop	{r4, r5, pc}
     f4e:	46c0      	nop			; (mov r8, r8)
     f50:	40000800 	.word	0x40000800
     f54:	41004000 	.word	0x41004000
     f58:	000011ad 	.word	0x000011ad
     f5c:	00000e11 	.word	0x00000e11
     f60:	00000e4d 	.word	0x00000e4d
     f64:	00000f75 	.word	0x00000f75
     f68:	40000400 	.word	0x40000400
     f6c:	00000f99 	.word	0x00000f99
     f70:	00001051 	.word	0x00001051

00000f74 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     f74:	4a06      	ldr	r2, [pc, #24]	; (f90 <system_gclk_init+0x1c>)
     f76:	6993      	ldr	r3, [r2, #24]
     f78:	2108      	movs	r1, #8
     f7a:	430b      	orrs	r3, r1
     f7c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     f7e:	2201      	movs	r2, #1
     f80:	4b04      	ldr	r3, [pc, #16]	; (f94 <system_gclk_init+0x20>)
     f82:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     f84:	0019      	movs	r1, r3
     f86:	780b      	ldrb	r3, [r1, #0]
     f88:	4213      	tst	r3, r2
     f8a:	d1fc      	bne.n	f86 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     f8c:	4770      	bx	lr
     f8e:	46c0      	nop			; (mov r8, r8)
     f90:	40000400 	.word	0x40000400
     f94:	40000c00 	.word	0x40000c00

00000f98 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     f98:	b570      	push	{r4, r5, r6, lr}
     f9a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     f9c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     f9e:	780d      	ldrb	r5, [r1, #0]
     fa0:	022d      	lsls	r5, r5, #8
     fa2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     fa4:	784b      	ldrb	r3, [r1, #1]
     fa6:	2b00      	cmp	r3, #0
     fa8:	d002      	beq.n	fb0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     faa:	2380      	movs	r3, #128	; 0x80
     fac:	02db      	lsls	r3, r3, #11
     fae:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     fb0:	7a4b      	ldrb	r3, [r1, #9]
     fb2:	2b00      	cmp	r3, #0
     fb4:	d002      	beq.n	fbc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     fb6:	2380      	movs	r3, #128	; 0x80
     fb8:	031b      	lsls	r3, r3, #12
     fba:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     fbc:	6848      	ldr	r0, [r1, #4]
     fbe:	2801      	cmp	r0, #1
     fc0:	d910      	bls.n	fe4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     fc2:	1e43      	subs	r3, r0, #1
     fc4:	4218      	tst	r0, r3
     fc6:	d134      	bne.n	1032 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     fc8:	2802      	cmp	r0, #2
     fca:	d930      	bls.n	102e <system_gclk_gen_set_config+0x96>
     fcc:	2302      	movs	r3, #2
     fce:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     fd0:	3201      	adds	r2, #1
						mask <<= 1) {
     fd2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     fd4:	4298      	cmp	r0, r3
     fd6:	d8fb      	bhi.n	fd0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     fd8:	0212      	lsls	r2, r2, #8
     fda:	4332      	orrs	r2, r6
     fdc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     fde:	2380      	movs	r3, #128	; 0x80
     fe0:	035b      	lsls	r3, r3, #13
     fe2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     fe4:	7a0b      	ldrb	r3, [r1, #8]
     fe6:	2b00      	cmp	r3, #0
     fe8:	d002      	beq.n	ff0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     fea:	2380      	movs	r3, #128	; 0x80
     fec:	039b      	lsls	r3, r3, #14
     fee:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ff0:	4a13      	ldr	r2, [pc, #76]	; (1040 <system_gclk_gen_set_config+0xa8>)
     ff2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     ff4:	b25b      	sxtb	r3, r3
     ff6:	2b00      	cmp	r3, #0
     ff8:	dbfb      	blt.n	ff2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
     ffa:	4b12      	ldr	r3, [pc, #72]	; (1044 <system_gclk_gen_set_config+0xac>)
     ffc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     ffe:	4b12      	ldr	r3, [pc, #72]	; (1048 <system_gclk_gen_set_config+0xb0>)
    1000:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1002:	4a0f      	ldr	r2, [pc, #60]	; (1040 <system_gclk_gen_set_config+0xa8>)
    1004:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1006:	b25b      	sxtb	r3, r3
    1008:	2b00      	cmp	r3, #0
    100a:	dbfb      	blt.n	1004 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    100c:	4b0c      	ldr	r3, [pc, #48]	; (1040 <system_gclk_gen_set_config+0xa8>)
    100e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1010:	001a      	movs	r2, r3
    1012:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1014:	b25b      	sxtb	r3, r3
    1016:	2b00      	cmp	r3, #0
    1018:	dbfb      	blt.n	1012 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    101a:	4a09      	ldr	r2, [pc, #36]	; (1040 <system_gclk_gen_set_config+0xa8>)
    101c:	6853      	ldr	r3, [r2, #4]
    101e:	2180      	movs	r1, #128	; 0x80
    1020:	0249      	lsls	r1, r1, #9
    1022:	400b      	ands	r3, r1
    1024:	431d      	orrs	r5, r3
    1026:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1028:	4b08      	ldr	r3, [pc, #32]	; (104c <system_gclk_gen_set_config+0xb4>)
    102a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    102c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    102e:	2200      	movs	r2, #0
    1030:	e7d2      	b.n	fd8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1032:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1034:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1036:	2380      	movs	r3, #128	; 0x80
    1038:	029b      	lsls	r3, r3, #10
    103a:	431d      	orrs	r5, r3
    103c:	e7d2      	b.n	fe4 <system_gclk_gen_set_config+0x4c>
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	40000c00 	.word	0x40000c00
    1044:	00000d25 	.word	0x00000d25
    1048:	40000c08 	.word	0x40000c08
    104c:	00000d65 	.word	0x00000d65

00001050 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1050:	b510      	push	{r4, lr}
    1052:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1054:	4a0b      	ldr	r2, [pc, #44]	; (1084 <system_gclk_gen_enable+0x34>)
    1056:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1058:	b25b      	sxtb	r3, r3
    105a:	2b00      	cmp	r3, #0
    105c:	dbfb      	blt.n	1056 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    105e:	4b0a      	ldr	r3, [pc, #40]	; (1088 <system_gclk_gen_enable+0x38>)
    1060:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1062:	4b0a      	ldr	r3, [pc, #40]	; (108c <system_gclk_gen_enable+0x3c>)
    1064:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1066:	4a07      	ldr	r2, [pc, #28]	; (1084 <system_gclk_gen_enable+0x34>)
    1068:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    106a:	b25b      	sxtb	r3, r3
    106c:	2b00      	cmp	r3, #0
    106e:	dbfb      	blt.n	1068 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1070:	4a04      	ldr	r2, [pc, #16]	; (1084 <system_gclk_gen_enable+0x34>)
    1072:	6851      	ldr	r1, [r2, #4]
    1074:	2380      	movs	r3, #128	; 0x80
    1076:	025b      	lsls	r3, r3, #9
    1078:	430b      	orrs	r3, r1
    107a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    107c:	4b04      	ldr	r3, [pc, #16]	; (1090 <system_gclk_gen_enable+0x40>)
    107e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1080:	bd10      	pop	{r4, pc}
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	40000c00 	.word	0x40000c00
    1088:	00000d25 	.word	0x00000d25
    108c:	40000c04 	.word	0x40000c04
    1090:	00000d65 	.word	0x00000d65

00001094 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1094:	b570      	push	{r4, r5, r6, lr}
    1096:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1098:	4a1a      	ldr	r2, [pc, #104]	; (1104 <system_gclk_gen_get_hz+0x70>)
    109a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    109c:	b25b      	sxtb	r3, r3
    109e:	2b00      	cmp	r3, #0
    10a0:	dbfb      	blt.n	109a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    10a2:	4b19      	ldr	r3, [pc, #100]	; (1108 <system_gclk_gen_get_hz+0x74>)
    10a4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    10a6:	4b19      	ldr	r3, [pc, #100]	; (110c <system_gclk_gen_get_hz+0x78>)
    10a8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10aa:	4a16      	ldr	r2, [pc, #88]	; (1104 <system_gclk_gen_get_hz+0x70>)
    10ac:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    10ae:	b25b      	sxtb	r3, r3
    10b0:	2b00      	cmp	r3, #0
    10b2:	dbfb      	blt.n	10ac <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    10b4:	4e13      	ldr	r6, [pc, #76]	; (1104 <system_gclk_gen_get_hz+0x70>)
    10b6:	6870      	ldr	r0, [r6, #4]
    10b8:	04c0      	lsls	r0, r0, #19
    10ba:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    10bc:	4b14      	ldr	r3, [pc, #80]	; (1110 <system_gclk_gen_get_hz+0x7c>)
    10be:	4798      	blx	r3
    10c0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    10c2:	4b12      	ldr	r3, [pc, #72]	; (110c <system_gclk_gen_get_hz+0x78>)
    10c4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    10c6:	6876      	ldr	r6, [r6, #4]
    10c8:	02f6      	lsls	r6, r6, #11
    10ca:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    10cc:	4b11      	ldr	r3, [pc, #68]	; (1114 <system_gclk_gen_get_hz+0x80>)
    10ce:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10d0:	4a0c      	ldr	r2, [pc, #48]	; (1104 <system_gclk_gen_get_hz+0x70>)
    10d2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    10d4:	b25b      	sxtb	r3, r3
    10d6:	2b00      	cmp	r3, #0
    10d8:	dbfb      	blt.n	10d2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    10da:	4b0a      	ldr	r3, [pc, #40]	; (1104 <system_gclk_gen_get_hz+0x70>)
    10dc:	689c      	ldr	r4, [r3, #8]
    10de:	0224      	lsls	r4, r4, #8
    10e0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    10e2:	4b0d      	ldr	r3, [pc, #52]	; (1118 <system_gclk_gen_get_hz+0x84>)
    10e4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    10e6:	2e00      	cmp	r6, #0
    10e8:	d107      	bne.n	10fa <system_gclk_gen_get_hz+0x66>
    10ea:	2c01      	cmp	r4, #1
    10ec:	d907      	bls.n	10fe <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    10ee:	0021      	movs	r1, r4
    10f0:	0028      	movs	r0, r5
    10f2:	4b0a      	ldr	r3, [pc, #40]	; (111c <system_gclk_gen_get_hz+0x88>)
    10f4:	4798      	blx	r3
    10f6:	0005      	movs	r5, r0
    10f8:	e001      	b.n	10fe <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    10fa:	3401      	adds	r4, #1
    10fc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    10fe:	0028      	movs	r0, r5
    1100:	bd70      	pop	{r4, r5, r6, pc}
    1102:	46c0      	nop			; (mov r8, r8)
    1104:	40000c00 	.word	0x40000c00
    1108:	00000d25 	.word	0x00000d25
    110c:	40000c04 	.word	0x40000c04
    1110:	00000d95 	.word	0x00000d95
    1114:	40000c08 	.word	0x40000c08
    1118:	00000d65 	.word	0x00000d65
    111c:	0000170d 	.word	0x0000170d

00001120 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1120:	b510      	push	{r4, lr}
    1122:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1124:	4b06      	ldr	r3, [pc, #24]	; (1140 <system_gclk_chan_enable+0x20>)
    1126:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1128:	4b06      	ldr	r3, [pc, #24]	; (1144 <system_gclk_chan_enable+0x24>)
    112a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    112c:	4a06      	ldr	r2, [pc, #24]	; (1148 <system_gclk_chan_enable+0x28>)
    112e:	8853      	ldrh	r3, [r2, #2]
    1130:	2180      	movs	r1, #128	; 0x80
    1132:	01c9      	lsls	r1, r1, #7
    1134:	430b      	orrs	r3, r1
    1136:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1138:	4b04      	ldr	r3, [pc, #16]	; (114c <system_gclk_chan_enable+0x2c>)
    113a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    113c:	bd10      	pop	{r4, pc}
    113e:	46c0      	nop			; (mov r8, r8)
    1140:	00000d25 	.word	0x00000d25
    1144:	40000c02 	.word	0x40000c02
    1148:	40000c00 	.word	0x40000c00
    114c:	00000d65 	.word	0x00000d65

00001150 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1150:	b510      	push	{r4, lr}
    1152:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1154:	4b0f      	ldr	r3, [pc, #60]	; (1194 <system_gclk_chan_disable+0x44>)
    1156:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1158:	4b0f      	ldr	r3, [pc, #60]	; (1198 <system_gclk_chan_disable+0x48>)
    115a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    115c:	4a0f      	ldr	r2, [pc, #60]	; (119c <system_gclk_chan_disable+0x4c>)
    115e:	8853      	ldrh	r3, [r2, #2]
    1160:	051b      	lsls	r3, r3, #20
    1162:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1164:	8853      	ldrh	r3, [r2, #2]
    1166:	490e      	ldr	r1, [pc, #56]	; (11a0 <system_gclk_chan_disable+0x50>)
    1168:	400b      	ands	r3, r1
    116a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    116c:	8853      	ldrh	r3, [r2, #2]
    116e:	490d      	ldr	r1, [pc, #52]	; (11a4 <system_gclk_chan_disable+0x54>)
    1170:	400b      	ands	r3, r1
    1172:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1174:	0011      	movs	r1, r2
    1176:	2280      	movs	r2, #128	; 0x80
    1178:	01d2      	lsls	r2, r2, #7
    117a:	884b      	ldrh	r3, [r1, #2]
    117c:	4213      	tst	r3, r2
    117e:	d1fc      	bne.n	117a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1180:	4906      	ldr	r1, [pc, #24]	; (119c <system_gclk_chan_disable+0x4c>)
    1182:	884a      	ldrh	r2, [r1, #2]
    1184:	0203      	lsls	r3, r0, #8
    1186:	4806      	ldr	r0, [pc, #24]	; (11a0 <system_gclk_chan_disable+0x50>)
    1188:	4002      	ands	r2, r0
    118a:	4313      	orrs	r3, r2
    118c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    118e:	4b06      	ldr	r3, [pc, #24]	; (11a8 <system_gclk_chan_disable+0x58>)
    1190:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1192:	bd10      	pop	{r4, pc}
    1194:	00000d25 	.word	0x00000d25
    1198:	40000c02 	.word	0x40000c02
    119c:	40000c00 	.word	0x40000c00
    11a0:	fffff0ff 	.word	0xfffff0ff
    11a4:	ffffbfff 	.word	0xffffbfff
    11a8:	00000d65 	.word	0x00000d65

000011ac <system_gclk_chan_set_config>:
{
    11ac:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    11ae:	780c      	ldrb	r4, [r1, #0]
    11b0:	0224      	lsls	r4, r4, #8
    11b2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    11b4:	4b02      	ldr	r3, [pc, #8]	; (11c0 <system_gclk_chan_set_config+0x14>)
    11b6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    11b8:	b2a4      	uxth	r4, r4
    11ba:	4b02      	ldr	r3, [pc, #8]	; (11c4 <system_gclk_chan_set_config+0x18>)
    11bc:	805c      	strh	r4, [r3, #2]
}
    11be:	bd10      	pop	{r4, pc}
    11c0:	00001151 	.word	0x00001151
    11c4:	40000c00 	.word	0x40000c00

000011c8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    11c8:	b510      	push	{r4, lr}
    11ca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    11cc:	4b06      	ldr	r3, [pc, #24]	; (11e8 <system_gclk_chan_get_hz+0x20>)
    11ce:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    11d0:	4b06      	ldr	r3, [pc, #24]	; (11ec <system_gclk_chan_get_hz+0x24>)
    11d2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    11d4:	4b06      	ldr	r3, [pc, #24]	; (11f0 <system_gclk_chan_get_hz+0x28>)
    11d6:	885c      	ldrh	r4, [r3, #2]
    11d8:	0524      	lsls	r4, r4, #20
    11da:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    11dc:	4b05      	ldr	r3, [pc, #20]	; (11f4 <system_gclk_chan_get_hz+0x2c>)
    11de:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    11e0:	0020      	movs	r0, r4
    11e2:	4b05      	ldr	r3, [pc, #20]	; (11f8 <system_gclk_chan_get_hz+0x30>)
    11e4:	4798      	blx	r3
}
    11e6:	bd10      	pop	{r4, pc}
    11e8:	00000d25 	.word	0x00000d25
    11ec:	40000c02 	.word	0x40000c02
    11f0:	40000c00 	.word	0x40000c00
    11f4:	00000d65 	.word	0x00000d65
    11f8:	00001095 	.word	0x00001095

000011fc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    11fc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    11fe:	78d3      	ldrb	r3, [r2, #3]
    1200:	2b00      	cmp	r3, #0
    1202:	d135      	bne.n	1270 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1204:	7813      	ldrb	r3, [r2, #0]
    1206:	2b80      	cmp	r3, #128	; 0x80
    1208:	d029      	beq.n	125e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    120a:	061b      	lsls	r3, r3, #24
    120c:	2480      	movs	r4, #128	; 0x80
    120e:	0264      	lsls	r4, r4, #9
    1210:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1212:	7854      	ldrb	r4, [r2, #1]
    1214:	2502      	movs	r5, #2
    1216:	43ac      	bics	r4, r5
    1218:	d106      	bne.n	1228 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    121a:	7894      	ldrb	r4, [r2, #2]
    121c:	2c00      	cmp	r4, #0
    121e:	d120      	bne.n	1262 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1220:	2480      	movs	r4, #128	; 0x80
    1222:	02a4      	lsls	r4, r4, #10
    1224:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1226:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1228:	7854      	ldrb	r4, [r2, #1]
    122a:	3c01      	subs	r4, #1
    122c:	2c01      	cmp	r4, #1
    122e:	d91c      	bls.n	126a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1230:	040d      	lsls	r5, r1, #16
    1232:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1234:	24a0      	movs	r4, #160	; 0xa0
    1236:	05e4      	lsls	r4, r4, #23
    1238:	432c      	orrs	r4, r5
    123a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    123c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    123e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1240:	24d0      	movs	r4, #208	; 0xd0
    1242:	0624      	lsls	r4, r4, #24
    1244:	432c      	orrs	r4, r5
    1246:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1248:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    124a:	78d4      	ldrb	r4, [r2, #3]
    124c:	2c00      	cmp	r4, #0
    124e:	d122      	bne.n	1296 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1250:	035b      	lsls	r3, r3, #13
    1252:	d51c      	bpl.n	128e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1254:	7893      	ldrb	r3, [r2, #2]
    1256:	2b01      	cmp	r3, #1
    1258:	d01e      	beq.n	1298 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    125a:	6141      	str	r1, [r0, #20]
    125c:	e017      	b.n	128e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    125e:	2300      	movs	r3, #0
    1260:	e7d7      	b.n	1212 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1262:	24c0      	movs	r4, #192	; 0xc0
    1264:	02e4      	lsls	r4, r4, #11
    1266:	4323      	orrs	r3, r4
    1268:	e7dd      	b.n	1226 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    126a:	4c0d      	ldr	r4, [pc, #52]	; (12a0 <_system_pinmux_config+0xa4>)
    126c:	4023      	ands	r3, r4
    126e:	e7df      	b.n	1230 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1270:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1272:	040c      	lsls	r4, r1, #16
    1274:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1276:	23a0      	movs	r3, #160	; 0xa0
    1278:	05db      	lsls	r3, r3, #23
    127a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    127c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    127e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1280:	23d0      	movs	r3, #208	; 0xd0
    1282:	061b      	lsls	r3, r3, #24
    1284:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1286:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1288:	78d3      	ldrb	r3, [r2, #3]
    128a:	2b00      	cmp	r3, #0
    128c:	d103      	bne.n	1296 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    128e:	7853      	ldrb	r3, [r2, #1]
    1290:	3b01      	subs	r3, #1
    1292:	2b01      	cmp	r3, #1
    1294:	d902      	bls.n	129c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1296:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1298:	6181      	str	r1, [r0, #24]
    129a:	e7f8      	b.n	128e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    129c:	6081      	str	r1, [r0, #8]
}
    129e:	e7fa      	b.n	1296 <_system_pinmux_config+0x9a>
    12a0:	fffbffff 	.word	0xfffbffff

000012a4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    12a4:	b510      	push	{r4, lr}
    12a6:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    12a8:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    12aa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    12ac:	2900      	cmp	r1, #0
    12ae:	d104      	bne.n	12ba <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    12b0:	0943      	lsrs	r3, r0, #5
    12b2:	01db      	lsls	r3, r3, #7
    12b4:	4905      	ldr	r1, [pc, #20]	; (12cc <system_pinmux_pin_set_config+0x28>)
    12b6:	468c      	mov	ip, r1
    12b8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    12ba:	241f      	movs	r4, #31
    12bc:	4020      	ands	r0, r4
    12be:	2101      	movs	r1, #1
    12c0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    12c2:	0018      	movs	r0, r3
    12c4:	4b02      	ldr	r3, [pc, #8]	; (12d0 <system_pinmux_pin_set_config+0x2c>)
    12c6:	4798      	blx	r3
}
    12c8:	bd10      	pop	{r4, pc}
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	41004400 	.word	0x41004400
    12d0:	000011fd 	.word	0x000011fd

000012d4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    12d4:	4770      	bx	lr
	...

000012d8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    12d8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    12da:	4b05      	ldr	r3, [pc, #20]	; (12f0 <system_init+0x18>)
    12dc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    12de:	4b05      	ldr	r3, [pc, #20]	; (12f4 <system_init+0x1c>)
    12e0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    12e2:	4b05      	ldr	r3, [pc, #20]	; (12f8 <system_init+0x20>)
    12e4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    12e6:	4b05      	ldr	r3, [pc, #20]	; (12fc <system_init+0x24>)
    12e8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    12ea:	4b05      	ldr	r3, [pc, #20]	; (1300 <system_init+0x28>)
    12ec:	4798      	blx	r3
}
    12ee:	bd10      	pop	{r4, pc}
    12f0:	00000edd 	.word	0x00000edd
    12f4:	00000ccd 	.word	0x00000ccd
    12f8:	000012d5 	.word	0x000012d5
    12fc:	00000ac5 	.word	0x00000ac5
    1300:	000012d5 	.word	0x000012d5

00001304 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1304:	e7fe      	b.n	1304 <Dummy_Handler>
	...

00001308 <Reset_Handler>:
{
    1308:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    130a:	4a1a      	ldr	r2, [pc, #104]	; (1374 <Reset_Handler+0x6c>)
    130c:	4b1a      	ldr	r3, [pc, #104]	; (1378 <Reset_Handler+0x70>)
    130e:	429a      	cmp	r2, r3
    1310:	d011      	beq.n	1336 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1312:	001a      	movs	r2, r3
    1314:	4b19      	ldr	r3, [pc, #100]	; (137c <Reset_Handler+0x74>)
    1316:	429a      	cmp	r2, r3
    1318:	d20d      	bcs.n	1336 <Reset_Handler+0x2e>
    131a:	4a19      	ldr	r2, [pc, #100]	; (1380 <Reset_Handler+0x78>)
    131c:	3303      	adds	r3, #3
    131e:	1a9b      	subs	r3, r3, r2
    1320:	089b      	lsrs	r3, r3, #2
    1322:	3301      	adds	r3, #1
    1324:	009b      	lsls	r3, r3, #2
    1326:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1328:	4813      	ldr	r0, [pc, #76]	; (1378 <Reset_Handler+0x70>)
    132a:	4912      	ldr	r1, [pc, #72]	; (1374 <Reset_Handler+0x6c>)
    132c:	588c      	ldr	r4, [r1, r2]
    132e:	5084      	str	r4, [r0, r2]
    1330:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1332:	429a      	cmp	r2, r3
    1334:	d1fa      	bne.n	132c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1336:	4a13      	ldr	r2, [pc, #76]	; (1384 <Reset_Handler+0x7c>)
    1338:	4b13      	ldr	r3, [pc, #76]	; (1388 <Reset_Handler+0x80>)
    133a:	429a      	cmp	r2, r3
    133c:	d20a      	bcs.n	1354 <Reset_Handler+0x4c>
    133e:	43d3      	mvns	r3, r2
    1340:	4911      	ldr	r1, [pc, #68]	; (1388 <Reset_Handler+0x80>)
    1342:	185b      	adds	r3, r3, r1
    1344:	2103      	movs	r1, #3
    1346:	438b      	bics	r3, r1
    1348:	3304      	adds	r3, #4
    134a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    134c:	2100      	movs	r1, #0
    134e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1350:	4293      	cmp	r3, r2
    1352:	d1fc      	bne.n	134e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1354:	4a0d      	ldr	r2, [pc, #52]	; (138c <Reset_Handler+0x84>)
    1356:	21ff      	movs	r1, #255	; 0xff
    1358:	4b0d      	ldr	r3, [pc, #52]	; (1390 <Reset_Handler+0x88>)
    135a:	438b      	bics	r3, r1
    135c:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    135e:	4a0d      	ldr	r2, [pc, #52]	; (1394 <Reset_Handler+0x8c>)
    1360:	6853      	ldr	r3, [r2, #4]
    1362:	397f      	subs	r1, #127	; 0x7f
    1364:	430b      	orrs	r3, r1
    1366:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1368:	4b0b      	ldr	r3, [pc, #44]	; (1398 <Reset_Handler+0x90>)
    136a:	4798      	blx	r3
        main();
    136c:	4b0b      	ldr	r3, [pc, #44]	; (139c <Reset_Handler+0x94>)
    136e:	4798      	blx	r3
    1370:	e7fe      	b.n	1370 <Reset_Handler+0x68>
    1372:	46c0      	nop			; (mov r8, r8)
    1374:	000018e4 	.word	0x000018e4
    1378:	20000000 	.word	0x20000000
    137c:	2000000c 	.word	0x2000000c
    1380:	20000004 	.word	0x20000004
    1384:	2000000c 	.word	0x2000000c
    1388:	20000248 	.word	0x20000248
    138c:	e000ed00 	.word	0xe000ed00
    1390:	00000000 	.word	0x00000000
    1394:	41004000 	.word	0x41004000
    1398:	00001825 	.word	0x00001825
    139c:	000015e9 	.word	0x000015e9

000013a0 <extint_detection_callback>:
 *
 * @note				- 
 ******************************************************************************************************/
#ifdef XPLAINED_PRO
void extint_detection_callback(void)
{
    13a0:	b510      	push	{r4, lr}
	delay_ms(10);
    13a2:	200a      	movs	r0, #10
    13a4:	4b0b      	ldr	r3, [pc, #44]	; (13d4 <extint_detection_callback+0x34>)
    13a6:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    13a8:	4b0b      	ldr	r3, [pc, #44]	; (13d8 <extint_detection_callback+0x38>)
    13aa:	6a1b      	ldr	r3, [r3, #32]
	if (level) {
    13ac:	041b      	lsls	r3, r3, #16
    13ae:	d40c      	bmi.n	13ca <extint_detection_callback+0x2a>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    13b0:	2280      	movs	r2, #128	; 0x80
    13b2:	01d2      	lsls	r2, r2, #7
    13b4:	4b08      	ldr	r3, [pc, #32]	; (13d8 <extint_detection_callback+0x38>)
    13b6:	615a      	str	r2, [r3, #20]
	
	//i2c_slWriteA(I2C_SLAVE_ADDRESS, (uint8_t *)&wr_cmds, sizeof(wr_cmds));				//i2c_read_request_callback
	//wr_cmds.cmdID = 0xAA;
	//i2c_slReadA(I2C_SLAVE_ADDRESS, (uint8_t *)&rx_cmds, sizeof(rx_cmds));				//i2c_write_request_callback
	
	i2c_slWriteA(I2C_SLAVE_ADDRESS, (uint8_t *)&wr_cmds, sizeof(wr_cmds));				//i2c_read_request_callback
    13b8:	4c08      	ldr	r4, [pc, #32]	; (13dc <extint_detection_callback+0x3c>)
    13ba:	2208      	movs	r2, #8
    13bc:	0021      	movs	r1, r4
    13be:	2018      	movs	r0, #24
    13c0:	4b07      	ldr	r3, [pc, #28]	; (13e0 <extint_detection_callback+0x40>)
    13c2:	4798      	blx	r3
	wr_cmds.cmdID = 0xFF;		
    13c4:	23ff      	movs	r3, #255	; 0xff
    13c6:	7123      	strb	r3, [r4, #4]
 }
    13c8:	bd10      	pop	{r4, pc}
		port_base->OUTSET.reg = pin_mask;
    13ca:	2280      	movs	r2, #128	; 0x80
    13cc:	01d2      	lsls	r2, r2, #7
    13ce:	4b02      	ldr	r3, [pc, #8]	; (13d8 <extint_detection_callback+0x38>)
    13d0:	619a      	str	r2, [r3, #24]
    13d2:	e7f1      	b.n	13b8 <extint_detection_callback+0x18>
    13d4:	00000a81 	.word	0x00000a81
    13d8:	41004400 	.word	0x41004400
    13dc:	20000240 	.word	0x20000240
    13e0:	000009d1 	.word	0x000009d1

000013e4 <extint_detection_callback_estop>:
 * @return				- void
 *
 * @note				- Interrupt Handler - code executed when interrupt occurs
 **********************************************************************/
void extint_detection_callback_estop(void)
{
    13e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (port_base->IN.reg & pin_mask);
    13e6:	4b0e      	ldr	r3, [pc, #56]	; (1420 <extint_detection_callback_estop+0x3c>)
    13e8:	6a1a      	ldr	r2, [r3, #32]
		port_base->OUTSET.reg = pin_mask;
    13ea:	2280      	movs	r2, #128	; 0x80
    13ec:	0212      	lsls	r2, r2, #8
    13ee:	619a      	str	r2, [r3, #24]
	button_pin_state = !button_pin_state;

	port_pin_set_output_level(LED_STOP_RED_PIN, TRUE);

	// ToDo: Send Emergency Stop 
	wr_cmds.cmdID = ESTP;
    13f0:	490c      	ldr	r1, [pc, #48]	; (1424 <extint_detection_callback_estop+0x40>)
    13f2:	23ff      	movs	r3, #255	; 0xff
    13f4:	710b      	strb	r3, [r1, #4]
	wr_cmds.encLocMoveTo = posSTOP;
    13f6:	4b0c      	ldr	r3, [pc, #48]	; (1428 <extint_detection_callback_estop+0x44>)
    13f8:	600b      	str	r3, [r1, #0]
	i2c_slWriteA(I2C_SLAVE_ADDRESS, (uint8_t *)&wr_cmds, sizeof(wr_cmds));				//i2c_read_request_callback
    13fa:	2208      	movs	r2, #8
    13fc:	2018      	movs	r0, #24
    13fe:	4b0b      	ldr	r3, [pc, #44]	; (142c <extint_detection_callback_estop+0x48>)
    1400:	4798      	blx	r3
    1402:	240a      	movs	r4, #10
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1404:	4f06      	ldr	r7, [pc, #24]	; (1420 <extint_detection_callback_estop+0x3c>)
    1406:	2680      	movs	r6, #128	; 0x80
    1408:	0236      	lsls	r6, r6, #8

	while( i > 0 )
	{
		//ESTOP is full stop shutdown for now
		port_pin_toggle_output_level(LED_STOP_RED_PIN);
		delay_ms(100);
    140a:	4d09      	ldr	r5, [pc, #36]	; (1430 <extint_detection_callback_estop+0x4c>)
    140c:	61fe      	str	r6, [r7, #28]
    140e:	2064      	movs	r0, #100	; 0x64
    1410:	47a8      	blx	r5
    1412:	3c01      	subs	r4, #1
	while( i > 0 )
    1414:	2c00      	cmp	r4, #0
    1416:	d1f9      	bne.n	140c <extint_detection_callback_estop+0x28>
		i--;
	}
	clear_wrCMDS();
    1418:	4b06      	ldr	r3, [pc, #24]	; (1434 <extint_detection_callback_estop+0x50>)
    141a:	4798      	blx	r3
}
    141c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    141e:	46c0      	nop			; (mov r8, r8)
    1420:	41004480 	.word	0x41004480
    1424:	20000240 	.word	0x20000240
    1428:	decea5ed 	.word	0xdecea5ed
    142c:	000009d1 	.word	0x000009d1
    1430:	00000a81 	.word	0x00000a81
    1434:	000015d9 	.word	0x000015d9

00001438 <configure_extint_channel>:
{
    1438:	b510      	push	{r4, lr}
    143a:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
    143c:	ac01      	add	r4, sp, #4
    143e:	0020      	movs	r0, r4
    1440:	4b07      	ldr	r3, [pc, #28]	; (1460 <configure_extint_channel+0x28>)
    1442:	4798      	blx	r3
	config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
    1444:	230f      	movs	r3, #15
    1446:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
    1448:	2300      	movs	r3, #0
    144a:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    144c:	3301      	adds	r3, #1
    144e:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    1450:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    1452:	0021      	movs	r1, r4
    1454:	200f      	movs	r0, #15
    1456:	4b03      	ldr	r3, [pc, #12]	; (1464 <configure_extint_channel+0x2c>)
    1458:	4798      	blx	r3
}
    145a:	b004      	add	sp, #16
    145c:	bd10      	pop	{r4, pc}
    145e:	46c0      	nop			; (mov r8, r8)
    1460:	00000b31 	.word	0x00000b31
    1464:	00000b45 	.word	0x00000b45

00001468 <configure_extint_EStop>:
{
    1468:	b510      	push	{r4, lr}
    146a:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_estop);
    146c:	ac01      	add	r4, sp, #4
    146e:	0020      	movs	r0, r4
    1470:	4b07      	ldr	r3, [pc, #28]	; (1490 <configure_extint_EStop+0x28>)
    1472:	4798      	blx	r3
	config_extint_estop.gpio_pin = BUTTON_ESTOP_PIN;
    1474:	2327      	movs	r3, #39	; 0x27
    1476:	9301      	str	r3, [sp, #4]
	config_extint_estop.gpio_pin_mux = BUTTON_ESTOP_EIC_MUX;
    1478:	2300      	movs	r3, #0
    147a:	6063      	str	r3, [r4, #4]
	config_extint_estop.gpio_pin_pull = EXTINT_PULL_UP;
    147c:	3301      	adds	r3, #1
    147e:	7223      	strb	r3, [r4, #8]
	config_extint_estop.detection_criteria = EXTINT_DETECT_FALLING;
    1480:	3301      	adds	r3, #1
    1482:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(BUTTON_ESTOP_EIC_LINE, &config_extint_estop);
    1484:	0021      	movs	r1, r4
    1486:	2007      	movs	r0, #7
    1488:	4b02      	ldr	r3, [pc, #8]	; (1494 <configure_extint_EStop+0x2c>)
    148a:	4798      	blx	r3
}
    148c:	b004      	add	sp, #16
    148e:	bd10      	pop	{r4, pc}
    1490:	00000b31 	.word	0x00000b31
    1494:	00000b45 	.word	0x00000b45

00001498 <configure_extint_callbacks>:
{
    1498:	b570      	push	{r4, r5, r6, lr}
		extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    149a:	2200      	movs	r2, #0
    149c:	210f      	movs	r1, #15
    149e:	4807      	ldr	r0, [pc, #28]	; (14bc <configure_extint_callbacks+0x24>)
    14a0:	4d07      	ldr	r5, [pc, #28]	; (14c0 <configure_extint_callbacks+0x28>)
    14a2:	47a8      	blx	r5
		extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    14a4:	2100      	movs	r1, #0
    14a6:	200f      	movs	r0, #15
    14a8:	4c06      	ldr	r4, [pc, #24]	; (14c4 <configure_extint_callbacks+0x2c>)
    14aa:	47a0      	blx	r4
	extint_register_callback(extint_detection_callback_estop, BUTTON_ESTOP_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    14ac:	2200      	movs	r2, #0
    14ae:	2107      	movs	r1, #7
    14b0:	4805      	ldr	r0, [pc, #20]	; (14c8 <configure_extint_callbacks+0x30>)
    14b2:	47a8      	blx	r5
	extint_chan_enable_callback(BUTTON_ESTOP_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    14b4:	2100      	movs	r1, #0
    14b6:	2007      	movs	r0, #7
    14b8:	47a0      	blx	r4
}
    14ba:	bd70      	pop	{r4, r5, r6, pc}
    14bc:	000013a1 	.word	0x000013a1
    14c0:	00000be1 	.word	0x00000be1
    14c4:	00000c0d 	.word	0x00000c0d
    14c8:	000013e5 	.word	0x000013e5

000014cc <SysTick_Handler>:
 * @note				- 
 ******************************************************************************************************/
void SysTick_Handler(void)
{
	// Your code goes here
}
    14cc:	4770      	bx	lr
	...

000014d0 <config_IO_Panel>:
 * @return				- void
 *
 * @note				- Initialization
 **********************************************************************/
 void config_IO_Panel(void)
 {
    14d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    14d2:	46c6      	mov	lr, r8
    14d4:	b500      	push	{lr}
    14d6:	b082      	sub	sp, #8
	config->powersave  = false;
    14d8:	ac01      	add	r4, sp, #4
    14da:	2300      	movs	r3, #0
    14dc:	4698      	mov	r8, r3
    14de:	70a3      	strb	r3, [r4, #2]
	 struct port_config pin_conf;
	 port_get_config_defaults(&pin_conf);

	 //TODO: LED CONFIG

	 pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    14e0:	2701      	movs	r7, #1
    14e2:	7027      	strb	r7, [r4, #0]
		 port_pin_set_config(LED_MCU_ORANGE, &pin_conf);
		 port_pin_set_output_level(LED_MCU_ORANGE, LED_INACTIVE);
	 #endif

	 pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	 pin_conf.input_pull = PORT_PIN_PULL_DOWN;
    14e4:	2302      	movs	r3, #2
    14e6:	7063      	strb	r3, [r4, #1]

	 port_pin_set_config(LED_PWR_GREEN_PIN, &pin_conf);					//yes works with PWR_G TP
    14e8:	0021      	movs	r1, r4
    14ea:	2014      	movs	r0, #20
    14ec:	4d14      	ldr	r5, [pc, #80]	; (1540 <config_IO_Panel+0x70>)
    14ee:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    14f0:	4e14      	ldr	r6, [pc, #80]	; (1544 <config_IO_Panel+0x74>)
    14f2:	2380      	movs	r3, #128	; 0x80
    14f4:	035b      	lsls	r3, r3, #13
    14f6:	61b3      	str	r3, [r6, #24]
		port_base->OUTCLR.reg = pin_mask;
    14f8:	6173      	str	r3, [r6, #20]
	 port_pin_set_output_level(LED_PWR_GREEN_PIN, TRUE );
	  port_pin_set_output_level(LED_PWR_GREEN_PIN, LED_INACTIVE);

	 port_pin_set_config(LED_PWR_RED_PIN, &pin_conf);
    14fa:	0021      	movs	r1, r4
    14fc:	2005      	movs	r0, #5
    14fe:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    1500:	2320      	movs	r3, #32
    1502:	61b3      	str	r3, [r6, #24]
		port_base->OUTCLR.reg = pin_mask;
    1504:	6173      	str	r3, [r6, #20]
	 port_pin_set_output_level(LED_PWR_RED_PIN, LED_ACTIVE);
	 port_pin_set_output_level(LED_PWR_RED_PIN, LED_INACTIVE);

	 port_pin_set_config(LED_MEAS_WHITE_PIN, &pin_conf);
    1506:	0021      	movs	r1, r4
    1508:	2015      	movs	r0, #21
    150a:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    150c:	2380      	movs	r3, #128	; 0x80
    150e:	039b      	lsls	r3, r3, #14
    1510:	61b3      	str	r3, [r6, #24]
		port_base->OUTCLR.reg = pin_mask;
    1512:	6173      	str	r3, [r6, #20]
	 port_pin_set_output_level(LED_MEAS_WHITE_PIN, LED_ACTIVE);
	 port_pin_set_output_level(LED_MEAS_WHITE_PIN, LED_INACTIVE);

	 port_pin_set_config(LED_STOP_RED_PIN, &pin_conf);
    1514:	0021      	movs	r1, r4
    1516:	202f      	movs	r0, #47	; 0x2f
    1518:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    151a:	4b0b      	ldr	r3, [pc, #44]	; (1548 <config_IO_Panel+0x78>)
    151c:	2280      	movs	r2, #128	; 0x80
    151e:	0212      	lsls	r2, r2, #8
    1520:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    1522:	615a      	str	r2, [r3, #20]
  	 port_pin_set_output_level(LED_STOP_RED_PIN, LED_ACTIVE);
	 port_pin_set_output_level(LED_STOP_RED_PIN, LED_INACTIVE);

	 pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1524:	4643      	mov	r3, r8
    1526:	7023      	strb	r3, [r4, #0]
	 pin_conf.input_pull = PORT_PIN_PULL_UP;
    1528:	7067      	strb	r7, [r4, #1]

	 port_pin_set_config(BUTTON_MEAS_PIN, &pin_conf);
    152a:	0021      	movs	r1, r4
    152c:	2026      	movs	r0, #38	; 0x26
    152e:	47a8      	blx	r5
	 port_pin_set_config(BUTTON_PWR_PIN, &pin_conf);
    1530:	0021      	movs	r1, r4
    1532:	2025      	movs	r0, #37	; 0x25
    1534:	47a8      	blx	r5

 }
    1536:	b002      	add	sp, #8
    1538:	bc04      	pop	{r2}
    153a:	4690      	mov	r8, r2
    153c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    153e:	46c0      	nop			; (mov r8, r8)
    1540:	00000bbd 	.word	0x00000bbd
    1544:	41004400 	.word	0x41004400
    1548:	41004480 	.word	0x41004480

0000154c <IOPanel_Powerup>:
 * @return				- void
 *+
 * @note				- 
 **********************************************************************/
void IOPanel_Powerup(void)
{
    154c:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    154e:	4b09      	ldr	r3, [pc, #36]	; (1574 <IOPanel_Powerup+0x28>)
    1550:	2220      	movs	r2, #32
    1552:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    1554:	2280      	movs	r2, #128	; 0x80
    1556:	0352      	lsls	r2, r2, #13
    1558:	615a      	str	r2, [r3, #20]
    155a:	2280      	movs	r2, #128	; 0x80
    155c:	0392      	lsls	r2, r2, #14
    155e:	615a      	str	r2, [r3, #20]
    1560:	2280      	movs	r2, #128	; 0x80
    1562:	0212      	lsls	r2, r2, #8
    1564:	4b04      	ldr	r3, [pc, #16]	; (1578 <IOPanel_Powerup+0x2c>)
    1566:	615a      	str	r2, [r3, #20]

	port_pin_set_output_level(LED_PWR_RED_PIN, LED_ACTIVE);
	port_pin_set_output_level(LED_PWR_GREEN_PIN, LED_INACTIVE);
	port_pin_set_output_level(LED_MEAS_WHITE_PIN, LED_INACTIVE);
	port_pin_set_output_level(LED_STOP_RED_PIN, LED_INACTIVE);
	delay_ms(500);
    1568:	20fa      	movs	r0, #250	; 0xfa
    156a:	0040      	lsls	r0, r0, #1
    156c:	4b03      	ldr	r3, [pc, #12]	; (157c <IOPanel_Powerup+0x30>)
    156e:	4798      	blx	r3
}
    1570:	bd10      	pop	{r4, pc}
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	41004400 	.word	0x41004400
    1578:	41004480 	.word	0x41004480
    157c:	00000a81 	.word	0x00000a81

00001580 <sys_config>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
void sys_config(void)
{
    1580:	b510      	push	{r4, lr}
	config_IO_Panel();
    1582:	4b0c      	ldr	r3, [pc, #48]	; (15b4 <sys_config+0x34>)
    1584:	4798      	blx	r3

 	configure_extint_channel();
    1586:	4b0c      	ldr	r3, [pc, #48]	; (15b8 <sys_config+0x38>)
    1588:	4798      	blx	r3
 	configure_extint_callbacks();
    158a:	4b0c      	ldr	r3, [pc, #48]	; (15bc <sys_config+0x3c>)
    158c:	4798      	blx	r3
 	
	//configure_extint_PWR();
	//configure_extint_Measure();
	configure_extint_EStop();
    158e:	4b0c      	ldr	r3, [pc, #48]	; (15c0 <sys_config+0x40>)
    1590:	4798      	blx	r3
	cpu_irq_enable();
    1592:	2201      	movs	r2, #1
    1594:	4b0b      	ldr	r3, [pc, #44]	; (15c4 <sys_config+0x44>)
    1596:	701a      	strb	r2, [r3, #0]
    1598:	f3bf 8f5f 	dmb	sy
    159c:	b662      	cpsie	i
	
	system_interrupt_enable_global();

	configure_i2c_master();
    159e:	4b0a      	ldr	r3, [pc, #40]	; (15c8 <sys_config+0x48>)
    15a0:	4798      	blx	r3
	
	IOPanel_Powerup();
    15a2:	4b0a      	ldr	r3, [pc, #40]	; (15cc <sys_config+0x4c>)
    15a4:	4798      	blx	r3

		wr_cmds.cmdID = 0xFF;
    15a6:	4b0a      	ldr	r3, [pc, #40]	; (15d0 <sys_config+0x50>)
    15a8:	22ff      	movs	r2, #255	; 0xff
    15aa:	711a      	strb	r2, [r3, #4]
		wr_cmds.encLocMoveTo = 0xA1A2A3A4;		// little endian
    15ac:	4a09      	ldr	r2, [pc, #36]	; (15d4 <sys_config+0x54>)
    15ae:	601a      	str	r2, [r3, #0]

    15b0:	bd10      	pop	{r4, pc}
    15b2:	46c0      	nop			; (mov r8, r8)
    15b4:	000014d1 	.word	0x000014d1
    15b8:	00001439 	.word	0x00001439
    15bc:	00001499 	.word	0x00001499
    15c0:	00001469 	.word	0x00001469
    15c4:	20000008 	.word	0x20000008
    15c8:	00000935 	.word	0x00000935
    15cc:	0000154d 	.word	0x0000154d
    15d0:	20000240 	.word	0x20000240
    15d4:	a1a2a3a4 	.word	0xa1a2a3a4

000015d8 <clear_wrCMDS>:

 }

 void clear_wrCMDS(void)
 {
	wr_cmds.cmdID = 0;
    15d8:	4b02      	ldr	r3, [pc, #8]	; (15e4 <clear_wrCMDS+0xc>)
    15da:	2200      	movs	r2, #0
    15dc:	711a      	strb	r2, [r3, #4]
	wr_cmds.encLocMoveTo = 0;
    15de:	601a      	str	r2, [r3, #0]

 }
    15e0:	4770      	bx	lr
    15e2:	46c0      	nop			; (mov r8, r8)
    15e4:	20000240 	.word	0x20000240

000015e8 <main>:
 * @note				- MCU specific definitions in (src->common2->boards) -> user_board.h, init routines in init.c
 *	                    - Peripheral config in Peripherals.c (src)
 *						- EXTINT will fire callback asynchronously. (Button0 press -> interrupt callback -> LED0 toggle)
 ******************************************************************************************************/
int main (void)
{
    15e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15ea:	46ce      	mov	lr, r9
    15ec:	4647      	mov	r7, r8
    15ee:	b580      	push	{r7, lr}
    15f0:	b083      	sub	sp, #12
	system_init();
    15f2:	4b3d      	ldr	r3, [pc, #244]	; (16e8 <main+0x100>)
    15f4:	4798      	blx	r3
	sys_config();
    15f6:	4b3d      	ldr	r3, [pc, #244]	; (16ec <main+0x104>)
    15f8:	4798      	blx	r3

	int debounce = 100;
	__vo bool lastPwrState = TRUE;
    15fa:	2201      	movs	r2, #1
    15fc:	466b      	mov	r3, sp
    15fe:	71da      	strb	r2, [r3, #7]
	bool pwrState = FALSE;
    1600:	2500      	movs	r5, #0
	return (port_base->IN.reg & pin_mask);
    1602:	4c3b      	ldr	r4, [pc, #236]	; (16f0 <main+0x108>)
	{
		/* Poll for other button presses - safer than interrupts since the Daughter Card really doesn't do anything else */

		/* Check if the Power button was pressed-and-held */
		lastPwrState = port_pin_get_input_level(BUTTON_PWR_PIN);	//FALSE = still pressed, TRUE = released
		delay_ms(debounce);
    1604:	4e3b      	ldr	r6, [pc, #236]	; (16f4 <main+0x10c>)

				port_pin_set_output_level(LED_PWR_RED_PIN, TRUE);
				port_pin_set_output_level(LED_PWR_GREEN_PIN, FALSE);

				//To Do: Send Go Home on Shutdown
				wr_cmds.cmdID = PWR_DWN;
    1606:	4f3c      	ldr	r7, [pc, #240]	; (16f8 <main+0x110>)
    1608:	e00a      	b.n	1620 <main+0x38>
    160a:	6a23      	ldr	r3, [r4, #32]
			if (port_pin_get_input_level(BUTTON_MEAS_PIN) == 0)
    160c:	065b      	lsls	r3, r3, #25
    160e:	d533      	bpl.n	1678 <main+0x90>
    1610:	6a23      	ldr	r3, [r4, #32]
			if (port_pin_get_input_level(BUTTON_PWR_PIN) == 0 && lastPwrState == TRUE)
    1612:	069b      	lsls	r3, r3, #26
    1614:	d404      	bmi.n	1620 <main+0x38>
    1616:	466b      	mov	r3, sp
    1618:	3307      	adds	r3, #7
    161a:	781b      	ldrb	r3, [r3, #0]
    161c:	2b00      	cmp	r3, #0
    161e:	d146      	bne.n	16ae <main+0xc6>
    1620:	6a23      	ldr	r3, [r4, #32]
    1622:	069b      	lsls	r3, r3, #26
    1624:	0fdb      	lsrs	r3, r3, #31
		lastPwrState = port_pin_get_input_level(BUTTON_PWR_PIN);	//FALSE = still pressed, TRUE = released
    1626:	466a      	mov	r2, sp
    1628:	71d3      	strb	r3, [r2, #7]
		delay_ms(debounce);
    162a:	2064      	movs	r0, #100	; 0x64
    162c:	47b0      	blx	r6
		if(pwrState == FALSE )
    162e:	2d00      	cmp	r5, #0
    1630:	d1eb      	bne.n	160a <main+0x22>
    1632:	6a23      	ldr	r3, [r4, #32]
			if (port_pin_get_input_level(BUTTON_PWR_PIN) == 0 && lastPwrState == TRUE)
    1634:	069b      	lsls	r3, r3, #26
    1636:	d4f3      	bmi.n	1620 <main+0x38>
    1638:	466b      	mov	r3, sp
    163a:	79dd      	ldrb	r5, [r3, #7]
    163c:	b2ed      	uxtb	r5, r5
    163e:	2d00      	cmp	r5, #0
    1640:	d0ee      	beq.n	1620 <main+0x38>
    1642:	4b2e      	ldr	r3, [pc, #184]	; (16fc <main+0x114>)
    1644:	6a22      	ldr	r2, [r4, #32]
		port_base->OUTCLR.reg = pin_mask;
    1646:	2220      	movs	r2, #32
    1648:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    164a:	2280      	movs	r2, #128	; 0x80
    164c:	0352      	lsls	r2, r2, #13
    164e:	619a      	str	r2, [r3, #24]
				wr_cmds.cmdID = PWR_UP;
    1650:	4929      	ldr	r1, [pc, #164]	; (16f8 <main+0x110>)
    1652:	23aa      	movs	r3, #170	; 0xaa
    1654:	710b      	strb	r3, [r1, #4]
				wr_cmds.encLocMoveTo = posHome;
    1656:	4b2a      	ldr	r3, [pc, #168]	; (1700 <main+0x118>)
    1658:	600b      	str	r3, [r1, #0]
				i2c_slWriteA(I2C_SLAVE_ADDRESS, (uint8_t *)&wr_cmds, sizeof(wr_cmds));				//i2c_read_request_callback
    165a:	2208      	movs	r2, #8
    165c:	2018      	movs	r0, #24
    165e:	4b29      	ldr	r3, [pc, #164]	; (1704 <main+0x11c>)
    1660:	4798      	blx	r3
				delay_ms(debounce);
    1662:	2064      	movs	r0, #100	; 0x64
    1664:	4b23      	ldr	r3, [pc, #140]	; (16f4 <main+0x10c>)
    1666:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    1668:	6a23      	ldr	r3, [r4, #32]
    166a:	069b      	lsls	r3, r3, #26
    166c:	0fdb      	lsrs	r3, r3, #31
				lastPwrState = port_pin_get_input_level(BUTTON_PWR_PIN);	//TRUE = still pressed, FALSE = released
    166e:	466a      	mov	r2, sp
    1670:	71d3      	strb	r3, [r2, #7]
				clear_wrCMDS();
    1672:	4b25      	ldr	r3, [pc, #148]	; (1708 <main+0x120>)
    1674:	4798      	blx	r3
    1676:	e7d3      	b.n	1620 <main+0x38>
    1678:	4b20      	ldr	r3, [pc, #128]	; (16fc <main+0x114>)
    167a:	4698      	mov	r8, r3
    167c:	6a23      	ldr	r3, [r4, #32]
		port_base->OUTSET.reg = pin_mask;
    167e:	2380      	movs	r3, #128	; 0x80
    1680:	039b      	lsls	r3, r3, #14
    1682:	4699      	mov	r9, r3
    1684:	4643      	mov	r3, r8
    1686:	464a      	mov	r2, r9
    1688:	619a      	str	r2, [r3, #24]
					wr_cmds.cmdID = PWR_DWN;
    168a:	491b      	ldr	r1, [pc, #108]	; (16f8 <main+0x110>)
    168c:	2366      	movs	r3, #102	; 0x66
    168e:	710b      	strb	r3, [r1, #4]
					wr_cmds.encLocMoveTo = posHome;
    1690:	4b1b      	ldr	r3, [pc, #108]	; (1700 <main+0x118>)
    1692:	600b      	str	r3, [r1, #0]
					i2c_slWriteA(I2C_SLAVE_ADDRESS, (uint8_t *)&wr_cmds, sizeof(wr_cmds));				//i2c_read_request_callback
    1694:	2208      	movs	r2, #8
    1696:	2018      	movs	r0, #24
    1698:	4b1a      	ldr	r3, [pc, #104]	; (1704 <main+0x11c>)
    169a:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    169c:	4643      	mov	r3, r8
    169e:	464a      	mov	r2, r9
    16a0:	615a      	str	r2, [r3, #20]
					delay_ms(debounce);
    16a2:	2064      	movs	r0, #100	; 0x64
    16a4:	4b13      	ldr	r3, [pc, #76]	; (16f4 <main+0x10c>)
    16a6:	4798      	blx	r3
					clear_wrCMDS();
    16a8:	4b17      	ldr	r3, [pc, #92]	; (1708 <main+0x120>)
    16aa:	4798      	blx	r3
    16ac:	e7b0      	b.n	1610 <main+0x28>
	return (port_base->IN.reg & pin_mask);
    16ae:	4b13      	ldr	r3, [pc, #76]	; (16fc <main+0x114>)
    16b0:	6a22      	ldr	r2, [r4, #32]
		port_base->OUTSET.reg = pin_mask;
    16b2:	2220      	movs	r2, #32
    16b4:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    16b6:	2280      	movs	r2, #128	; 0x80
    16b8:	0352      	lsls	r2, r2, #13
    16ba:	615a      	str	r2, [r3, #20]
				wr_cmds.cmdID = PWR_DWN;
    16bc:	2366      	movs	r3, #102	; 0x66
    16be:	713b      	strb	r3, [r7, #4]
				wr_cmds.encLocMoveTo = posHome;
    16c0:	4b0f      	ldr	r3, [pc, #60]	; (1700 <main+0x118>)
    16c2:	603b      	str	r3, [r7, #0]
				i2c_slWriteA(I2C_SLAVE_ADDRESS, (uint8_t *)&wr_cmds, sizeof(wr_cmds));				//i2c_read_request_callback
    16c4:	2208      	movs	r2, #8
    16c6:	0039      	movs	r1, r7
    16c8:	2018      	movs	r0, #24
    16ca:	4b0e      	ldr	r3, [pc, #56]	; (1704 <main+0x11c>)
    16cc:	4798      	blx	r3
				
				pwrState = FALSE;

				delay_ms(debounce);
    16ce:	2064      	movs	r0, #100	; 0x64
    16d0:	4b08      	ldr	r3, [pc, #32]	; (16f4 <main+0x10c>)
    16d2:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    16d4:	6a23      	ldr	r3, [r4, #32]
    16d6:	069b      	lsls	r3, r3, #26
    16d8:	0fdb      	lsrs	r3, r3, #31

				lastPwrState = port_pin_get_input_level(BUTTON_PWR_PIN);	//FALSE = still pressed, TRUE = released
    16da:	466a      	mov	r2, sp
    16dc:	71d3      	strb	r3, [r2, #7]
				clear_wrCMDS();
    16de:	4b0a      	ldr	r3, [pc, #40]	; (1708 <main+0x120>)
    16e0:	4798      	blx	r3
				pwrState = FALSE;
    16e2:	2500      	movs	r5, #0
    16e4:	e79c      	b.n	1620 <main+0x38>
    16e6:	46c0      	nop			; (mov r8, r8)
    16e8:	000012d9 	.word	0x000012d9
    16ec:	00001581 	.word	0x00001581
    16f0:	41004480 	.word	0x41004480
    16f4:	00000a81 	.word	0x00000a81
    16f8:	20000240 	.word	0x20000240
    16fc:	41004400 	.word	0x41004400
    1700:	acce55ed 	.word	0xacce55ed
    1704:	000009d1 	.word	0x000009d1
    1708:	000015d9 	.word	0x000015d9

0000170c <__udivsi3>:
    170c:	2200      	movs	r2, #0
    170e:	0843      	lsrs	r3, r0, #1
    1710:	428b      	cmp	r3, r1
    1712:	d374      	bcc.n	17fe <__udivsi3+0xf2>
    1714:	0903      	lsrs	r3, r0, #4
    1716:	428b      	cmp	r3, r1
    1718:	d35f      	bcc.n	17da <__udivsi3+0xce>
    171a:	0a03      	lsrs	r3, r0, #8
    171c:	428b      	cmp	r3, r1
    171e:	d344      	bcc.n	17aa <__udivsi3+0x9e>
    1720:	0b03      	lsrs	r3, r0, #12
    1722:	428b      	cmp	r3, r1
    1724:	d328      	bcc.n	1778 <__udivsi3+0x6c>
    1726:	0c03      	lsrs	r3, r0, #16
    1728:	428b      	cmp	r3, r1
    172a:	d30d      	bcc.n	1748 <__udivsi3+0x3c>
    172c:	22ff      	movs	r2, #255	; 0xff
    172e:	0209      	lsls	r1, r1, #8
    1730:	ba12      	rev	r2, r2
    1732:	0c03      	lsrs	r3, r0, #16
    1734:	428b      	cmp	r3, r1
    1736:	d302      	bcc.n	173e <__udivsi3+0x32>
    1738:	1212      	asrs	r2, r2, #8
    173a:	0209      	lsls	r1, r1, #8
    173c:	d065      	beq.n	180a <__udivsi3+0xfe>
    173e:	0b03      	lsrs	r3, r0, #12
    1740:	428b      	cmp	r3, r1
    1742:	d319      	bcc.n	1778 <__udivsi3+0x6c>
    1744:	e000      	b.n	1748 <__udivsi3+0x3c>
    1746:	0a09      	lsrs	r1, r1, #8
    1748:	0bc3      	lsrs	r3, r0, #15
    174a:	428b      	cmp	r3, r1
    174c:	d301      	bcc.n	1752 <__udivsi3+0x46>
    174e:	03cb      	lsls	r3, r1, #15
    1750:	1ac0      	subs	r0, r0, r3
    1752:	4152      	adcs	r2, r2
    1754:	0b83      	lsrs	r3, r0, #14
    1756:	428b      	cmp	r3, r1
    1758:	d301      	bcc.n	175e <__udivsi3+0x52>
    175a:	038b      	lsls	r3, r1, #14
    175c:	1ac0      	subs	r0, r0, r3
    175e:	4152      	adcs	r2, r2
    1760:	0b43      	lsrs	r3, r0, #13
    1762:	428b      	cmp	r3, r1
    1764:	d301      	bcc.n	176a <__udivsi3+0x5e>
    1766:	034b      	lsls	r3, r1, #13
    1768:	1ac0      	subs	r0, r0, r3
    176a:	4152      	adcs	r2, r2
    176c:	0b03      	lsrs	r3, r0, #12
    176e:	428b      	cmp	r3, r1
    1770:	d301      	bcc.n	1776 <__udivsi3+0x6a>
    1772:	030b      	lsls	r3, r1, #12
    1774:	1ac0      	subs	r0, r0, r3
    1776:	4152      	adcs	r2, r2
    1778:	0ac3      	lsrs	r3, r0, #11
    177a:	428b      	cmp	r3, r1
    177c:	d301      	bcc.n	1782 <__udivsi3+0x76>
    177e:	02cb      	lsls	r3, r1, #11
    1780:	1ac0      	subs	r0, r0, r3
    1782:	4152      	adcs	r2, r2
    1784:	0a83      	lsrs	r3, r0, #10
    1786:	428b      	cmp	r3, r1
    1788:	d301      	bcc.n	178e <__udivsi3+0x82>
    178a:	028b      	lsls	r3, r1, #10
    178c:	1ac0      	subs	r0, r0, r3
    178e:	4152      	adcs	r2, r2
    1790:	0a43      	lsrs	r3, r0, #9
    1792:	428b      	cmp	r3, r1
    1794:	d301      	bcc.n	179a <__udivsi3+0x8e>
    1796:	024b      	lsls	r3, r1, #9
    1798:	1ac0      	subs	r0, r0, r3
    179a:	4152      	adcs	r2, r2
    179c:	0a03      	lsrs	r3, r0, #8
    179e:	428b      	cmp	r3, r1
    17a0:	d301      	bcc.n	17a6 <__udivsi3+0x9a>
    17a2:	020b      	lsls	r3, r1, #8
    17a4:	1ac0      	subs	r0, r0, r3
    17a6:	4152      	adcs	r2, r2
    17a8:	d2cd      	bcs.n	1746 <__udivsi3+0x3a>
    17aa:	09c3      	lsrs	r3, r0, #7
    17ac:	428b      	cmp	r3, r1
    17ae:	d301      	bcc.n	17b4 <__udivsi3+0xa8>
    17b0:	01cb      	lsls	r3, r1, #7
    17b2:	1ac0      	subs	r0, r0, r3
    17b4:	4152      	adcs	r2, r2
    17b6:	0983      	lsrs	r3, r0, #6
    17b8:	428b      	cmp	r3, r1
    17ba:	d301      	bcc.n	17c0 <__udivsi3+0xb4>
    17bc:	018b      	lsls	r3, r1, #6
    17be:	1ac0      	subs	r0, r0, r3
    17c0:	4152      	adcs	r2, r2
    17c2:	0943      	lsrs	r3, r0, #5
    17c4:	428b      	cmp	r3, r1
    17c6:	d301      	bcc.n	17cc <__udivsi3+0xc0>
    17c8:	014b      	lsls	r3, r1, #5
    17ca:	1ac0      	subs	r0, r0, r3
    17cc:	4152      	adcs	r2, r2
    17ce:	0903      	lsrs	r3, r0, #4
    17d0:	428b      	cmp	r3, r1
    17d2:	d301      	bcc.n	17d8 <__udivsi3+0xcc>
    17d4:	010b      	lsls	r3, r1, #4
    17d6:	1ac0      	subs	r0, r0, r3
    17d8:	4152      	adcs	r2, r2
    17da:	08c3      	lsrs	r3, r0, #3
    17dc:	428b      	cmp	r3, r1
    17de:	d301      	bcc.n	17e4 <__udivsi3+0xd8>
    17e0:	00cb      	lsls	r3, r1, #3
    17e2:	1ac0      	subs	r0, r0, r3
    17e4:	4152      	adcs	r2, r2
    17e6:	0883      	lsrs	r3, r0, #2
    17e8:	428b      	cmp	r3, r1
    17ea:	d301      	bcc.n	17f0 <__udivsi3+0xe4>
    17ec:	008b      	lsls	r3, r1, #2
    17ee:	1ac0      	subs	r0, r0, r3
    17f0:	4152      	adcs	r2, r2
    17f2:	0843      	lsrs	r3, r0, #1
    17f4:	428b      	cmp	r3, r1
    17f6:	d301      	bcc.n	17fc <__udivsi3+0xf0>
    17f8:	004b      	lsls	r3, r1, #1
    17fa:	1ac0      	subs	r0, r0, r3
    17fc:	4152      	adcs	r2, r2
    17fe:	1a41      	subs	r1, r0, r1
    1800:	d200      	bcs.n	1804 <__udivsi3+0xf8>
    1802:	4601      	mov	r1, r0
    1804:	4152      	adcs	r2, r2
    1806:	4610      	mov	r0, r2
    1808:	4770      	bx	lr
    180a:	e7ff      	b.n	180c <__udivsi3+0x100>
    180c:	b501      	push	{r0, lr}
    180e:	2000      	movs	r0, #0
    1810:	f000 f806 	bl	1820 <__aeabi_idiv0>
    1814:	bd02      	pop	{r1, pc}
    1816:	46c0      	nop			; (mov r8, r8)

00001818 <__aeabi_uidivmod>:
    1818:	2900      	cmp	r1, #0
    181a:	d0f7      	beq.n	180c <__udivsi3+0x100>
    181c:	e776      	b.n	170c <__udivsi3>
    181e:	4770      	bx	lr

00001820 <__aeabi_idiv0>:
    1820:	4770      	bx	lr
    1822:	46c0      	nop			; (mov r8, r8)

00001824 <__libc_init_array>:
    1824:	b570      	push	{r4, r5, r6, lr}
    1826:	2600      	movs	r6, #0
    1828:	4d0c      	ldr	r5, [pc, #48]	; (185c <__libc_init_array+0x38>)
    182a:	4c0d      	ldr	r4, [pc, #52]	; (1860 <__libc_init_array+0x3c>)
    182c:	1b64      	subs	r4, r4, r5
    182e:	10a4      	asrs	r4, r4, #2
    1830:	42a6      	cmp	r6, r4
    1832:	d109      	bne.n	1848 <__libc_init_array+0x24>
    1834:	2600      	movs	r6, #0
    1836:	f000 f845 	bl	18c4 <_init>
    183a:	4d0a      	ldr	r5, [pc, #40]	; (1864 <__libc_init_array+0x40>)
    183c:	4c0a      	ldr	r4, [pc, #40]	; (1868 <__libc_init_array+0x44>)
    183e:	1b64      	subs	r4, r4, r5
    1840:	10a4      	asrs	r4, r4, #2
    1842:	42a6      	cmp	r6, r4
    1844:	d105      	bne.n	1852 <__libc_init_array+0x2e>
    1846:	bd70      	pop	{r4, r5, r6, pc}
    1848:	00b3      	lsls	r3, r6, #2
    184a:	58eb      	ldr	r3, [r5, r3]
    184c:	4798      	blx	r3
    184e:	3601      	adds	r6, #1
    1850:	e7ee      	b.n	1830 <__libc_init_array+0xc>
    1852:	00b3      	lsls	r3, r6, #2
    1854:	58eb      	ldr	r3, [r5, r3]
    1856:	4798      	blx	r3
    1858:	3601      	adds	r6, #1
    185a:	e7f2      	b.n	1842 <__libc_init_array+0x1e>
    185c:	000018d0 	.word	0x000018d0
    1860:	000018d0 	.word	0x000018d0
    1864:	000018d0 	.word	0x000018d0
    1868:	000018d4 	.word	0x000018d4
    186c:	42000800 	.word	0x42000800
    1870:	42000c00 	.word	0x42000c00
    1874:	42001000 	.word	0x42001000
    1878:	42001400 	.word	0x42001400
    187c:	42001800 	.word	0x42001800
    1880:	42001c00 	.word	0x42001c00
    1884:	00000da6 	.word	0x00000da6
    1888:	00000da2 	.word	0x00000da2
    188c:	00000da2 	.word	0x00000da2
    1890:	00000df2 	.word	0x00000df2
    1894:	00000df2 	.word	0x00000df2
    1898:	00000dba 	.word	0x00000dba
    189c:	00000dac 	.word	0x00000dac
    18a0:	00000dc0 	.word	0x00000dc0
    18a4:	00000e78 	.word	0x00000e78
    18a8:	00000e58 	.word	0x00000e58
    18ac:	00000e58 	.word	0x00000e58
    18b0:	00000ec8 	.word	0x00000ec8
    18b4:	00000e6a 	.word	0x00000e6a
    18b8:	00000e86 	.word	0x00000e86
    18bc:	00000e5c 	.word	0x00000e5c
    18c0:	00000e94 	.word	0x00000e94

000018c4 <_init>:
    18c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    18ca:	bc08      	pop	{r3}
    18cc:	469e      	mov	lr, r3
    18ce:	4770      	bx	lr

000018d0 <__init_array_start>:
    18d0:	000000cd 	.word	0x000000cd

000018d4 <_fini>:
    18d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18d6:	46c0      	nop			; (mov r8, r8)
    18d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    18da:	bc08      	pop	{r3}
    18dc:	469e      	mov	lr, r3
    18de:	4770      	bx	lr

000018e0 <__fini_array_start>:
    18e0:	000000a5 	.word	0x000000a5
