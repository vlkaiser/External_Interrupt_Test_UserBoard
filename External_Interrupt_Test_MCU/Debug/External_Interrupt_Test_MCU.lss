
External_Interrupt_Test_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d18  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00000d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007c  2000000c  00000d24  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000088  00000da0  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00012753  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002725  00000000  00000000  000327e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000022d7  00000000  00000000  00034f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000318  00000000  00000000  000371dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000330  00000000  00000000  000374f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00011f02  00000000  00000000  00037824  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008265  00000000  00000000  00049726  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005e2ce  00000000  00000000  0005198b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000006ac  00000000  00000000  000afc5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	88 20 00 20 61 09 00 00 5d 09 00 00 5d 09 00 00     . . a...]...]...
	...
  2c:	5d 09 00 00 00 00 00 00 00 00 00 00 5d 09 00 00     ]...........]...
  3c:	d1 0a 00 00 5d 09 00 00 5d 09 00 00 5d 09 00 00     ....]...]...]...
  4c:	5d 09 00 00 f1 02 00 00 5d 09 00 00 5d 09 00 00     ].......]...]...
  5c:	5d 09 00 00 5d 09 00 00 5d 09 00 00 5d 09 00 00     ]...]...]...]...
  6c:	5d 09 00 00 5d 09 00 00 5d 09 00 00 5d 09 00 00     ]...]...]...]...
  7c:	5d 09 00 00 5d 09 00 00 5d 09 00 00 5d 09 00 00     ]...]...]...]...
  8c:	5d 09 00 00 5d 09 00 00 5d 09 00 00 5d 09 00 00     ]...]...]...]...
  9c:	5d 09 00 00 5d 09 00 00                             ]...]...

000000a4 <__do_global_dtors_aux>:
  a4:	b510      	push	{r4, lr}
  a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
  a8:	7823      	ldrb	r3, [r4, #0]
  aa:	2b00      	cmp	r3, #0
  ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
  ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
  b0:	2b00      	cmp	r3, #0
  b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
  b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
  b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
  b8:	bf00      	nop
  ba:	2301      	movs	r3, #1
  bc:	7023      	strb	r3, [r4, #0]
  be:	bd10      	pop	{r4, pc}
  c0:	2000000c 	.word	0x2000000c
  c4:	00000000 	.word	0x00000000
  c8:	00000d18 	.word	0x00000d18

000000cc <frame_dummy>:
  cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
  ce:	b510      	push	{r4, lr}
  d0:	2b00      	cmp	r3, #0
  d2:	d003      	beq.n	dc <frame_dummy+0x10>
  d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
  d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
  d8:	e000      	b.n	dc <frame_dummy+0x10>
  da:	bf00      	nop
  dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
  de:	6803      	ldr	r3, [r0, #0]
  e0:	2b00      	cmp	r3, #0
  e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
  e4:	bd10      	pop	{r4, pc}
  e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
  e8:	2b00      	cmp	r3, #0
  ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
  ec:	4798      	blx	r3
  ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
  f0:	00000000 	.word	0x00000000
  f4:	20000010 	.word	0x20000010
  f8:	00000d18 	.word	0x00000d18
  fc:	00000d18 	.word	0x00000d18
 100:	00000000 	.word	0x00000000

00000104 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
 104:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
 106:	2000      	movs	r0, #0
 108:	4b08      	ldr	r3, [pc, #32]	; (12c <delay_init+0x28>)
 10a:	4798      	blx	r3
 10c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
 10e:	4c08      	ldr	r4, [pc, #32]	; (130 <delay_init+0x2c>)
 110:	21fa      	movs	r1, #250	; 0xfa
 112:	0089      	lsls	r1, r1, #2
 114:	47a0      	blx	r4
 116:	4b07      	ldr	r3, [pc, #28]	; (134 <delay_init+0x30>)
 118:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
 11a:	4907      	ldr	r1, [pc, #28]	; (138 <delay_init+0x34>)
 11c:	0028      	movs	r0, r5
 11e:	47a0      	blx	r4
 120:	4b06      	ldr	r3, [pc, #24]	; (13c <delay_init+0x38>)
 122:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 124:	2205      	movs	r2, #5
 126:	4b06      	ldr	r3, [pc, #24]	; (140 <delay_init+0x3c>)
 128:	601a      	str	r2, [r3, #0]
}
 12a:	bd70      	pop	{r4, r5, r6, pc}
 12c:	000006ed 	.word	0x000006ed
 130:	00000b59 	.word	0x00000b59
 134:	20000000 	.word	0x20000000
 138:	000f4240 	.word	0x000f4240
 13c:	20000004 	.word	0x20000004
 140:	e000e010 	.word	0xe000e010

00000144 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
 144:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
 146:	4b08      	ldr	r3, [pc, #32]	; (168 <delay_cycles_ms+0x24>)
 148:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
 14a:	4a08      	ldr	r2, [pc, #32]	; (16c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
 14c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 14e:	2180      	movs	r1, #128	; 0x80
 150:	0249      	lsls	r1, r1, #9
	while (n--) {
 152:	3801      	subs	r0, #1
 154:	d307      	bcc.n	166 <delay_cycles_ms+0x22>
	if (n > 0) {
 156:	2c00      	cmp	r4, #0
 158:	d0fb      	beq.n	152 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
 15a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
 15c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 15e:	6813      	ldr	r3, [r2, #0]
 160:	420b      	tst	r3, r1
 162:	d0fc      	beq.n	15e <delay_cycles_ms+0x1a>
 164:	e7f5      	b.n	152 <delay_cycles_ms+0xe>
	}
}
 166:	bd30      	pop	{r4, r5, pc}
 168:	20000000 	.word	0x20000000
 16c:	e000e010 	.word	0xe000e010

00000170 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
 170:	4a04      	ldr	r2, [pc, #16]	; (184 <_extint_enable+0x14>)
 172:	7813      	ldrb	r3, [r2, #0]
 174:	2102      	movs	r1, #2
 176:	430b      	orrs	r3, r1
 178:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
 17a:	7853      	ldrb	r3, [r2, #1]
 17c:	b25b      	sxtb	r3, r3
 17e:	2b00      	cmp	r3, #0
 180:	dbfb      	blt.n	17a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
 182:	4770      	bx	lr
 184:	40001800 	.word	0x40001800

00000188 <_system_extint_init>:
{
 188:	b500      	push	{lr}
 18a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
 18c:	4a12      	ldr	r2, [pc, #72]	; (1d8 <_system_extint_init+0x50>)
 18e:	6993      	ldr	r3, [r2, #24]
 190:	2140      	movs	r1, #64	; 0x40
 192:	430b      	orrs	r3, r1
 194:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
 196:	a901      	add	r1, sp, #4
 198:	2300      	movs	r3, #0
 19a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
 19c:	2003      	movs	r0, #3
 19e:	4b0f      	ldr	r3, [pc, #60]	; (1dc <_system_extint_init+0x54>)
 1a0:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
 1a2:	2003      	movs	r0, #3
 1a4:	4b0e      	ldr	r3, [pc, #56]	; (1e0 <_system_extint_init+0x58>)
 1a6:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
 1a8:	4a0e      	ldr	r2, [pc, #56]	; (1e4 <_system_extint_init+0x5c>)
 1aa:	7813      	ldrb	r3, [r2, #0]
 1ac:	2101      	movs	r1, #1
 1ae:	430b      	orrs	r3, r1
 1b0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
 1b2:	7853      	ldrb	r3, [r2, #1]
 1b4:	b25b      	sxtb	r3, r3
 1b6:	2b00      	cmp	r3, #0
 1b8:	dbfb      	blt.n	1b2 <_system_extint_init+0x2a>
 1ba:	4b0b      	ldr	r3, [pc, #44]	; (1e8 <_system_extint_init+0x60>)
 1bc:	0019      	movs	r1, r3
 1be:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
 1c0:	2200      	movs	r2, #0
 1c2:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
 1c4:	4299      	cmp	r1, r3
 1c6:	d1fc      	bne.n	1c2 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
 1c8:	2210      	movs	r2, #16
 1ca:	4b08      	ldr	r3, [pc, #32]	; (1ec <_system_extint_init+0x64>)
 1cc:	601a      	str	r2, [r3, #0]
	_extint_enable();
 1ce:	4b08      	ldr	r3, [pc, #32]	; (1f0 <_system_extint_init+0x68>)
 1d0:	4798      	blx	r3
}
 1d2:	b003      	add	sp, #12
 1d4:	bd00      	pop	{pc}
 1d6:	46c0      	nop			; (mov r8, r8)
 1d8:	40000400 	.word	0x40000400
 1dc:	00000805 	.word	0x00000805
 1e0:	00000779 	.word	0x00000779
 1e4:	40001800 	.word	0x40001800
 1e8:	20000044 	.word	0x20000044
 1ec:	e000e100 	.word	0xe000e100
 1f0:	00000171 	.word	0x00000171

000001f4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
 1f4:	2300      	movs	r3, #0
 1f6:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
 1f8:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
 1fa:	2201      	movs	r2, #1
 1fc:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
 1fe:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
 200:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
 202:	3302      	adds	r3, #2
 204:	72c3      	strb	r3, [r0, #11]
}
 206:	4770      	bx	lr

00000208 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
 208:	b5f0      	push	{r4, r5, r6, r7, lr}
 20a:	b083      	sub	sp, #12
 20c:	0005      	movs	r5, r0
 20e:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
 210:	a901      	add	r1, sp, #4
 212:	2300      	movs	r3, #0
 214:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
 216:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
 218:	7923      	ldrb	r3, [r4, #4]
 21a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
 21c:	7a23      	ldrb	r3, [r4, #8]
 21e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
 220:	7820      	ldrb	r0, [r4, #0]
 222:	4b15      	ldr	r3, [pc, #84]	; (278 <extint_chan_set_config+0x70>)
 224:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
 226:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
 228:	2d1f      	cmp	r5, #31
 22a:	d800      	bhi.n	22e <extint_chan_set_config+0x26>
		return eics[eic_index];
 22c:	4813      	ldr	r0, [pc, #76]	; (27c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
 22e:	2207      	movs	r2, #7
 230:	402a      	ands	r2, r5
 232:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
 234:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
 236:	7aa3      	ldrb	r3, [r4, #10]
 238:	2b00      	cmp	r3, #0
 23a:	d001      	beq.n	240 <extint_chan_set_config+0x38>
 23c:	2308      	movs	r3, #8
 23e:	431f      	orrs	r7, r3
 240:	08eb      	lsrs	r3, r5, #3
 242:	009b      	lsls	r3, r3, #2
 244:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
 246:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
 248:	260f      	movs	r6, #15
 24a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
 24c:	43b1      	bics	r1, r6
			(new_config << config_pos);
 24e:	4097      	lsls	r7, r2
 250:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
 252:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
 254:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
 256:	7a63      	ldrb	r3, [r4, #9]
 258:	2b00      	cmp	r3, #0
 25a:	d106      	bne.n	26a <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
 25c:	6943      	ldr	r3, [r0, #20]
 25e:	2201      	movs	r2, #1
 260:	40aa      	lsls	r2, r5
 262:	4393      	bics	r3, r2
 264:	6143      	str	r3, [r0, #20]
	}
}
 266:	b003      	add	sp, #12
 268:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
 26a:	6942      	ldr	r2, [r0, #20]
 26c:	2301      	movs	r3, #1
 26e:	40ab      	lsls	r3, r5
 270:	4313      	orrs	r3, r2
 272:	6143      	str	r3, [r0, #20]
 274:	e7f7      	b.n	266 <extint_chan_set_config+0x5e>
 276:	46c0      	nop			; (mov r8, r8)
 278:	000008fd 	.word	0x000008fd
 27c:	40001800 	.word	0x40001800

00000280 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 280:	b500      	push	{lr}
 282:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
 284:	ab01      	add	r3, sp, #4
 286:	2280      	movs	r2, #128	; 0x80
 288:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 28a:	780a      	ldrb	r2, [r1, #0]
 28c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 28e:	784a      	ldrb	r2, [r1, #1]
 290:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 292:	788a      	ldrb	r2, [r1, #2]
 294:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 296:	0019      	movs	r1, r3
 298:	4b01      	ldr	r3, [pc, #4]	; (2a0 <port_pin_set_config+0x20>)
 29a:	4798      	blx	r3
}
 29c:	b003      	add	sp, #12
 29e:	bd00      	pop	{pc}
 2a0:	000008fd 	.word	0x000008fd

000002a4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 2a4:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
 2a6:	2a00      	cmp	r2, #0
 2a8:	d001      	beq.n	2ae <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
 2aa:	0018      	movs	r0, r3
 2ac:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
 2ae:	008b      	lsls	r3, r1, #2
 2b0:	4a06      	ldr	r2, [pc, #24]	; (2cc <extint_register_callback+0x28>)
 2b2:	589b      	ldr	r3, [r3, r2]
 2b4:	2b00      	cmp	r3, #0
 2b6:	d003      	beq.n	2c0 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
 2b8:	4283      	cmp	r3, r0
 2ba:	d005      	beq.n	2c8 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
 2bc:	231d      	movs	r3, #29
 2be:	e7f4      	b.n	2aa <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
 2c0:	0089      	lsls	r1, r1, #2
 2c2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
 2c4:	2300      	movs	r3, #0
 2c6:	e7f0      	b.n	2aa <extint_register_callback+0x6>
		return STATUS_OK;
 2c8:	2300      	movs	r3, #0
 2ca:	e7ee      	b.n	2aa <extint_register_callback+0x6>
 2cc:	20000044 	.word	0x20000044

000002d0 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 2d0:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
 2d2:	2900      	cmp	r1, #0
 2d4:	d001      	beq.n	2da <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
 2d6:	0018      	movs	r0, r3
 2d8:	4770      	bx	lr
		return NULL;
 2da:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
 2dc:	281f      	cmp	r0, #31
 2de:	d800      	bhi.n	2e2 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
 2e0:	4a02      	ldr	r2, [pc, #8]	; (2ec <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
 2e2:	2301      	movs	r3, #1
 2e4:	4083      	lsls	r3, r0
 2e6:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
 2e8:	2300      	movs	r3, #0
 2ea:	e7f4      	b.n	2d6 <extint_chan_enable_callback+0x6>
 2ec:	40001800 	.word	0x40001800

000002f0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
 2f0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
 2f2:	2200      	movs	r2, #0
 2f4:	4b10      	ldr	r3, [pc, #64]	; (338 <EIC_Handler+0x48>)
 2f6:	701a      	strb	r2, [r3, #0]
 2f8:	2300      	movs	r3, #0
 2fa:	4910      	ldr	r1, [pc, #64]	; (33c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
 2fc:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
 2fe:	4e10      	ldr	r6, [pc, #64]	; (340 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
 300:	4c0d      	ldr	r4, [pc, #52]	; (338 <EIC_Handler+0x48>)
 302:	e00a      	b.n	31a <EIC_Handler+0x2a>
		return eics[eic_index];
 304:	490d      	ldr	r1, [pc, #52]	; (33c <EIC_Handler+0x4c>)
 306:	e008      	b.n	31a <EIC_Handler+0x2a>
 308:	7823      	ldrb	r3, [r4, #0]
 30a:	3301      	adds	r3, #1
 30c:	b2db      	uxtb	r3, r3
 30e:	7023      	strb	r3, [r4, #0]
 310:	2b0f      	cmp	r3, #15
 312:	d810      	bhi.n	336 <EIC_Handler+0x46>
		return NULL;
 314:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
 316:	2b1f      	cmp	r3, #31
 318:	d9f4      	bls.n	304 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
 31a:	0028      	movs	r0, r5
 31c:	4018      	ands	r0, r3
 31e:	2201      	movs	r2, #1
 320:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
 322:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
 324:	4210      	tst	r0, r2
 326:	d0ef      	beq.n	308 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
 328:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
 32a:	009b      	lsls	r3, r3, #2
 32c:	599b      	ldr	r3, [r3, r6]
 32e:	2b00      	cmp	r3, #0
 330:	d0ea      	beq.n	308 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
 332:	4798      	blx	r3
 334:	e7e8      	b.n	308 <EIC_Handler+0x18>
			}
		}
	}
}
 336:	bd70      	pop	{r4, r5, r6, pc}
 338:	20000084 	.word	0x20000084
 33c:	40001800 	.word	0x40001800
 340:	20000044 	.word	0x20000044

00000344 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
 344:	b5f0      	push	{r4, r5, r6, r7, lr}
 346:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 348:	ac01      	add	r4, sp, #4
 34a:	2501      	movs	r5, #1
 34c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
 34e:	2700      	movs	r7, #0
 350:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 352:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 354:	0021      	movs	r1, r4
 356:	200e      	movs	r0, #14
 358:	4e06      	ldr	r6, [pc, #24]	; (374 <system_board_init+0x30>)
 35a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 35c:	2280      	movs	r2, #128	; 0x80
 35e:	01d2      	lsls	r2, r2, #7
 360:	4b05      	ldr	r3, [pc, #20]	; (378 <system_board_init+0x34>)
 362:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
 364:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
 366:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 368:	0021      	movs	r1, r4
 36a:	200f      	movs	r0, #15
 36c:	47b0      	blx	r6

 36e:	b003      	add	sp, #12
 370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 372:	46c0      	nop			; (mov r8, r8)
 374:	00000281 	.word	0x00000281
 378:	41004400 	.word	0x41004400

0000037c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 37c:	4b0c      	ldr	r3, [pc, #48]	; (3b0 <cpu_irq_enter_critical+0x34>)
 37e:	681b      	ldr	r3, [r3, #0]
 380:	2b00      	cmp	r3, #0
 382:	d106      	bne.n	392 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 384:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 388:	2b00      	cmp	r3, #0
 38a:	d007      	beq.n	39c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 38c:	2200      	movs	r2, #0
 38e:	4b09      	ldr	r3, [pc, #36]	; (3b4 <cpu_irq_enter_critical+0x38>)
 390:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 392:	4a07      	ldr	r2, [pc, #28]	; (3b0 <cpu_irq_enter_critical+0x34>)
 394:	6813      	ldr	r3, [r2, #0]
 396:	3301      	adds	r3, #1
 398:	6013      	str	r3, [r2, #0]
}
 39a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 39c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 39e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 3a2:	2200      	movs	r2, #0
 3a4:	4b04      	ldr	r3, [pc, #16]	; (3b8 <cpu_irq_enter_critical+0x3c>)
 3a6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 3a8:	3201      	adds	r2, #1
 3aa:	4b02      	ldr	r3, [pc, #8]	; (3b4 <cpu_irq_enter_critical+0x38>)
 3ac:	701a      	strb	r2, [r3, #0]
 3ae:	e7f0      	b.n	392 <cpu_irq_enter_critical+0x16>
 3b0:	20000028 	.word	0x20000028
 3b4:	2000002c 	.word	0x2000002c
 3b8:	20000008 	.word	0x20000008

000003bc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 3bc:	4b08      	ldr	r3, [pc, #32]	; (3e0 <cpu_irq_leave_critical+0x24>)
 3be:	681a      	ldr	r2, [r3, #0]
 3c0:	3a01      	subs	r2, #1
 3c2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 3c4:	681b      	ldr	r3, [r3, #0]
 3c6:	2b00      	cmp	r3, #0
 3c8:	d109      	bne.n	3de <cpu_irq_leave_critical+0x22>
 3ca:	4b06      	ldr	r3, [pc, #24]	; (3e4 <cpu_irq_leave_critical+0x28>)
 3cc:	781b      	ldrb	r3, [r3, #0]
 3ce:	2b00      	cmp	r3, #0
 3d0:	d005      	beq.n	3de <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 3d2:	2201      	movs	r2, #1
 3d4:	4b04      	ldr	r3, [pc, #16]	; (3e8 <cpu_irq_leave_critical+0x2c>)
 3d6:	701a      	strb	r2, [r3, #0]
 3d8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 3dc:	b662      	cpsie	i
	}
}
 3de:	4770      	bx	lr
 3e0:	20000028 	.word	0x20000028
 3e4:	2000002c 	.word	0x2000002c
 3e8:	20000008 	.word	0x20000008

000003ec <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
 3ec:	b510      	push	{r4, lr}
	switch (clock_source) {
 3ee:	2807      	cmp	r0, #7
 3f0:	d803      	bhi.n	3fa <system_clock_source_get_hz+0xe>
 3f2:	0080      	lsls	r0, r0, #2
 3f4:	4b16      	ldr	r3, [pc, #88]	; (450 <system_clock_source_get_hz+0x64>)
 3f6:	581b      	ldr	r3, [r3, r0]
 3f8:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
 3fa:	2000      	movs	r0, #0
 3fc:	e027      	b.n	44e <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
 3fe:	4b15      	ldr	r3, [pc, #84]	; (454 <system_clock_source_get_hz+0x68>)
 400:	68d8      	ldr	r0, [r3, #12]
 402:	e024      	b.n	44e <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
 404:	4b14      	ldr	r3, [pc, #80]	; (458 <system_clock_source_get_hz+0x6c>)
 406:	6a1b      	ldr	r3, [r3, #32]
 408:	059b      	lsls	r3, r3, #22
 40a:	0f9b      	lsrs	r3, r3, #30
 40c:	4813      	ldr	r0, [pc, #76]	; (45c <system_clock_source_get_hz+0x70>)
 40e:	40d8      	lsrs	r0, r3
 410:	e01d      	b.n	44e <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
 412:	4b10      	ldr	r3, [pc, #64]	; (454 <system_clock_source_get_hz+0x68>)
 414:	6918      	ldr	r0, [r3, #16]
 416:	e01a      	b.n	44e <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
 418:	4b0e      	ldr	r3, [pc, #56]	; (454 <system_clock_source_get_hz+0x68>)
 41a:	681b      	ldr	r3, [r3, #0]
			return 0;
 41c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
 41e:	079b      	lsls	r3, r3, #30
 420:	d515      	bpl.n	44e <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 422:	490d      	ldr	r1, [pc, #52]	; (458 <system_clock_source_get_hz+0x6c>)
 424:	2210      	movs	r2, #16
 426:	68cb      	ldr	r3, [r1, #12]
 428:	421a      	tst	r2, r3
 42a:	d0fc      	beq.n	426 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
 42c:	4b09      	ldr	r3, [pc, #36]	; (454 <system_clock_source_get_hz+0x68>)
 42e:	681b      	ldr	r3, [r3, #0]
 430:	075b      	lsls	r3, r3, #29
 432:	d401      	bmi.n	438 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
 434:	480a      	ldr	r0, [pc, #40]	; (460 <system_clock_source_get_hz+0x74>)
 436:	e00a      	b.n	44e <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 438:	2000      	movs	r0, #0
 43a:	4b0a      	ldr	r3, [pc, #40]	; (464 <system_clock_source_get_hz+0x78>)
 43c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
 43e:	4b05      	ldr	r3, [pc, #20]	; (454 <system_clock_source_get_hz+0x68>)
 440:	689b      	ldr	r3, [r3, #8]
 442:	041b      	lsls	r3, r3, #16
 444:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 446:	4358      	muls	r0, r3
 448:	e001      	b.n	44e <system_clock_source_get_hz+0x62>
		return 32768UL;
 44a:	2080      	movs	r0, #128	; 0x80
 44c:	0200      	lsls	r0, r0, #8
	}
}
 44e:	bd10      	pop	{r4, pc}
 450:	00000cb8 	.word	0x00000cb8
 454:	20000030 	.word	0x20000030
 458:	40000800 	.word	0x40000800
 45c:	007a1200 	.word	0x007a1200
 460:	02dc6c00 	.word	0x02dc6c00
 464:	00000821 	.word	0x00000821

00000468 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 468:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 46a:	490c      	ldr	r1, [pc, #48]	; (49c <system_clock_source_osc8m_set_config+0x34>)
 46c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 46e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 470:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 472:	7840      	ldrb	r0, [r0, #1]
 474:	2201      	movs	r2, #1
 476:	4010      	ands	r0, r2
 478:	0180      	lsls	r0, r0, #6
 47a:	2640      	movs	r6, #64	; 0x40
 47c:	43b3      	bics	r3, r6
 47e:	4303      	orrs	r3, r0
 480:	402a      	ands	r2, r5
 482:	01d2      	lsls	r2, r2, #7
 484:	2080      	movs	r0, #128	; 0x80
 486:	4383      	bics	r3, r0
 488:	4313      	orrs	r3, r2
 48a:	2203      	movs	r2, #3
 48c:	4022      	ands	r2, r4
 48e:	0212      	lsls	r2, r2, #8
 490:	4803      	ldr	r0, [pc, #12]	; (4a0 <system_clock_source_osc8m_set_config+0x38>)
 492:	4003      	ands	r3, r0
 494:	4313      	orrs	r3, r2
 496:	620b      	str	r3, [r1, #32]
}
 498:	bd70      	pop	{r4, r5, r6, pc}
 49a:	46c0      	nop			; (mov r8, r8)
 49c:	40000800 	.word	0x40000800
 4a0:	fffffcff 	.word	0xfffffcff

000004a4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 4a4:	2807      	cmp	r0, #7
 4a6:	d803      	bhi.n	4b0 <system_clock_source_enable+0xc>
 4a8:	0080      	lsls	r0, r0, #2
 4aa:	4b1e      	ldr	r3, [pc, #120]	; (524 <system_clock_source_enable+0x80>)
 4ac:	581b      	ldr	r3, [r3, r0]
 4ae:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 4b0:	2017      	movs	r0, #23
 4b2:	e036      	b.n	522 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 4b4:	4a1c      	ldr	r2, [pc, #112]	; (528 <system_clock_source_enable+0x84>)
 4b6:	6a13      	ldr	r3, [r2, #32]
 4b8:	2102      	movs	r1, #2
 4ba:	430b      	orrs	r3, r1
 4bc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 4be:	2000      	movs	r0, #0
 4c0:	e02f      	b.n	522 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 4c2:	4a19      	ldr	r2, [pc, #100]	; (528 <system_clock_source_enable+0x84>)
 4c4:	6993      	ldr	r3, [r2, #24]
 4c6:	2102      	movs	r1, #2
 4c8:	430b      	orrs	r3, r1
 4ca:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
 4cc:	2000      	movs	r0, #0
		break;
 4ce:	e028      	b.n	522 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 4d0:	4a15      	ldr	r2, [pc, #84]	; (528 <system_clock_source_enable+0x84>)
 4d2:	8a13      	ldrh	r3, [r2, #16]
 4d4:	2102      	movs	r1, #2
 4d6:	430b      	orrs	r3, r1
 4d8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
 4da:	2000      	movs	r0, #0
		break;
 4dc:	e021      	b.n	522 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 4de:	4a12      	ldr	r2, [pc, #72]	; (528 <system_clock_source_enable+0x84>)
 4e0:	8a93      	ldrh	r3, [r2, #20]
 4e2:	2102      	movs	r1, #2
 4e4:	430b      	orrs	r3, r1
 4e6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
 4e8:	2000      	movs	r0, #0
		break;
 4ea:	e01a      	b.n	522 <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 4ec:	4b0f      	ldr	r3, [pc, #60]	; (52c <system_clock_source_enable+0x88>)
 4ee:	681a      	ldr	r2, [r3, #0]
 4f0:	2102      	movs	r1, #2
 4f2:	430a      	orrs	r2, r1
 4f4:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
 4f6:	681b      	ldr	r3, [r3, #0]
 4f8:	4a0d      	ldr	r2, [pc, #52]	; (530 <system_clock_source_enable+0x8c>)
 4fa:	4013      	ands	r3, r2
 4fc:	4a0a      	ldr	r2, [pc, #40]	; (528 <system_clock_source_enable+0x84>)
 4fe:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 500:	0011      	movs	r1, r2
 502:	2210      	movs	r2, #16
 504:	68cb      	ldr	r3, [r1, #12]
 506:	421a      	tst	r2, r3
 508:	d0fc      	beq.n	504 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 50a:	4a08      	ldr	r2, [pc, #32]	; (52c <system_clock_source_enable+0x88>)
 50c:	6891      	ldr	r1, [r2, #8]
 50e:	4b06      	ldr	r3, [pc, #24]	; (528 <system_clock_source_enable+0x84>)
 510:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 512:	6851      	ldr	r1, [r2, #4]
 514:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 516:	6812      	ldr	r2, [r2, #0]
 518:	b292      	uxth	r2, r2
 51a:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
 51c:	2000      	movs	r0, #0
 51e:	e000      	b.n	522 <system_clock_source_enable+0x7e>
		return STATUS_OK;
 520:	2000      	movs	r0, #0
}
 522:	4770      	bx	lr
 524:	00000cd8 	.word	0x00000cd8
 528:	40000800 	.word	0x40000800
 52c:	20000030 	.word	0x20000030
 530:	0000ff7f 	.word	0x0000ff7f

00000534 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 534:	b530      	push	{r4, r5, lr}
 536:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 538:	22c2      	movs	r2, #194	; 0xc2
 53a:	00d2      	lsls	r2, r2, #3
 53c:	4b1a      	ldr	r3, [pc, #104]	; (5a8 <system_clock_init+0x74>)
 53e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 540:	4a1a      	ldr	r2, [pc, #104]	; (5ac <system_clock_init+0x78>)
 542:	6853      	ldr	r3, [r2, #4]
 544:	211e      	movs	r1, #30
 546:	438b      	bics	r3, r1
 548:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 54a:	2301      	movs	r3, #1
 54c:	466a      	mov	r2, sp
 54e:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 550:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 552:	4d17      	ldr	r5, [pc, #92]	; (5b0 <system_clock_init+0x7c>)
 554:	b2e0      	uxtb	r0, r4
 556:	4669      	mov	r1, sp
 558:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 55a:	3401      	adds	r4, #1
 55c:	2c1c      	cmp	r4, #28
 55e:	d1f9      	bne.n	554 <system_clock_init+0x20>
	config->run_in_standby  = false;
 560:	a803      	add	r0, sp, #12
 562:	2400      	movs	r4, #0
 564:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 566:	2501      	movs	r5, #1
 568:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 56a:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 56c:	4b11      	ldr	r3, [pc, #68]	; (5b4 <system_clock_init+0x80>)
 56e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 570:	2006      	movs	r0, #6
 572:	4b11      	ldr	r3, [pc, #68]	; (5b8 <system_clock_init+0x84>)
 574:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 576:	4b11      	ldr	r3, [pc, #68]	; (5bc <system_clock_init+0x88>)
 578:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
 57a:	4b11      	ldr	r3, [pc, #68]	; (5c0 <system_clock_init+0x8c>)
 57c:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
 57e:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
 580:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
 582:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
 584:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 586:	466b      	mov	r3, sp
 588:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
 58a:	2306      	movs	r3, #6
 58c:	466a      	mov	r2, sp
 58e:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
 590:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 592:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 594:	4669      	mov	r1, sp
 596:	2000      	movs	r0, #0
 598:	4b0a      	ldr	r3, [pc, #40]	; (5c4 <system_clock_init+0x90>)
 59a:	4798      	blx	r3
 59c:	2000      	movs	r0, #0
 59e:	4b0a      	ldr	r3, [pc, #40]	; (5c8 <system_clock_init+0x94>)
 5a0:	4798      	blx	r3
#endif
}
 5a2:	b005      	add	sp, #20
 5a4:	bd30      	pop	{r4, r5, pc}
 5a6:	46c0      	nop			; (mov r8, r8)
 5a8:	40000800 	.word	0x40000800
 5ac:	41004000 	.word	0x41004000
 5b0:	00000805 	.word	0x00000805
 5b4:	00000469 	.word	0x00000469
 5b8:	000004a5 	.word	0x000004a5
 5bc:	000005cd 	.word	0x000005cd
 5c0:	40000400 	.word	0x40000400
 5c4:	000005f1 	.word	0x000005f1
 5c8:	000006a9 	.word	0x000006a9

000005cc <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
 5cc:	4a06      	ldr	r2, [pc, #24]	; (5e8 <system_gclk_init+0x1c>)
 5ce:	6993      	ldr	r3, [r2, #24]
 5d0:	2108      	movs	r1, #8
 5d2:	430b      	orrs	r3, r1
 5d4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 5d6:	2201      	movs	r2, #1
 5d8:	4b04      	ldr	r3, [pc, #16]	; (5ec <system_gclk_init+0x20>)
 5da:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 5dc:	0019      	movs	r1, r3
 5de:	780b      	ldrb	r3, [r1, #0]
 5e0:	4213      	tst	r3, r2
 5e2:	d1fc      	bne.n	5de <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 5e4:	4770      	bx	lr
 5e6:	46c0      	nop			; (mov r8, r8)
 5e8:	40000400 	.word	0x40000400
 5ec:	40000c00 	.word	0x40000c00

000005f0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 5f0:	b570      	push	{r4, r5, r6, lr}
 5f2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 5f4:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 5f6:	780d      	ldrb	r5, [r1, #0]
 5f8:	022d      	lsls	r5, r5, #8
 5fa:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 5fc:	784b      	ldrb	r3, [r1, #1]
 5fe:	2b00      	cmp	r3, #0
 600:	d002      	beq.n	608 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 602:	2380      	movs	r3, #128	; 0x80
 604:	02db      	lsls	r3, r3, #11
 606:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 608:	7a4b      	ldrb	r3, [r1, #9]
 60a:	2b00      	cmp	r3, #0
 60c:	d002      	beq.n	614 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 60e:	2380      	movs	r3, #128	; 0x80
 610:	031b      	lsls	r3, r3, #12
 612:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 614:	6848      	ldr	r0, [r1, #4]
 616:	2801      	cmp	r0, #1
 618:	d910      	bls.n	63c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 61a:	1e43      	subs	r3, r0, #1
 61c:	4218      	tst	r0, r3
 61e:	d134      	bne.n	68a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 620:	2802      	cmp	r0, #2
 622:	d930      	bls.n	686 <system_gclk_gen_set_config+0x96>
 624:	2302      	movs	r3, #2
 626:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 628:	3201      	adds	r2, #1
						mask <<= 1) {
 62a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 62c:	4298      	cmp	r0, r3
 62e:	d8fb      	bhi.n	628 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 630:	0212      	lsls	r2, r2, #8
 632:	4332      	orrs	r2, r6
 634:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 636:	2380      	movs	r3, #128	; 0x80
 638:	035b      	lsls	r3, r3, #13
 63a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 63c:	7a0b      	ldrb	r3, [r1, #8]
 63e:	2b00      	cmp	r3, #0
 640:	d002      	beq.n	648 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 642:	2380      	movs	r3, #128	; 0x80
 644:	039b      	lsls	r3, r3, #14
 646:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 648:	4a13      	ldr	r2, [pc, #76]	; (698 <system_gclk_gen_set_config+0xa8>)
 64a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
 64c:	b25b      	sxtb	r3, r3
 64e:	2b00      	cmp	r3, #0
 650:	dbfb      	blt.n	64a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
 652:	4b12      	ldr	r3, [pc, #72]	; (69c <system_gclk_gen_set_config+0xac>)
 654:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 656:	4b12      	ldr	r3, [pc, #72]	; (6a0 <system_gclk_gen_set_config+0xb0>)
 658:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 65a:	4a0f      	ldr	r2, [pc, #60]	; (698 <system_gclk_gen_set_config+0xa8>)
 65c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 65e:	b25b      	sxtb	r3, r3
 660:	2b00      	cmp	r3, #0
 662:	dbfb      	blt.n	65c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 664:	4b0c      	ldr	r3, [pc, #48]	; (698 <system_gclk_gen_set_config+0xa8>)
 666:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 668:	001a      	movs	r2, r3
 66a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
 66c:	b25b      	sxtb	r3, r3
 66e:	2b00      	cmp	r3, #0
 670:	dbfb      	blt.n	66a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 672:	4a09      	ldr	r2, [pc, #36]	; (698 <system_gclk_gen_set_config+0xa8>)
 674:	6853      	ldr	r3, [r2, #4]
 676:	2180      	movs	r1, #128	; 0x80
 678:	0249      	lsls	r1, r1, #9
 67a:	400b      	ands	r3, r1
 67c:	431d      	orrs	r5, r3
 67e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
 680:	4b08      	ldr	r3, [pc, #32]	; (6a4 <system_gclk_gen_set_config+0xb4>)
 682:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 684:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
 686:	2200      	movs	r2, #0
 688:	e7d2      	b.n	630 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 68a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
 68c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 68e:	2380      	movs	r3, #128	; 0x80
 690:	029b      	lsls	r3, r3, #10
 692:	431d      	orrs	r5, r3
 694:	e7d2      	b.n	63c <system_gclk_gen_set_config+0x4c>
 696:	46c0      	nop			; (mov r8, r8)
 698:	40000c00 	.word	0x40000c00
 69c:	0000037d 	.word	0x0000037d
 6a0:	40000c08 	.word	0x40000c08
 6a4:	000003bd 	.word	0x000003bd

000006a8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 6a8:	b510      	push	{r4, lr}
 6aa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 6ac:	4a0b      	ldr	r2, [pc, #44]	; (6dc <system_gclk_gen_enable+0x34>)
 6ae:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 6b0:	b25b      	sxtb	r3, r3
 6b2:	2b00      	cmp	r3, #0
 6b4:	dbfb      	blt.n	6ae <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
 6b6:	4b0a      	ldr	r3, [pc, #40]	; (6e0 <system_gclk_gen_enable+0x38>)
 6b8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 6ba:	4b0a      	ldr	r3, [pc, #40]	; (6e4 <system_gclk_gen_enable+0x3c>)
 6bc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 6be:	4a07      	ldr	r2, [pc, #28]	; (6dc <system_gclk_gen_enable+0x34>)
 6c0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 6c2:	b25b      	sxtb	r3, r3
 6c4:	2b00      	cmp	r3, #0
 6c6:	dbfb      	blt.n	6c0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 6c8:	4a04      	ldr	r2, [pc, #16]	; (6dc <system_gclk_gen_enable+0x34>)
 6ca:	6851      	ldr	r1, [r2, #4]
 6cc:	2380      	movs	r3, #128	; 0x80
 6ce:	025b      	lsls	r3, r3, #9
 6d0:	430b      	orrs	r3, r1
 6d2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
 6d4:	4b04      	ldr	r3, [pc, #16]	; (6e8 <system_gclk_gen_enable+0x40>)
 6d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 6d8:	bd10      	pop	{r4, pc}
 6da:	46c0      	nop			; (mov r8, r8)
 6dc:	40000c00 	.word	0x40000c00
 6e0:	0000037d 	.word	0x0000037d
 6e4:	40000c04 	.word	0x40000c04
 6e8:	000003bd 	.word	0x000003bd

000006ec <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
 6ec:	b570      	push	{r4, r5, r6, lr}
 6ee:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 6f0:	4a1a      	ldr	r2, [pc, #104]	; (75c <system_gclk_gen_get_hz+0x70>)
 6f2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 6f4:	b25b      	sxtb	r3, r3
 6f6:	2b00      	cmp	r3, #0
 6f8:	dbfb      	blt.n	6f2 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
 6fa:	4b19      	ldr	r3, [pc, #100]	; (760 <system_gclk_gen_get_hz+0x74>)
 6fc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 6fe:	4b19      	ldr	r3, [pc, #100]	; (764 <system_gclk_gen_get_hz+0x78>)
 700:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 702:	4a16      	ldr	r2, [pc, #88]	; (75c <system_gclk_gen_get_hz+0x70>)
 704:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 706:	b25b      	sxtb	r3, r3
 708:	2b00      	cmp	r3, #0
 70a:	dbfb      	blt.n	704 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
 70c:	4e13      	ldr	r6, [pc, #76]	; (75c <system_gclk_gen_get_hz+0x70>)
 70e:	6870      	ldr	r0, [r6, #4]
 710:	04c0      	lsls	r0, r0, #19
 712:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
 714:	4b14      	ldr	r3, [pc, #80]	; (768 <system_gclk_gen_get_hz+0x7c>)
 716:	4798      	blx	r3
 718:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 71a:	4b12      	ldr	r3, [pc, #72]	; (764 <system_gclk_gen_get_hz+0x78>)
 71c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
 71e:	6876      	ldr	r6, [r6, #4]
 720:	02f6      	lsls	r6, r6, #11
 722:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 724:	4b11      	ldr	r3, [pc, #68]	; (76c <system_gclk_gen_get_hz+0x80>)
 726:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 728:	4a0c      	ldr	r2, [pc, #48]	; (75c <system_gclk_gen_get_hz+0x70>)
 72a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 72c:	b25b      	sxtb	r3, r3
 72e:	2b00      	cmp	r3, #0
 730:	dbfb      	blt.n	72a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
 732:	4b0a      	ldr	r3, [pc, #40]	; (75c <system_gclk_gen_get_hz+0x70>)
 734:	689c      	ldr	r4, [r3, #8]
 736:	0224      	lsls	r4, r4, #8
 738:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
 73a:	4b0d      	ldr	r3, [pc, #52]	; (770 <system_gclk_gen_get_hz+0x84>)
 73c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
 73e:	2e00      	cmp	r6, #0
 740:	d107      	bne.n	752 <system_gclk_gen_get_hz+0x66>
 742:	2c01      	cmp	r4, #1
 744:	d907      	bls.n	756 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
 746:	0021      	movs	r1, r4
 748:	0028      	movs	r0, r5
 74a:	4b0a      	ldr	r3, [pc, #40]	; (774 <system_gclk_gen_get_hz+0x88>)
 74c:	4798      	blx	r3
 74e:	0005      	movs	r5, r0
 750:	e001      	b.n	756 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
 752:	3401      	adds	r4, #1
 754:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
 756:	0028      	movs	r0, r5
 758:	bd70      	pop	{r4, r5, r6, pc}
 75a:	46c0      	nop			; (mov r8, r8)
 75c:	40000c00 	.word	0x40000c00
 760:	0000037d 	.word	0x0000037d
 764:	40000c04 	.word	0x40000c04
 768:	000003ed 	.word	0x000003ed
 76c:	40000c08 	.word	0x40000c08
 770:	000003bd 	.word	0x000003bd
 774:	00000b59 	.word	0x00000b59

00000778 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
 778:	b510      	push	{r4, lr}
 77a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 77c:	4b06      	ldr	r3, [pc, #24]	; (798 <system_gclk_chan_enable+0x20>)
 77e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 780:	4b06      	ldr	r3, [pc, #24]	; (79c <system_gclk_chan_enable+0x24>)
 782:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
 784:	4a06      	ldr	r2, [pc, #24]	; (7a0 <system_gclk_chan_enable+0x28>)
 786:	8853      	ldrh	r3, [r2, #2]
 788:	2180      	movs	r1, #128	; 0x80
 78a:	01c9      	lsls	r1, r1, #7
 78c:	430b      	orrs	r3, r1
 78e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
 790:	4b04      	ldr	r3, [pc, #16]	; (7a4 <system_gclk_chan_enable+0x2c>)
 792:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 794:	bd10      	pop	{r4, pc}
 796:	46c0      	nop			; (mov r8, r8)
 798:	0000037d 	.word	0x0000037d
 79c:	40000c02 	.word	0x40000c02
 7a0:	40000c00 	.word	0x40000c00
 7a4:	000003bd 	.word	0x000003bd

000007a8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 7a8:	b510      	push	{r4, lr}
 7aa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 7ac:	4b0f      	ldr	r3, [pc, #60]	; (7ec <system_gclk_chan_disable+0x44>)
 7ae:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 7b0:	4b0f      	ldr	r3, [pc, #60]	; (7f0 <system_gclk_chan_disable+0x48>)
 7b2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 7b4:	4a0f      	ldr	r2, [pc, #60]	; (7f4 <system_gclk_chan_disable+0x4c>)
 7b6:	8853      	ldrh	r3, [r2, #2]
 7b8:	051b      	lsls	r3, r3, #20
 7ba:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 7bc:	8853      	ldrh	r3, [r2, #2]
 7be:	490e      	ldr	r1, [pc, #56]	; (7f8 <system_gclk_chan_disable+0x50>)
 7c0:	400b      	ands	r3, r1
 7c2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 7c4:	8853      	ldrh	r3, [r2, #2]
 7c6:	490d      	ldr	r1, [pc, #52]	; (7fc <system_gclk_chan_disable+0x54>)
 7c8:	400b      	ands	r3, r1
 7ca:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 7cc:	0011      	movs	r1, r2
 7ce:	2280      	movs	r2, #128	; 0x80
 7d0:	01d2      	lsls	r2, r2, #7
 7d2:	884b      	ldrh	r3, [r1, #2]
 7d4:	4213      	tst	r3, r2
 7d6:	d1fc      	bne.n	7d2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 7d8:	4906      	ldr	r1, [pc, #24]	; (7f4 <system_gclk_chan_disable+0x4c>)
 7da:	884a      	ldrh	r2, [r1, #2]
 7dc:	0203      	lsls	r3, r0, #8
 7de:	4806      	ldr	r0, [pc, #24]	; (7f8 <system_gclk_chan_disable+0x50>)
 7e0:	4002      	ands	r2, r0
 7e2:	4313      	orrs	r3, r2
 7e4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
 7e6:	4b06      	ldr	r3, [pc, #24]	; (800 <system_gclk_chan_disable+0x58>)
 7e8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 7ea:	bd10      	pop	{r4, pc}
 7ec:	0000037d 	.word	0x0000037d
 7f0:	40000c02 	.word	0x40000c02
 7f4:	40000c00 	.word	0x40000c00
 7f8:	fffff0ff 	.word	0xfffff0ff
 7fc:	ffffbfff 	.word	0xffffbfff
 800:	000003bd 	.word	0x000003bd

00000804 <system_gclk_chan_set_config>:
{
 804:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 806:	780c      	ldrb	r4, [r1, #0]
 808:	0224      	lsls	r4, r4, #8
 80a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
 80c:	4b02      	ldr	r3, [pc, #8]	; (818 <system_gclk_chan_set_config+0x14>)
 80e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 810:	b2a4      	uxth	r4, r4
 812:	4b02      	ldr	r3, [pc, #8]	; (81c <system_gclk_chan_set_config+0x18>)
 814:	805c      	strh	r4, [r3, #2]
}
 816:	bd10      	pop	{r4, pc}
 818:	000007a9 	.word	0x000007a9
 81c:	40000c00 	.word	0x40000c00

00000820 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
 820:	b510      	push	{r4, lr}
 822:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 824:	4b06      	ldr	r3, [pc, #24]	; (840 <system_gclk_chan_get_hz+0x20>)
 826:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 828:	4b06      	ldr	r3, [pc, #24]	; (844 <system_gclk_chan_get_hz+0x24>)
 82a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
 82c:	4b06      	ldr	r3, [pc, #24]	; (848 <system_gclk_chan_get_hz+0x28>)
 82e:	885c      	ldrh	r4, [r3, #2]
 830:	0524      	lsls	r4, r4, #20
 832:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
 834:	4b05      	ldr	r3, [pc, #20]	; (84c <system_gclk_chan_get_hz+0x2c>)
 836:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
 838:	0020      	movs	r0, r4
 83a:	4b05      	ldr	r3, [pc, #20]	; (850 <system_gclk_chan_get_hz+0x30>)
 83c:	4798      	blx	r3
}
 83e:	bd10      	pop	{r4, pc}
 840:	0000037d 	.word	0x0000037d
 844:	40000c02 	.word	0x40000c02
 848:	40000c00 	.word	0x40000c00
 84c:	000003bd 	.word	0x000003bd
 850:	000006ed 	.word	0x000006ed

00000854 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 854:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 856:	78d3      	ldrb	r3, [r2, #3]
 858:	2b00      	cmp	r3, #0
 85a:	d135      	bne.n	8c8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 85c:	7813      	ldrb	r3, [r2, #0]
 85e:	2b80      	cmp	r3, #128	; 0x80
 860:	d029      	beq.n	8b6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 862:	061b      	lsls	r3, r3, #24
 864:	2480      	movs	r4, #128	; 0x80
 866:	0264      	lsls	r4, r4, #9
 868:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 86a:	7854      	ldrb	r4, [r2, #1]
 86c:	2502      	movs	r5, #2
 86e:	43ac      	bics	r4, r5
 870:	d106      	bne.n	880 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 872:	7894      	ldrb	r4, [r2, #2]
 874:	2c00      	cmp	r4, #0
 876:	d120      	bne.n	8ba <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
 878:	2480      	movs	r4, #128	; 0x80
 87a:	02a4      	lsls	r4, r4, #10
 87c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 87e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 880:	7854      	ldrb	r4, [r2, #1]
 882:	3c01      	subs	r4, #1
 884:	2c01      	cmp	r4, #1
 886:	d91c      	bls.n	8c2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 888:	040d      	lsls	r5, r1, #16
 88a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 88c:	24a0      	movs	r4, #160	; 0xa0
 88e:	05e4      	lsls	r4, r4, #23
 890:	432c      	orrs	r4, r5
 892:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 894:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 896:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 898:	24d0      	movs	r4, #208	; 0xd0
 89a:	0624      	lsls	r4, r4, #24
 89c:	432c      	orrs	r4, r5
 89e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 8a0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 8a2:	78d4      	ldrb	r4, [r2, #3]
 8a4:	2c00      	cmp	r4, #0
 8a6:	d122      	bne.n	8ee <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 8a8:	035b      	lsls	r3, r3, #13
 8aa:	d51c      	bpl.n	8e6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 8ac:	7893      	ldrb	r3, [r2, #2]
 8ae:	2b01      	cmp	r3, #1
 8b0:	d01e      	beq.n	8f0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
 8b2:	6141      	str	r1, [r0, #20]
 8b4:	e017      	b.n	8e6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
 8b6:	2300      	movs	r3, #0
 8b8:	e7d7      	b.n	86a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 8ba:	24c0      	movs	r4, #192	; 0xc0
 8bc:	02e4      	lsls	r4, r4, #11
 8be:	4323      	orrs	r3, r4
 8c0:	e7dd      	b.n	87e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 8c2:	4c0d      	ldr	r4, [pc, #52]	; (8f8 <_system_pinmux_config+0xa4>)
 8c4:	4023      	ands	r3, r4
 8c6:	e7df      	b.n	888 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
 8c8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 8ca:	040c      	lsls	r4, r1, #16
 8cc:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 8ce:	23a0      	movs	r3, #160	; 0xa0
 8d0:	05db      	lsls	r3, r3, #23
 8d2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 8d4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 8d6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 8d8:	23d0      	movs	r3, #208	; 0xd0
 8da:	061b      	lsls	r3, r3, #24
 8dc:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 8de:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
 8e0:	78d3      	ldrb	r3, [r2, #3]
 8e2:	2b00      	cmp	r3, #0
 8e4:	d103      	bne.n	8ee <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 8e6:	7853      	ldrb	r3, [r2, #1]
 8e8:	3b01      	subs	r3, #1
 8ea:	2b01      	cmp	r3, #1
 8ec:	d902      	bls.n	8f4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
 8ee:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
 8f0:	6181      	str	r1, [r0, #24]
 8f2:	e7f8      	b.n	8e6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
 8f4:	6081      	str	r1, [r0, #8]
}
 8f6:	e7fa      	b.n	8ee <_system_pinmux_config+0x9a>
 8f8:	fffbffff 	.word	0xfffbffff

000008fc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 8fc:	b510      	push	{r4, lr}
 8fe:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 900:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 902:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
 904:	2900      	cmp	r1, #0
 906:	d104      	bne.n	912 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
 908:	0943      	lsrs	r3, r0, #5
 90a:	01db      	lsls	r3, r3, #7
 90c:	4905      	ldr	r1, [pc, #20]	; (924 <system_pinmux_pin_set_config+0x28>)
 90e:	468c      	mov	ip, r1
 910:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 912:	241f      	movs	r4, #31
 914:	4020      	ands	r0, r4
 916:	2101      	movs	r1, #1
 918:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
 91a:	0018      	movs	r0, r3
 91c:	4b02      	ldr	r3, [pc, #8]	; (928 <system_pinmux_pin_set_config+0x2c>)
 91e:	4798      	blx	r3
}
 920:	bd10      	pop	{r4, pc}
 922:	46c0      	nop			; (mov r8, r8)
 924:	41004400 	.word	0x41004400
 928:	00000855 	.word	0x00000855

0000092c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 92c:	4770      	bx	lr
	...

00000930 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 930:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 932:	4b05      	ldr	r3, [pc, #20]	; (948 <system_init+0x18>)
 934:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 936:	4b05      	ldr	r3, [pc, #20]	; (94c <system_init+0x1c>)
 938:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 93a:	4b05      	ldr	r3, [pc, #20]	; (950 <system_init+0x20>)
 93c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 93e:	4b05      	ldr	r3, [pc, #20]	; (954 <system_init+0x24>)
 940:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 942:	4b05      	ldr	r3, [pc, #20]	; (958 <system_init+0x28>)
 944:	4798      	blx	r3
}
 946:	bd10      	pop	{r4, pc}
 948:	00000535 	.word	0x00000535
 94c:	00000345 	.word	0x00000345
 950:	0000092d 	.word	0x0000092d
 954:	00000189 	.word	0x00000189
 958:	0000092d 	.word	0x0000092d

0000095c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 95c:	e7fe      	b.n	95c <Dummy_Handler>
	...

00000960 <Reset_Handler>:
{
 960:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 962:	4a1a      	ldr	r2, [pc, #104]	; (9cc <Reset_Handler+0x6c>)
 964:	4b1a      	ldr	r3, [pc, #104]	; (9d0 <Reset_Handler+0x70>)
 966:	429a      	cmp	r2, r3
 968:	d011      	beq.n	98e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 96a:	001a      	movs	r2, r3
 96c:	4b19      	ldr	r3, [pc, #100]	; (9d4 <Reset_Handler+0x74>)
 96e:	429a      	cmp	r2, r3
 970:	d20d      	bcs.n	98e <Reset_Handler+0x2e>
 972:	4a19      	ldr	r2, [pc, #100]	; (9d8 <Reset_Handler+0x78>)
 974:	3303      	adds	r3, #3
 976:	1a9b      	subs	r3, r3, r2
 978:	089b      	lsrs	r3, r3, #2
 97a:	3301      	adds	r3, #1
 97c:	009b      	lsls	r3, r3, #2
 97e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 980:	4813      	ldr	r0, [pc, #76]	; (9d0 <Reset_Handler+0x70>)
 982:	4912      	ldr	r1, [pc, #72]	; (9cc <Reset_Handler+0x6c>)
 984:	588c      	ldr	r4, [r1, r2]
 986:	5084      	str	r4, [r0, r2]
 988:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 98a:	429a      	cmp	r2, r3
 98c:	d1fa      	bne.n	984 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 98e:	4a13      	ldr	r2, [pc, #76]	; (9dc <Reset_Handler+0x7c>)
 990:	4b13      	ldr	r3, [pc, #76]	; (9e0 <Reset_Handler+0x80>)
 992:	429a      	cmp	r2, r3
 994:	d20a      	bcs.n	9ac <Reset_Handler+0x4c>
 996:	43d3      	mvns	r3, r2
 998:	4911      	ldr	r1, [pc, #68]	; (9e0 <Reset_Handler+0x80>)
 99a:	185b      	adds	r3, r3, r1
 99c:	2103      	movs	r1, #3
 99e:	438b      	bics	r3, r1
 9a0:	3304      	adds	r3, #4
 9a2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 9a4:	2100      	movs	r1, #0
 9a6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 9a8:	4293      	cmp	r3, r2
 9aa:	d1fc      	bne.n	9a6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 9ac:	4a0d      	ldr	r2, [pc, #52]	; (9e4 <Reset_Handler+0x84>)
 9ae:	21ff      	movs	r1, #255	; 0xff
 9b0:	4b0d      	ldr	r3, [pc, #52]	; (9e8 <Reset_Handler+0x88>)
 9b2:	438b      	bics	r3, r1
 9b4:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
 9b6:	4a0d      	ldr	r2, [pc, #52]	; (9ec <Reset_Handler+0x8c>)
 9b8:	6853      	ldr	r3, [r2, #4]
 9ba:	397f      	subs	r1, #127	; 0x7f
 9bc:	430b      	orrs	r3, r1
 9be:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 9c0:	4b0b      	ldr	r3, [pc, #44]	; (9f0 <Reset_Handler+0x90>)
 9c2:	4798      	blx	r3
        main();
 9c4:	4b0b      	ldr	r3, [pc, #44]	; (9f4 <Reset_Handler+0x94>)
 9c6:	4798      	blx	r3
 9c8:	e7fe      	b.n	9c8 <Reset_Handler+0x68>
 9ca:	46c0      	nop			; (mov r8, r8)
 9cc:	00000d18 	.word	0x00000d18
 9d0:	20000000 	.word	0x20000000
 9d4:	2000000c 	.word	0x2000000c
 9d8:	20000004 	.word	0x20000004
 9dc:	2000000c 	.word	0x2000000c
 9e0:	20000088 	.word	0x20000088
 9e4:	e000ed00 	.word	0xe000ed00
 9e8:	00000000 	.word	0x00000000
 9ec:	41004000 	.word	0x41004000
 9f0:	00000c71 	.word	0x00000c71
 9f4:	00000b45 	.word	0x00000b45

000009f8 <extint_detection_callback>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
void extint_detection_callback(void)
{
 9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (port_base->IN.reg & pin_mask);
 9fa:	4b13      	ldr	r3, [pc, #76]	; (a48 <extint_detection_callback+0x50>)
 9fc:	6a1b      	ldr	r3, [r3, #32]
	if (level) {
 9fe:	041b      	lsls	r3, r3, #16
 a00:	d517      	bpl.n	a32 <extint_detection_callback+0x3a>
		port_base->OUTSET.reg = pin_mask;
 a02:	2280      	movs	r2, #128	; 0x80
 a04:	01d2      	lsls	r2, r2, #7
 a06:	4b10      	ldr	r3, [pc, #64]	; (a48 <extint_detection_callback+0x50>)
 a08:	619a      	str	r2, [r3, #24]
 a0a:	2405      	movs	r4, #5
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
 a0c:	4f0e      	ldr	r7, [pc, #56]	; (a48 <extint_detection_callback+0x50>)
 a0e:	2680      	movs	r6, #128	; 0x80
 a10:	01f6      	lsls	r6, r6, #7
	bool button_pin_state = port_pin_get_input_level(BUTTON_0_PIN);
	port_pin_set_output_level(LED_0_PIN, button_pin_state);
	for (int i = 0; i<5; i++)
	{
		port_pin_toggle_output_level(LED_0_PIN);
		delay_ms(100);
 a12:	4d0e      	ldr	r5, [pc, #56]	; (a4c <extint_detection_callback+0x54>)
 a14:	61fe      	str	r6, [r7, #28]
 a16:	2064      	movs	r0, #100	; 0x64
 a18:	47a8      	blx	r5
 a1a:	3c01      	subs	r4, #1
	for (int i = 0; i<5; i++)
 a1c:	2c00      	cmp	r4, #0
 a1e:	d1f9      	bne.n	a14 <extint_detection_callback+0x1c>
	return (port_base->IN.reg & pin_mask);
 a20:	4b09      	ldr	r3, [pc, #36]	; (a48 <extint_detection_callback+0x50>)
 a22:	6a1b      	ldr	r3, [r3, #32]
	if (level) {
 a24:	041b      	lsls	r3, r3, #16
 a26:	d409      	bmi.n	a3c <extint_detection_callback+0x44>
		port_base->OUTCLR.reg = pin_mask;
 a28:	2280      	movs	r2, #128	; 0x80
 a2a:	01d2      	lsls	r2, r2, #7
 a2c:	4b06      	ldr	r3, [pc, #24]	; (a48 <extint_detection_callback+0x50>)
 a2e:	615a      	str	r2, [r3, #20]
	}
	button_pin_state = port_pin_get_input_level(BUTTON_0_PIN);
	port_pin_set_output_level(LED_0_PIN, button_pin_state);
 }
 a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 a32:	2280      	movs	r2, #128	; 0x80
 a34:	01d2      	lsls	r2, r2, #7
 a36:	4b04      	ldr	r3, [pc, #16]	; (a48 <extint_detection_callback+0x50>)
 a38:	615a      	str	r2, [r3, #20]
 a3a:	e7e6      	b.n	a0a <extint_detection_callback+0x12>
		port_base->OUTSET.reg = pin_mask;
 a3c:	2280      	movs	r2, #128	; 0x80
 a3e:	01d2      	lsls	r2, r2, #7
 a40:	4b01      	ldr	r3, [pc, #4]	; (a48 <extint_detection_callback+0x50>)
 a42:	619a      	str	r2, [r3, #24]
 a44:	e7f4      	b.n	a30 <extint_detection_callback+0x38>
 a46:	46c0      	nop			; (mov r8, r8)
 a48:	41004400 	.word	0x41004400
 a4c:	00000145 	.word	0x00000145

00000a50 <config_led>:
 {
 a50:	b500      	push	{lr}
 a52:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
 a54:	a901      	add	r1, sp, #4
 a56:	2301      	movs	r3, #1
 a58:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
 a5a:	2200      	movs	r2, #0
 a5c:	708a      	strb	r2, [r1, #2]
	 pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 a5e:	700b      	strb	r3, [r1, #0]
	 port_pin_set_config(LED_0_PIN, &pin_conf);
 a60:	200e      	movs	r0, #14
 a62:	4b04      	ldr	r3, [pc, #16]	; (a74 <config_led+0x24>)
 a64:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
 a66:	2280      	movs	r2, #128	; 0x80
 a68:	01d2      	lsls	r2, r2, #7
 a6a:	4b03      	ldr	r3, [pc, #12]	; (a78 <config_led+0x28>)
 a6c:	619a      	str	r2, [r3, #24]
 }
 a6e:	b003      	add	sp, #12
 a70:	bd00      	pop	{pc}
 a72:	46c0      	nop			; (mov r8, r8)
 a74:	00000281 	.word	0x00000281
 a78:	41004400 	.word	0x41004400

00000a7c <configure_extint_channel>:
{
 a7c:	b510      	push	{r4, lr}
 a7e:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
 a80:	ac01      	add	r4, sp, #4
 a82:	0020      	movs	r0, r4
 a84:	4b07      	ldr	r3, [pc, #28]	; (aa4 <configure_extint_channel+0x28>)
 a86:	4798      	blx	r3
	config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
 a88:	230f      	movs	r3, #15
 a8a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
 a8c:	2300      	movs	r3, #0
 a8e:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
 a90:	3301      	adds	r3, #1
 a92:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
 a94:	3302      	adds	r3, #2
 a96:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
 a98:	0021      	movs	r1, r4
 a9a:	200f      	movs	r0, #15
 a9c:	4b02      	ldr	r3, [pc, #8]	; (aa8 <configure_extint_channel+0x2c>)
 a9e:	4798      	blx	r3
}
 aa0:	b004      	add	sp, #16
 aa2:	bd10      	pop	{r4, pc}
 aa4:	000001f5 	.word	0x000001f5
 aa8:	00000209 	.word	0x00000209

00000aac <configure_extint_callbacks>:
{
 aac:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
 aae:	2200      	movs	r2, #0
 ab0:	210f      	movs	r1, #15
 ab2:	4804      	ldr	r0, [pc, #16]	; (ac4 <configure_extint_callbacks+0x18>)
 ab4:	4b04      	ldr	r3, [pc, #16]	; (ac8 <configure_extint_callbacks+0x1c>)
 ab6:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
 ab8:	2100      	movs	r1, #0
 aba:	200f      	movs	r0, #15
 abc:	4b03      	ldr	r3, [pc, #12]	; (acc <configure_extint_callbacks+0x20>)
 abe:	4798      	blx	r3
}
 ac0:	bd10      	pop	{r4, pc}
 ac2:	46c0      	nop			; (mov r8, r8)
 ac4:	000009f9 	.word	0x000009f9
 ac8:	000002a5 	.word	0x000002a5
 acc:	000002d1 	.word	0x000002d1

00000ad0 <SysTick_Handler>:
 * @note				- 
 ******************************************************************************************************/
void SysTick_Handler(void)
{
	// Your code goes here
}
 ad0:	4770      	bx	lr
	...

00000ad4 <sys_config>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
void sys_config(void)
{
 ad4:	b510      	push	{r4, lr}
 	/*Configure system tick to generate periodic interrupts */
 	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
 ad6:	2000      	movs	r0, #0
 ad8:	4b11      	ldr	r3, [pc, #68]	; (b20 <sys_config+0x4c>)
 ada:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 adc:	3801      	subs	r0, #1
 ade:	4b11      	ldr	r3, [pc, #68]	; (b24 <sys_config+0x50>)
 ae0:	4298      	cmp	r0, r3
 ae2:	d80d      	bhi.n	b00 <sys_config+0x2c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 ae4:	4a10      	ldr	r2, [pc, #64]	; (b28 <sys_config+0x54>)
 ae6:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 ae8:	4810      	ldr	r0, [pc, #64]	; (b2c <sys_config+0x58>)
 aea:	6a03      	ldr	r3, [r0, #32]
 aec:	021b      	lsls	r3, r3, #8
 aee:	0a1b      	lsrs	r3, r3, #8
 af0:	21c0      	movs	r1, #192	; 0xc0
 af2:	0609      	lsls	r1, r1, #24
 af4:	430b      	orrs	r3, r1
 af6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 af8:	2300      	movs	r3, #0
 afa:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 afc:	3307      	adds	r3, #7
 afe:	6013      	str	r3, [r2, #0]
	delay_init();
 b00:	4b0b      	ldr	r3, [pc, #44]	; (b30 <sys_config+0x5c>)
 b02:	4798      	blx	r3

	config_led();
 b04:	4b0b      	ldr	r3, [pc, #44]	; (b34 <sys_config+0x60>)
 b06:	4798      	blx	r3

 	configure_extint_channel();
 b08:	4b0b      	ldr	r3, [pc, #44]	; (b38 <sys_config+0x64>)
 b0a:	4798      	blx	r3
 	configure_extint_callbacks();
 b0c:	4b0b      	ldr	r3, [pc, #44]	; (b3c <sys_config+0x68>)
 b0e:	4798      	blx	r3
	cpu_irq_enable();
 b10:	2201      	movs	r2, #1
 b12:	4b0b      	ldr	r3, [pc, #44]	; (b40 <sys_config+0x6c>)
 b14:	701a      	strb	r2, [r3, #0]
 b16:	f3bf 8f5f 	dmb	sy
 b1a:	b662      	cpsie	i
 	system_interrupt_enable_global();
 b1c:	bd10      	pop	{r4, pc}
 b1e:	46c0      	nop			; (mov r8, r8)
 b20:	000006ed 	.word	0x000006ed
 b24:	00ffffff 	.word	0x00ffffff
 b28:	e000e010 	.word	0xe000e010
 b2c:	e000ed00 	.word	0xe000ed00
 b30:	00000105 	.word	0x00000105
 b34:	00000a51 	.word	0x00000a51
 b38:	00000a7d 	.word	0x00000a7d
 b3c:	00000aad 	.word	0x00000aad
 b40:	20000008 	.word	0x20000008

00000b44 <main>:
 * @note				- MCU specific definitions in (src->common2->boards) -> user_board.h, init routines in init.c
 *	                    - Peripheral config in Peripherals.c (src)
 *						- EXTINT will fire callback asynchronously. (Button0 press -> interrupt callback -> LED0 toggle)
 ******************************************************************************************************/
int main (void)
{
 b44:	b510      	push	{r4, lr}
	system_init();
 b46:	4b02      	ldr	r3, [pc, #8]	; (b50 <main+0xc>)
 b48:	4798      	blx	r3
	sys_config();
 b4a:	4b02      	ldr	r3, [pc, #8]	; (b54 <main+0x10>)
 b4c:	4798      	blx	r3
 b4e:	e7fe      	b.n	b4e <main+0xa>
 b50:	00000931 	.word	0x00000931
 b54:	00000ad5 	.word	0x00000ad5

00000b58 <__udivsi3>:
 b58:	2200      	movs	r2, #0
 b5a:	0843      	lsrs	r3, r0, #1
 b5c:	428b      	cmp	r3, r1
 b5e:	d374      	bcc.n	c4a <__udivsi3+0xf2>
 b60:	0903      	lsrs	r3, r0, #4
 b62:	428b      	cmp	r3, r1
 b64:	d35f      	bcc.n	c26 <__udivsi3+0xce>
 b66:	0a03      	lsrs	r3, r0, #8
 b68:	428b      	cmp	r3, r1
 b6a:	d344      	bcc.n	bf6 <__udivsi3+0x9e>
 b6c:	0b03      	lsrs	r3, r0, #12
 b6e:	428b      	cmp	r3, r1
 b70:	d328      	bcc.n	bc4 <__udivsi3+0x6c>
 b72:	0c03      	lsrs	r3, r0, #16
 b74:	428b      	cmp	r3, r1
 b76:	d30d      	bcc.n	b94 <__udivsi3+0x3c>
 b78:	22ff      	movs	r2, #255	; 0xff
 b7a:	0209      	lsls	r1, r1, #8
 b7c:	ba12      	rev	r2, r2
 b7e:	0c03      	lsrs	r3, r0, #16
 b80:	428b      	cmp	r3, r1
 b82:	d302      	bcc.n	b8a <__udivsi3+0x32>
 b84:	1212      	asrs	r2, r2, #8
 b86:	0209      	lsls	r1, r1, #8
 b88:	d065      	beq.n	c56 <__udivsi3+0xfe>
 b8a:	0b03      	lsrs	r3, r0, #12
 b8c:	428b      	cmp	r3, r1
 b8e:	d319      	bcc.n	bc4 <__udivsi3+0x6c>
 b90:	e000      	b.n	b94 <__udivsi3+0x3c>
 b92:	0a09      	lsrs	r1, r1, #8
 b94:	0bc3      	lsrs	r3, r0, #15
 b96:	428b      	cmp	r3, r1
 b98:	d301      	bcc.n	b9e <__udivsi3+0x46>
 b9a:	03cb      	lsls	r3, r1, #15
 b9c:	1ac0      	subs	r0, r0, r3
 b9e:	4152      	adcs	r2, r2
 ba0:	0b83      	lsrs	r3, r0, #14
 ba2:	428b      	cmp	r3, r1
 ba4:	d301      	bcc.n	baa <__udivsi3+0x52>
 ba6:	038b      	lsls	r3, r1, #14
 ba8:	1ac0      	subs	r0, r0, r3
 baa:	4152      	adcs	r2, r2
 bac:	0b43      	lsrs	r3, r0, #13
 bae:	428b      	cmp	r3, r1
 bb0:	d301      	bcc.n	bb6 <__udivsi3+0x5e>
 bb2:	034b      	lsls	r3, r1, #13
 bb4:	1ac0      	subs	r0, r0, r3
 bb6:	4152      	adcs	r2, r2
 bb8:	0b03      	lsrs	r3, r0, #12
 bba:	428b      	cmp	r3, r1
 bbc:	d301      	bcc.n	bc2 <__udivsi3+0x6a>
 bbe:	030b      	lsls	r3, r1, #12
 bc0:	1ac0      	subs	r0, r0, r3
 bc2:	4152      	adcs	r2, r2
 bc4:	0ac3      	lsrs	r3, r0, #11
 bc6:	428b      	cmp	r3, r1
 bc8:	d301      	bcc.n	bce <__udivsi3+0x76>
 bca:	02cb      	lsls	r3, r1, #11
 bcc:	1ac0      	subs	r0, r0, r3
 bce:	4152      	adcs	r2, r2
 bd0:	0a83      	lsrs	r3, r0, #10
 bd2:	428b      	cmp	r3, r1
 bd4:	d301      	bcc.n	bda <__udivsi3+0x82>
 bd6:	028b      	lsls	r3, r1, #10
 bd8:	1ac0      	subs	r0, r0, r3
 bda:	4152      	adcs	r2, r2
 bdc:	0a43      	lsrs	r3, r0, #9
 bde:	428b      	cmp	r3, r1
 be0:	d301      	bcc.n	be6 <__udivsi3+0x8e>
 be2:	024b      	lsls	r3, r1, #9
 be4:	1ac0      	subs	r0, r0, r3
 be6:	4152      	adcs	r2, r2
 be8:	0a03      	lsrs	r3, r0, #8
 bea:	428b      	cmp	r3, r1
 bec:	d301      	bcc.n	bf2 <__udivsi3+0x9a>
 bee:	020b      	lsls	r3, r1, #8
 bf0:	1ac0      	subs	r0, r0, r3
 bf2:	4152      	adcs	r2, r2
 bf4:	d2cd      	bcs.n	b92 <__udivsi3+0x3a>
 bf6:	09c3      	lsrs	r3, r0, #7
 bf8:	428b      	cmp	r3, r1
 bfa:	d301      	bcc.n	c00 <__udivsi3+0xa8>
 bfc:	01cb      	lsls	r3, r1, #7
 bfe:	1ac0      	subs	r0, r0, r3
 c00:	4152      	adcs	r2, r2
 c02:	0983      	lsrs	r3, r0, #6
 c04:	428b      	cmp	r3, r1
 c06:	d301      	bcc.n	c0c <__udivsi3+0xb4>
 c08:	018b      	lsls	r3, r1, #6
 c0a:	1ac0      	subs	r0, r0, r3
 c0c:	4152      	adcs	r2, r2
 c0e:	0943      	lsrs	r3, r0, #5
 c10:	428b      	cmp	r3, r1
 c12:	d301      	bcc.n	c18 <__udivsi3+0xc0>
 c14:	014b      	lsls	r3, r1, #5
 c16:	1ac0      	subs	r0, r0, r3
 c18:	4152      	adcs	r2, r2
 c1a:	0903      	lsrs	r3, r0, #4
 c1c:	428b      	cmp	r3, r1
 c1e:	d301      	bcc.n	c24 <__udivsi3+0xcc>
 c20:	010b      	lsls	r3, r1, #4
 c22:	1ac0      	subs	r0, r0, r3
 c24:	4152      	adcs	r2, r2
 c26:	08c3      	lsrs	r3, r0, #3
 c28:	428b      	cmp	r3, r1
 c2a:	d301      	bcc.n	c30 <__udivsi3+0xd8>
 c2c:	00cb      	lsls	r3, r1, #3
 c2e:	1ac0      	subs	r0, r0, r3
 c30:	4152      	adcs	r2, r2
 c32:	0883      	lsrs	r3, r0, #2
 c34:	428b      	cmp	r3, r1
 c36:	d301      	bcc.n	c3c <__udivsi3+0xe4>
 c38:	008b      	lsls	r3, r1, #2
 c3a:	1ac0      	subs	r0, r0, r3
 c3c:	4152      	adcs	r2, r2
 c3e:	0843      	lsrs	r3, r0, #1
 c40:	428b      	cmp	r3, r1
 c42:	d301      	bcc.n	c48 <__udivsi3+0xf0>
 c44:	004b      	lsls	r3, r1, #1
 c46:	1ac0      	subs	r0, r0, r3
 c48:	4152      	adcs	r2, r2
 c4a:	1a41      	subs	r1, r0, r1
 c4c:	d200      	bcs.n	c50 <__udivsi3+0xf8>
 c4e:	4601      	mov	r1, r0
 c50:	4152      	adcs	r2, r2
 c52:	4610      	mov	r0, r2
 c54:	4770      	bx	lr
 c56:	e7ff      	b.n	c58 <__udivsi3+0x100>
 c58:	b501      	push	{r0, lr}
 c5a:	2000      	movs	r0, #0
 c5c:	f000 f806 	bl	c6c <__aeabi_idiv0>
 c60:	bd02      	pop	{r1, pc}
 c62:	46c0      	nop			; (mov r8, r8)

00000c64 <__aeabi_uidivmod>:
 c64:	2900      	cmp	r1, #0
 c66:	d0f7      	beq.n	c58 <__udivsi3+0x100>
 c68:	e776      	b.n	b58 <__udivsi3>
 c6a:	4770      	bx	lr

00000c6c <__aeabi_idiv0>:
 c6c:	4770      	bx	lr
 c6e:	46c0      	nop			; (mov r8, r8)

00000c70 <__libc_init_array>:
 c70:	b570      	push	{r4, r5, r6, lr}
 c72:	2600      	movs	r6, #0
 c74:	4d0c      	ldr	r5, [pc, #48]	; (ca8 <__libc_init_array+0x38>)
 c76:	4c0d      	ldr	r4, [pc, #52]	; (cac <__libc_init_array+0x3c>)
 c78:	1b64      	subs	r4, r4, r5
 c7a:	10a4      	asrs	r4, r4, #2
 c7c:	42a6      	cmp	r6, r4
 c7e:	d109      	bne.n	c94 <__libc_init_array+0x24>
 c80:	2600      	movs	r6, #0
 c82:	f000 f839 	bl	cf8 <_init>
 c86:	4d0a      	ldr	r5, [pc, #40]	; (cb0 <__libc_init_array+0x40>)
 c88:	4c0a      	ldr	r4, [pc, #40]	; (cb4 <__libc_init_array+0x44>)
 c8a:	1b64      	subs	r4, r4, r5
 c8c:	10a4      	asrs	r4, r4, #2
 c8e:	42a6      	cmp	r6, r4
 c90:	d105      	bne.n	c9e <__libc_init_array+0x2e>
 c92:	bd70      	pop	{r4, r5, r6, pc}
 c94:	00b3      	lsls	r3, r6, #2
 c96:	58eb      	ldr	r3, [r5, r3]
 c98:	4798      	blx	r3
 c9a:	3601      	adds	r6, #1
 c9c:	e7ee      	b.n	c7c <__libc_init_array+0xc>
 c9e:	00b3      	lsls	r3, r6, #2
 ca0:	58eb      	ldr	r3, [r5, r3]
 ca2:	4798      	blx	r3
 ca4:	3601      	adds	r6, #1
 ca6:	e7f2      	b.n	c8e <__libc_init_array+0x1e>
 ca8:	00000d04 	.word	0x00000d04
 cac:	00000d04 	.word	0x00000d04
 cb0:	00000d04 	.word	0x00000d04
 cb4:	00000d08 	.word	0x00000d08
 cb8:	000003fe 	.word	0x000003fe
 cbc:	000003fa 	.word	0x000003fa
 cc0:	000003fa 	.word	0x000003fa
 cc4:	0000044a 	.word	0x0000044a
 cc8:	0000044a 	.word	0x0000044a
 ccc:	00000412 	.word	0x00000412
 cd0:	00000404 	.word	0x00000404
 cd4:	00000418 	.word	0x00000418
 cd8:	000004d0 	.word	0x000004d0
 cdc:	000004b0 	.word	0x000004b0
 ce0:	000004b0 	.word	0x000004b0
 ce4:	00000520 	.word	0x00000520
 ce8:	000004c2 	.word	0x000004c2
 cec:	000004de 	.word	0x000004de
 cf0:	000004b4 	.word	0x000004b4
 cf4:	000004ec 	.word	0x000004ec

00000cf8 <_init>:
 cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 cfa:	46c0      	nop			; (mov r8, r8)
 cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 cfe:	bc08      	pop	{r3}
 d00:	469e      	mov	lr, r3
 d02:	4770      	bx	lr

00000d04 <__init_array_start>:
 d04:	000000cd 	.word	0x000000cd

00000d08 <_fini>:
 d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 d0a:	46c0      	nop			; (mov r8, r8)
 d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 d0e:	bc08      	pop	{r3}
 d10:	469e      	mov	lr, r3
 d12:	4770      	bx	lr

00000d14 <__fini_array_start>:
 d14:	000000a5 	.word	0x000000a5
